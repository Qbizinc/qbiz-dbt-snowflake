{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.4", "generated_at": "2025-05-16T23:22:48.347945Z", "invocation_id": "62ca691c-05ea-4fc5-aac3-900a81842051", "env": {}, "project_name": "poc_dbt_snowflake", "project_id": "31ee9ba361cea65653e28b6a84140422", "user_id": "6c4e6102-1e73-4d14-be58-866bd1dc12ef", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.poc_dbt_snowflake.unique_cocktails": {"database": "SANDBOX_DATA_PIPELINE", "schema": "gold", "name": "unique_cocktails", "resource_type": "model", "package_name": "poc_dbt_snowflake", "path": "gold/unique_cocktails.sql", "original_file_path": "models/gold/unique_cocktails.sql", "unique_id": "model.poc_dbt_snowflake.unique_cocktails", "fqn": ["poc_dbt_snowflake", "gold", "unique_cocktails"], "alias": "unique_cocktails", "checksum": {"name": "sha256", "checksum": "0ff5e44e66d97ce00e1e26ad0f27fdf48e41233a374eb82203172ad6fa1b7539"}, "config": {"enabled": true, "alias": null, "schema": "gold", "database": null, "tags": ["gold"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#EFBF04"}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected"}, "tags": ["gold"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#EFBF04"}, "patch_path": null, "build_path": "target/run/poc_dbt_snowflake/models/gold/unique_cocktails.sql", "unrendered_config": {"materialized": "view", "schema": "gold", "tags": ["gold"], "docs": {"node_color": "#EFBF04"}}, "created_at": 1746823682.9875815, "relation_name": "SANDBOX_DATA_PIPELINE.gold.unique_cocktails", "raw_code": "SELECT * FROM sandbox_data_pipeline.public.cocktails\nQUALIFY ROW_NUMBER() OVER (PARTITION BY drink_id ORDER BY run_hr DESC) = 1", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/poc_dbt_snowflake/models/gold/unique_cocktails.sql", "compiled": true, "compiled_code": "SELECT * FROM sandbox_data_pipeline.public.cocktails\nQUALIFY ROW_NUMBER() OVER (PARTITION BY drink_id ORDER BY run_hr DESC) = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.poc_dbt_snowflake.tpcds_date_dim": {"database": "SANDBOX_DATA_PIPELINE", "schema": "lookup_tables", "name": "tpcds_date_dim", "resource_type": "model", "package_name": "poc_dbt_snowflake", "path": "lookup_tables/tpcds_date_dim.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.sql", "unique_id": "model.poc_dbt_snowflake.tpcds_date_dim", "fqn": ["poc_dbt_snowflake", "lookup_tables", "tpcds_date_dim"], "alias": "tpcds_date_dim", "checksum": {"name": "sha256", "checksum": "e5b5fcef7c7a3be998de7b809e6143853b5b3a92fbf790bd402b71b73c3dc347"}, "config": {"enabled": true, "alias": null, "schema": "lookup_tables", "database": null, "tags": ["lookup_tables"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "hash_key", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#C4A484"}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "merge_update_columns": ["etl_updated_ts", "updated_by", "update_notes"]}, "tags": ["lookup_tables"], "description": "TPCDS date dimension table containing detailed calendar attributes.", "columns": {"D_DATE_SK": {"name": "D_DATE_SK", "description": "Surrogate key for the date (primary key).", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_DATE_ID": {"name": "D_DATE_ID", "description": "Business key identifier for the date.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_DATE": {"name": "D_DATE", "description": "Actual calendar date value.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_MONTH_SEQ": {"name": "D_MONTH_SEQ", "description": "Monthly sequence number.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_WEEK_SEQ": {"name": "D_WEEK_SEQ", "description": "Weekly sequence number.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_QUARTER_SEQ": {"name": "D_QUARTER_SEQ", "description": "Quarterly sequence number.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_YEAR": {"name": "D_YEAR", "description": "Calendar year number.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_DOW": {"name": "D_DOW", "description": "Day of week (0-6).", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_MOY": {"name": "D_MOY", "description": "Month of year (1-12).", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_DOM": {"name": "D_DOM", "description": "Day of month (1-31).", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_QOY": {"name": "D_QOY", "description": "Quarter of year (1-4).", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_FY_YEAR": {"name": "D_FY_YEAR", "description": "Fiscal year number.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_FY_QUARTER_SEQ": {"name": "D_FY_QUARTER_SEQ", "description": "Fiscal quarter sequence.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_FY_WEEK_SEQ": {"name": "D_FY_WEEK_SEQ", "description": "Fiscal week sequence.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_DAY_NAME": {"name": "D_DAY_NAME", "description": "Full name of the day (e.g., Monday).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_QUARTER_NAME": {"name": "D_QUARTER_NAME", "description": "Quarter name (e.g., Q1).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_HOLIDAY": {"name": "D_HOLIDAY", "description": "Holiday indicator (Y/N).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_WEEKEND": {"name": "D_WEEKEND", "description": "Weekend indicator (Y/N).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_FOLLOWING_HOLIDAY": {"name": "D_FOLLOWING_HOLIDAY", "description": "Following holiday indicator (Y/N).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_FIRST_DOM": {"name": "D_FIRST_DOM", "description": "First day of month flag (1/0).", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_LAST_DOM": {"name": "D_LAST_DOM", "description": "Last day of month flag (1/0).", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_SAME_DAY_LY": {"name": "D_SAME_DAY_LY", "description": "Same day last year flag (1/0).", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_SAME_DAY_LQ": {"name": "D_SAME_DAY_LQ", "description": "Same day last quarter flag (1/0).", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_CURRENT_DAY": {"name": "D_CURRENT_DAY", "description": "Current day indicator (Y/N).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_CURRENT_WEEK": {"name": "D_CURRENT_WEEK", "description": "Current week indicator (Y/N).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_CURRENT_MONTH": {"name": "D_CURRENT_MONTH", "description": "Current month indicator (Y/N).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_CURRENT_QUARTER": {"name": "D_CURRENT_QUARTER", "description": "Current quarter indicator (Y/N).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "D_CURRENT_YEAR": {"name": "D_CURRENT_YEAR", "description": "Current year indicator (Y/N).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hash_key": {"name": "hash_key", "description": "Unique identifier of Bronze Layer entry", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "etl_created_ts": {"name": "etl_created_ts", "description": "UTC timestamp when the Bronze Layer record was created", "meta": {}, "data_type": "timestamp_tz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "etl_updated_ts": {"name": "etl_updated_ts", "description": "UTC timestamp when the Bronze Layer record was last updated", "meta": {}, "data_type": "timestamp_tz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_by": {"name": "updated_by", "description": "User who last updated the record", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_notes": {"name": "update_notes", "description": "Additional notes on the update", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#C4A484"}, "patch_path": "poc_dbt_snowflake://models/lookup_tables/tpcds_date_dim.yml", "build_path": "target/run/poc_dbt_snowflake/models/lookup_tables/tpcds_date_dim.sql", "unrendered_config": {"schema": "lookup_tables", "materialized": "incremental", "on_schema_change": "append_new_columns", "incremental_strategy": "merge", "unique_key": "hash_key", "merge_update_columns": ["etl_updated_ts", "updated_by", "update_notes"], "contract": {"enforced": true, "alias_types": true}, "tags": ["lookup_tables"], "docs": {"node_color": "#C4A484"}}, "created_at": 1747437772.5160007, "relation_name": "SANDBOX_DATA_PIPELINE.lookup_tables.tpcds_date_dim", "raw_code": "/*\nSQL script to create the tpcds date_dim model in the lookup schema\n*/\nSELECT\n    D_DATE_SK\n    , D_DATE_ID\n    , D_DATE\n    , D_MONTH_SEQ\n    , D_WEEK_SEQ\n    , D_QUARTER_SEQ\n    , D_YEAR\n    , D_DOW\n    , D_MOY\n    , D_DOM\n    , D_QOY\n    , D_FY_YEAR\n    , D_FY_QUARTER_SEQ\n    , D_FY_WEEK_SEQ\n    , D_DAY_NAME\n    , D_QUARTER_NAME\n    , D_HOLIDAY\n    , D_WEEKEND\n    , D_FOLLOWING_HOLIDAY\n    , D_FIRST_DOM\n    , D_LAST_DOM\n    , D_SAME_DAY_LY\n    , D_SAME_DAY_LQ\n    , D_CURRENT_DAY\n    , D_CURRENT_WEEK\n    , D_CURRENT_MONTH\n    , D_CURRENT_QUARTER\n    , D_CURRENT_YEAR\n    , {{\n        dbt_utils.generate_surrogate_key(\n            [\n                'D_DATE_SK',\n                'D_DATE_ID',\n                'D_DATE',\n                'D_MONTH_SEQ',\n                'D_WEEK_SEQ',\n                'D_QUARTER_SEQ',\n                'D_YEAR',\n                'D_DOW',\n                'D_MOY',\n                'D_DOM',\n                'D_QOY',\n                'D_FY_YEAR',\n                'D_FY_QUARTER_SEQ',\n                'D_FY_WEEK_SEQ',\n                'D_DAY_NAME',\n                'D_QUARTER_NAME',\n                'D_HOLIDAY',\n                'D_WEEKEND',\n                'D_FOLLOWING_HOLIDAY',\n                'D_FIRST_DOM',\n                'D_LAST_DOM',\n                'D_SAME_DAY_LY',\n                'D_SAME_DAY_LQ',\n                'D_CURRENT_DAY',\n                'D_CURRENT_WEEK',\n                'D_CURRENT_MONTH',\n                'D_CURRENT_QUARTER',\n                'D_CURRENT_YEAR'\n            ]\n        )\n    }} AS HASH_KEY\n    , {{ audit_columns() }}\nFROM {{ source('TPCDS', 'DATE_DIM') }}", "language": "sql", "refs": [], "sources": [["TPCDS", "DATE_DIM"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.poc_dbt_snowflake.audit_columns"], "nodes": ["source.poc_dbt_snowflake.TPCDS.DATE_DIM"]}, "compiled_path": "target/compiled/poc_dbt_snowflake/models/lookup_tables/tpcds_date_dim.sql", "compiled": true, "compiled_code": "/*\nSQL script to create the tpcds date_dim model in the lookup schema\n*/\nSELECT\n    D_DATE_SK\n    , D_DATE_ID\n    , D_DATE\n    , D_MONTH_SEQ\n    , D_WEEK_SEQ\n    , D_QUARTER_SEQ\n    , D_YEAR\n    , D_DOW\n    , D_MOY\n    , D_DOM\n    , D_QOY\n    , D_FY_YEAR\n    , D_FY_QUARTER_SEQ\n    , D_FY_WEEK_SEQ\n    , D_DAY_NAME\n    , D_QUARTER_NAME\n    , D_HOLIDAY\n    , D_WEEKEND\n    , D_FOLLOWING_HOLIDAY\n    , D_FIRST_DOM\n    , D_LAST_DOM\n    , D_SAME_DAY_LY\n    , D_SAME_DAY_LQ\n    , D_CURRENT_DAY\n    , D_CURRENT_WEEK\n    , D_CURRENT_MONTH\n    , D_CURRENT_QUARTER\n    , D_CURRENT_YEAR\n    , md5(cast(coalesce(cast(D_DATE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_DATE_ID as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_DATE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_MONTH_SEQ as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_WEEK_SEQ as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_QUARTER_SEQ as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_YEAR as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_DOW as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_MOY as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_DOM as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_QOY as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_FY_YEAR as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_FY_QUARTER_SEQ as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_FY_WEEK_SEQ as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_DAY_NAME as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_QUARTER_NAME as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_HOLIDAY as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_WEEKEND as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_FOLLOWING_HOLIDAY as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_FIRST_DOM as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_LAST_DOM as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_SAME_DAY_LY as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_SAME_DAY_LQ as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_CURRENT_DAY as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_CURRENT_WEEK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_CURRENT_MONTH as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_CURRENT_QUARTER as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(D_CURRENT_YEAR as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS HASH_KEY\n    , convert_timezone('UTC', current_timestamp()) AS etl_created_ts\n    , convert_timezone('UTC', current_timestamp()) AS etl_updated_ts\n    , CAST(CURRENT_USER AS VARCHAR) AS updated_by\n    , NVL('', NULL) AS update_notes\nFROM QBIZ_DATA.TPCDS.DATE_DIM", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "a2655795dbe79e1980e24315cd7a7bdbcdf7aa7879e652ec47b1f38eda883676"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hash_key"], "time_spine": null}, "model.poc_dbt_snowflake.tpcds_customer": {"database": "SANDBOX_DATA_PIPELINE", "schema": "bronze", "name": "tpcds_customer", "resource_type": "model", "package_name": "poc_dbt_snowflake", "path": "bronze/tpcds_customer.sql", "original_file_path": "models/bronze/tpcds_customer.sql", "unique_id": "model.poc_dbt_snowflake.tpcds_customer", "fqn": ["poc_dbt_snowflake", "bronze", "tpcds_customer"], "alias": "tpcds_customer", "checksum": {"name": "sha256", "checksum": "efafe30db0dbb7a568e5aaff4017e0aae193fb8f62c248062830e411bade1c2d"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["bronze"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "hash_key", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#CD7F32"}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "merge_update_columns": ["etl_updated_ts", "updated_by", "update_notes"]}, "tags": ["bronze"], "description": "TPCDS customer table containing customer demographic and account information.", "columns": {"c_customer_sk": {"name": "c_customer_sk", "description": "Surrogate key for the customer.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_customer_id": {"name": "c_customer_id", "description": "Business key for the customer.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_current_cdemo_sk": {"name": "c_current_cdemo_sk", "description": "Current customer demographic surrogate key.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_current_hdemo_sk": {"name": "c_current_hdemo_sk", "description": "Current household demographic surrogate key.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_current_addr_sk": {"name": "c_current_addr_sk", "description": "Current address surrogate key.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_first_shipto_date_sk": {"name": "c_first_shipto_date_sk", "description": "Date of first shipment surrogate key.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_first_sales_date_sk": {"name": "c_first_sales_date_sk", "description": "Date of first sale surrogate key.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_salutation": {"name": "c_salutation", "description": "Customer salutation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_first_name": {"name": "c_first_name", "description": "Customer first name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_last_name": {"name": "c_last_name", "description": "Customer last name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_preferred_cust_flag": {"name": "c_preferred_cust_flag", "description": "Preferred customer flag.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_birth_day": {"name": "c_birth_day", "description": "Customer birth day.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_birth_month": {"name": "c_birth_month", "description": "Customer birth month.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_birth_year": {"name": "c_birth_year", "description": "Customer birth year.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_birth_country": {"name": "c_birth_country", "description": "Customer birth country.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_login": {"name": "c_login", "description": "Customer login name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_email_address": {"name": "c_email_address", "description": "Customer email address.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "c_last_review_date": {"name": "c_last_review_date", "description": "Surrogate key for the last review date.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hash_key": {"name": "hash_key", "description": "Unique identifier of Bronze Layer entry", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "etl_created_ts": {"name": "etl_created_ts", "description": "UTC timestamp when the Bronze Layer record was created", "meta": {}, "data_type": "timestamp_tz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "etl_updated_ts": {"name": "etl_updated_ts", "description": "UTC timestamp when the Bronze Layer record was last updated", "meta": {}, "data_type": "timestamp_tz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_by": {"name": "updated_by", "description": "User who last updated the record", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_notes": {"name": "update_notes", "description": "Additional notes on the update", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#CD7F32"}, "patch_path": "poc_dbt_snowflake://models/bronze/tpcds_customer.yml", "build_path": "target/run/poc_dbt_snowflake/models/bronze/tpcds_customer.sql", "unrendered_config": {"schema": "bronze", "materialized": "incremental", "on_schema_change": "append_new_columns", "incremental_strategy": "merge", "unique_key": "hash_key", "merge_update_columns": ["etl_updated_ts", "updated_by", "update_notes"], "contract": {"enforced": true, "alias_types": true}, "tags": ["bronze"], "docs": {"node_color": "#CD7F32"}}, "created_at": 1747436913.4831011, "relation_name": "SANDBOX_DATA_PIPELINE.bronze.tpcds_customer", "raw_code": "/*\r\nSQL script to create the tpcds customer model in the Bronze Layer\r\n*/\r\nSELECT\r\n    C_CUSTOMER_SK\r\n    , C_CUSTOMER_ID\r\n    , C_CURRENT_CDEMO_SK\r\n    , C_CURRENT_HDEMO_SK\r\n    , C_CURRENT_ADDR_SK\r\n    , C_FIRST_SHIPTO_DATE_SK\r\n    , C_FIRST_SALES_DATE_SK\r\n    , C_SALUTATION\r\n    , C_FIRST_NAME\r\n    , C_LAST_NAME\r\n    , C_PREFERRED_CUST_FLAG\r\n    , C_BIRTH_DAY\r\n    , C_BIRTH_MONTH\r\n    , C_BIRTH_YEAR\r\n    , C_BIRTH_COUNTRY\r\n    , C_LOGIN\r\n    , C_EMAIL_ADDRESS\r\n    , C_LAST_REVIEW_DATE\r\n\t, {{\r\n            dbt_utils.generate_surrogate_key(\r\n                [\r\n                      'C_CUSTOMER_SK'\r\n                    , 'C_CUSTOMER_ID'\r\n                    , 'C_CURRENT_CDEMO_SK'\r\n                    , 'C_CURRENT_HDEMO_SK'\r\n                    , 'C_CURRENT_ADDR_SK'\r\n                    , 'C_FIRST_SHIPTO_DATE_SK'\r\n                    , 'C_FIRST_SALES_DATE_SK'\r\n                    , 'C_SALUTATION'\r\n                    , 'C_FIRST_NAME'\r\n                    , 'C_LAST_NAME'\r\n                    , 'C_PREFERRED_CUST_FLAG'\r\n                    , 'C_BIRTH_DAY'\r\n                    , 'C_BIRTH_MONTH'\r\n                    , 'C_BIRTH_YEAR'\r\n                    , 'C_BIRTH_COUNTRY'\r\n                    , 'C_LOGIN'\r\n                    , 'C_EMAIL_ADDRESS'\r\n                    , 'C_LAST_REVIEW_DATE'\r\n                ]\r\n            )\r\n        }} AS hash_key\r\n\t, {{ audit_columns() }}\r\nFROM {{ source('TPCDS', 'CUSTOMER') }}", "language": "sql", "refs": [], "sources": [["TPCDS", "CUSTOMER"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.poc_dbt_snowflake.audit_columns"], "nodes": ["source.poc_dbt_snowflake.TPCDS.CUSTOMER"]}, "compiled_path": "target/compiled/poc_dbt_snowflake/models/bronze/tpcds_customer.sql", "compiled": true, "compiled_code": "/*\nSQL script to create the tpcds customer model in the Bronze Layer\n*/\nSELECT\n    C_CUSTOMER_SK\n    , C_CUSTOMER_ID\n    , C_CURRENT_CDEMO_SK\n    , C_CURRENT_HDEMO_SK\n    , C_CURRENT_ADDR_SK\n    , C_FIRST_SHIPTO_DATE_SK\n    , C_FIRST_SALES_DATE_SK\n    , C_SALUTATION\n    , C_FIRST_NAME\n    , C_LAST_NAME\n    , C_PREFERRED_CUST_FLAG\n    , C_BIRTH_DAY\n    , C_BIRTH_MONTH\n    , C_BIRTH_YEAR\n    , C_BIRTH_COUNTRY\n    , C_LOGIN\n    , C_EMAIL_ADDRESS\n    , C_LAST_REVIEW_DATE\n\t, md5(cast(coalesce(cast(C_CUSTOMER_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_CUSTOMER_ID as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_CURRENT_CDEMO_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_CURRENT_HDEMO_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_CURRENT_ADDR_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_FIRST_SHIPTO_DATE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_FIRST_SALES_DATE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_SALUTATION as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_FIRST_NAME as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_LAST_NAME as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_PREFERRED_CUST_FLAG as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_BIRTH_DAY as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_BIRTH_MONTH as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_BIRTH_YEAR as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_BIRTH_COUNTRY as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_LOGIN as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_EMAIL_ADDRESS as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(C_LAST_REVIEW_DATE as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS hash_key\n\t, convert_timezone('UTC', current_timestamp()) AS etl_created_ts\n    , convert_timezone('UTC', current_timestamp()) AS etl_updated_ts\n    , CAST(CURRENT_USER AS VARCHAR) AS updated_by\n    , NVL('', NULL) AS update_notes\nFROM QBIZ_DATA.TPCDS.CUSTOMER", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "62bb88191ca7fbc2e43d396d5db5598c788384dc1449b7d80def88fb47ce0c2c"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hash_key"], "time_spine": null}, "model.poc_dbt_snowflake.tpcds_web_page": {"database": "SANDBOX_DATA_PIPELINE", "schema": "bronze", "name": "tpcds_web_page", "resource_type": "model", "package_name": "poc_dbt_snowflake", "path": "bronze/tpcds_web_page.sql", "original_file_path": "models/bronze/tpcds_web_page.sql", "unique_id": "model.poc_dbt_snowflake.tpcds_web_page", "fqn": ["poc_dbt_snowflake", "bronze", "tpcds_web_page"], "alias": "tpcds_web_page", "checksum": {"name": "sha256", "checksum": "b43dd095a5b4d3058e8ab536687c6a4e9cf69259ce814d2ff2c16f5d1ba60396"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["bronze"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "hash_key", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#CD7F32"}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "merge_update_columns": ["etl_updated_ts", "updated_by", "update_notes"]}, "tags": ["bronze"], "description": "TPCDS web_page dimension table containing web page metadata and attributes.", "columns": {"WP_WEB_PAGE_SK": {"name": "WP_WEB_PAGE_SK", "description": "Surrogate key for the web page.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WP_WEB_PAGE_ID": {"name": "WP_WEB_PAGE_ID", "description": "Business key for the web page.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WP_REC_START_DATE": {"name": "WP_REC_START_DATE", "description": "Record start date.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WP_REC_END_DATE": {"name": "WP_REC_END_DATE", "description": "Record end date.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WP_CREATION_DATE_SK": {"name": "WP_CREATION_DATE_SK", "description": "Surrogate key for the web page creation date.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WP_ACCESS_DATE_SK": {"name": "WP_ACCESS_DATE_SK", "description": "Surrogate key for the web page access date.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WP_AUTOGEN_FLAG": {"name": "WP_AUTOGEN_FLAG", "description": "Flag indicating if the page was auto-generated.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WP_CUSTOMER_SK": {"name": "WP_CUSTOMER_SK", "description": "Surrogate key for the customer associated with the web page.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WP_URL": {"name": "WP_URL", "description": "URL of the web page.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WP_TYPE": {"name": "WP_TYPE", "description": "Type of web page.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WP_CHAR_COUNT": {"name": "WP_CHAR_COUNT", "description": "Character count of the web page.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WP_LINK_COUNT": {"name": "WP_LINK_COUNT", "description": "Number of links on the web page.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WP_IMAGE_COUNT": {"name": "WP_IMAGE_COUNT", "description": "Number of images on the web page.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WP_MAX_AD_COUNT": {"name": "WP_MAX_AD_COUNT", "description": "Maximum number of ads allowed on the web page.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hash_key": {"name": "hash_key", "description": "Unique identifier of Bronze Layer entry", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "etl_created_ts": {"name": "etl_created_ts", "description": "UTC timestamp when the Bronze Layer record was created", "meta": {}, "data_type": "timestamp_tz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "etl_updated_ts": {"name": "etl_updated_ts", "description": "UTC timestamp when the Bronze Layer record was last updated", "meta": {}, "data_type": "timestamp_tz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_by": {"name": "updated_by", "description": "User who last updated the record", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_notes": {"name": "update_notes", "description": "Additional notes on the update", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#CD7F32"}, "patch_path": "poc_dbt_snowflake://models/bronze/tpcds_web_page.yml", "build_path": "target/run/poc_dbt_snowflake/models/bronze/tpcds_web_page.sql", "unrendered_config": {"schema": "bronze", "materialized": "incremental", "on_schema_change": "append_new_columns", "incremental_strategy": "merge", "unique_key": "hash_key", "merge_update_columns": ["etl_updated_ts", "updated_by", "update_notes"], "contract": {"enforced": true, "alias_types": true}, "tags": ["bronze"], "docs": {"node_color": "#CD7F32"}}, "created_at": 1747436913.493779, "relation_name": "SANDBOX_DATA_PIPELINE.bronze.tpcds_web_page", "raw_code": "/*\nSQL script to create the tpcds web_page model in the lookup schema\n*/\nSELECT\n    WP_WEB_PAGE_SK,\n    WP_WEB_PAGE_ID,\n    WP_REC_START_DATE,\n    WP_REC_END_DATE,\n    WP_CREATION_DATE_SK,\n    WP_ACCESS_DATE_SK,\n    WP_AUTOGEN_FLAG,\n    WP_CUSTOMER_SK,\n    WP_URL,\n    WP_TYPE,\n    WP_CHAR_COUNT,\n    WP_LINK_COUNT,\n    WP_IMAGE_COUNT,\n    WP_MAX_AD_COUNT,\n    {{\n        dbt_utils.generate_surrogate_key(\n            [\n                'WP_WEB_PAGE_SK',\n                'WP_WEB_PAGE_ID',\n                'WP_REC_START_DATE',\n                'WP_REC_END_DATE',\n                'WP_CREATION_DATE_SK',\n                'WP_ACCESS_DATE_SK',\n                'WP_AUTOGEN_FLAG',\n                'WP_CUSTOMER_SK',\n                'WP_URL',\n                'WP_TYPE',\n                'WP_CHAR_COUNT',\n                'WP_LINK_COUNT',\n                'WP_IMAGE_COUNT',\n                'WP_MAX_AD_COUNT'\n            ]\n        )\n    }} AS HASH_KEY,\n    {{ audit_columns() }}\nFROM {{ source('TPCDS', 'WEB_PAGE') }}", "language": "sql", "refs": [], "sources": [["TPCDS", "WEB_PAGE"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.poc_dbt_snowflake.audit_columns"], "nodes": ["source.poc_dbt_snowflake.TPCDS.WEB_PAGE"]}, "compiled_path": "target/compiled/poc_dbt_snowflake/models/bronze/tpcds_web_page.sql", "compiled": true, "compiled_code": "/*\nSQL script to create the tpcds web_page model in the lookup schema\n*/\nSELECT\n    WP_WEB_PAGE_SK,\n    WP_WEB_PAGE_ID,\n    WP_REC_START_DATE,\n    WP_REC_END_DATE,\n    WP_CREATION_DATE_SK,\n    WP_ACCESS_DATE_SK,\n    WP_AUTOGEN_FLAG,\n    WP_CUSTOMER_SK,\n    WP_URL,\n    WP_TYPE,\n    WP_CHAR_COUNT,\n    WP_LINK_COUNT,\n    WP_IMAGE_COUNT,\n    WP_MAX_AD_COUNT,\n    md5(cast(coalesce(cast(WP_WEB_PAGE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WP_WEB_PAGE_ID as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WP_REC_START_DATE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WP_REC_END_DATE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WP_CREATION_DATE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WP_ACCESS_DATE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WP_AUTOGEN_FLAG as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WP_CUSTOMER_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WP_URL as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WP_TYPE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WP_CHAR_COUNT as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WP_LINK_COUNT as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WP_IMAGE_COUNT as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WP_MAX_AD_COUNT as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS HASH_KEY,\n    convert_timezone('UTC', current_timestamp()) AS etl_created_ts\n    , convert_timezone('UTC', current_timestamp()) AS etl_updated_ts\n    , CAST(CURRENT_USER AS VARCHAR) AS updated_by\n    , NVL('', NULL) AS update_notes\nFROM QBIZ_DATA.TPCDS.WEB_PAGE", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "b4af8874a5a466e22b802c8214b355493d984ed9d7ef6f57151a22041b78dc4f"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hash_key"], "time_spine": null}, "test.poc_dbt_snowflake.not_null_tpcds_customer_hash_key.62794df7f9": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_customer_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_customer_hash_key.sql", "original_file_path": "models/bronze/tpcds_customer.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_customer_hash_key.62794df7f9", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_customer_hash_key"], "alias": "not_null_tpcds_customer_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.4837127, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_customer"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.tpcds_customer", "attached_node": "model.poc_dbt_snowflake.tpcds_customer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('tpcds_customer')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.unique_tpcds_customer_hash_key.6252498dbf": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "unique_tpcds_customer_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "unique_tpcds_customer_hash_key.sql", "original_file_path": "models/bronze/tpcds_customer.yml", "unique_id": "test.poc_dbt_snowflake.unique_tpcds_customer_hash_key.6252498dbf", "fqn": ["poc_dbt_snowflake", "bronze", "unique_tpcds_customer_hash_key"], "alias": "unique_tpcds_customer_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.4847162, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.poc_dbt_snowflake.tpcds_customer"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.tpcds_customer", "attached_node": "model.poc_dbt_snowflake.tpcds_customer", "test_metadata": {"name": "unique", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('tpcds_customer')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_customer_etl_created_ts.07575a37fc": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_customer_etl_created_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_customer_etl_created_ts.sql", "original_file_path": "models/bronze/tpcds_customer.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_customer_etl_created_ts.07575a37fc", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_customer_etl_created_ts"], "alias": "not_null_tpcds_customer_etl_created_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.4856324, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_customer"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_created_ts", "file_key_name": "models.tpcds_customer", "attached_node": "model.poc_dbt_snowflake.tpcds_customer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_created_ts", "model": "{{ get_where_subquery(ref('tpcds_customer')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_customer_etl_updated_ts.dc1473ff35": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_customer_etl_updated_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_customer_etl_updated_ts.sql", "original_file_path": "models/bronze/tpcds_customer.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_customer_etl_updated_ts.dc1473ff35", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_customer_etl_updated_ts"], "alias": "not_null_tpcds_customer_etl_updated_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.4865234, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_customer"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_updated_ts", "file_key_name": "models.tpcds_customer", "attached_node": "model.poc_dbt_snowflake.tpcds_customer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_updated_ts", "model": "{{ get_where_subquery(ref('tpcds_customer')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_customer_updated_by.4d0ed9329f": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_customer_updated_by", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_customer_updated_by.sql", "original_file_path": "models/bronze/tpcds_customer.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_customer_updated_by.4d0ed9329f", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_customer_updated_by"], "alias": "not_null_tpcds_customer_updated_by", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.4874403, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_customer"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_by", "file_key_name": "models.tpcds_customer", "attached_node": "model.poc_dbt_snowflake.tpcds_customer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_by", "model": "{{ get_where_subquery(ref('tpcds_customer')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_web_page_hash_key.45dcf293de": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_web_page_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_web_page_hash_key.sql", "original_file_path": "models/bronze/tpcds_web_page.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_web_page_hash_key.45dcf293de", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_web_page_hash_key"], "alias": "not_null_tpcds_web_page_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.494375, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_web_page", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_web_page"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.tpcds_web_page", "attached_node": "model.poc_dbt_snowflake.tpcds_web_page", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('tpcds_web_page')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.unique_tpcds_web_page_hash_key.f6933a969c": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "unique_tpcds_web_page_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "unique_tpcds_web_page_hash_key.sql", "original_file_path": "models/bronze/tpcds_web_page.yml", "unique_id": "test.poc_dbt_snowflake.unique_tpcds_web_page_hash_key.f6933a969c", "fqn": ["poc_dbt_snowflake", "bronze", "unique_tpcds_web_page_hash_key"], "alias": "unique_tpcds_web_page_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.4952912, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_web_page", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.poc_dbt_snowflake.tpcds_web_page"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.tpcds_web_page", "attached_node": "model.poc_dbt_snowflake.tpcds_web_page", "test_metadata": {"name": "unique", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('tpcds_web_page')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_web_page_etl_created_ts.2523912fc2": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_web_page_etl_created_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_web_page_etl_created_ts.sql", "original_file_path": "models/bronze/tpcds_web_page.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_web_page_etl_created_ts.2523912fc2", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_web_page_etl_created_ts"], "alias": "not_null_tpcds_web_page_etl_created_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.4961927, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_web_page", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_web_page"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_created_ts", "file_key_name": "models.tpcds_web_page", "attached_node": "model.poc_dbt_snowflake.tpcds_web_page", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_created_ts", "model": "{{ get_where_subquery(ref('tpcds_web_page')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_web_page_etl_updated_ts.937190a26b": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_web_page_etl_updated_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_web_page_etl_updated_ts.sql", "original_file_path": "models/bronze/tpcds_web_page.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_web_page_etl_updated_ts.937190a26b", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_web_page_etl_updated_ts"], "alias": "not_null_tpcds_web_page_etl_updated_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.4972007, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_web_page", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_web_page"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_updated_ts", "file_key_name": "models.tpcds_web_page", "attached_node": "model.poc_dbt_snowflake.tpcds_web_page", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_updated_ts", "model": "{{ get_where_subquery(ref('tpcds_web_page')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_web_page_updated_by.5a331dbe7d": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_web_page_updated_by", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_web_page_updated_by.sql", "original_file_path": "models/bronze/tpcds_web_page.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_web_page_updated_by.5a331dbe7d", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_web_page_updated_by"], "alias": "not_null_tpcds_web_page_updated_by", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.4980736, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_web_page", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_web_page"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_by", "file_key_name": "models.tpcds_web_page", "attached_node": "model.poc_dbt_snowflake.tpcds_web_page", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_by", "model": "{{ get_where_subquery(ref('tpcds_web_page')) }}"}, "namespace": null}}, "model.poc_dbt_snowflake.tpcds_store_sales": {"database": "SANDBOX_DATA_PIPELINE", "schema": "bronze", "name": "tpcds_store_sales", "resource_type": "model", "package_name": "poc_dbt_snowflake", "path": "bronze/tpcds_store_sales.sql", "original_file_path": "models/bronze/tpcds_store_sales.sql", "unique_id": "model.poc_dbt_snowflake.tpcds_store_sales", "fqn": ["poc_dbt_snowflake", "bronze", "tpcds_store_sales"], "alias": "tpcds_store_sales", "checksum": {"name": "sha256", "checksum": "16a42584033768c40a500bc1cf8b445bc0d0b6e6c34bea1c3fcc9bdd6cf8329c"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["bronze"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "hash_key", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#CD7F32"}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "merge_update_columns": ["etl_updated_ts", "updated_by", "update_notes"]}, "tags": ["bronze"], "description": "TPCDS store sales fact table containing transactional sales data from physical stores.", "columns": {"SS_SOLD_DATE_SK": {"name": "SS_SOLD_DATE_SK", "description": "Surrogate key for the date the sale occurred.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_SOLD_TIME_SK": {"name": "SS_SOLD_TIME_SK", "description": "Surrogate key for the time the sale occurred.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_ITEM_SK": {"name": "SS_ITEM_SK", "description": "Surrogate key for the item sold.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_CUSTOMER_SK": {"name": "SS_CUSTOMER_SK", "description": "Surrogate key for the purchasing customer.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_CDEMO_SK": {"name": "SS_CDEMO_SK", "description": "Surrogate key for customer demographics.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_HDEMO_SK": {"name": "SS_HDEMO_SK", "description": "Surrogate key for household demographics.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_ADDR_SK": {"name": "SS_ADDR_SK", "description": "Surrogate key for customer address.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_STORE_SK": {"name": "SS_STORE_SK", "description": "Surrogate key for the store location.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_PROMO_SK": {"name": "SS_PROMO_SK", "description": "Surrogate key for applied promotion.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_TICKET_NUMBER": {"name": "SS_TICKET_NUMBER", "description": "Unique identifier for the sales transaction.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_QUANTITY": {"name": "SS_QUANTITY", "description": "Quantity of items sold.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_WHOLESALE_COST": {"name": "SS_WHOLESALE_COST", "description": "Wholesale cost per unit.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_LIST_PRICE": {"name": "SS_LIST_PRICE", "description": "List price per unit.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_SALES_PRICE": {"name": "SS_SALES_PRICE", "description": "Actual sales price per unit.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_EXT_DISCOUNT_AMT": {"name": "SS_EXT_DISCOUNT_AMT", "description": "Extended discount amount.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_EXT_SALES_PRICE": {"name": "SS_EXT_SALES_PRICE", "description": "Extended sales price.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_EXT_WHOLESALE_COST": {"name": "SS_EXT_WHOLESALE_COST", "description": "Extended wholesale cost.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_EXT_LIST_PRICE": {"name": "SS_EXT_LIST_PRICE", "description": "Extended list price.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_EXT_TAX": {"name": "SS_EXT_TAX", "description": "Extended tax amount.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_COUPON_AMT": {"name": "SS_COUPON_AMT", "description": "Coupon discount amount.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_NET_PAID": {"name": "SS_NET_PAID", "description": "Net amount paid.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_NET_PAID_INC_TAX": {"name": "SS_NET_PAID_INC_TAX", "description": "Net amount paid including tax.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "SS_NET_PROFIT": {"name": "SS_NET_PROFIT", "description": "Net profit from the sale.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hash_key": {"name": "hash_key", "description": "Unique identifier of Bronze Layer entry", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "etl_created_ts": {"name": "etl_created_ts", "description": "UTC timestamp when the Bronze Layer record was created", "meta": {}, "data_type": "timestamp_tz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "etl_updated_ts": {"name": "etl_updated_ts", "description": "UTC timestamp when the Bronze Layer record was last updated", "meta": {}, "data_type": "timestamp_tz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_by": {"name": "updated_by", "description": "User who last updated the record", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_notes": {"name": "update_notes", "description": "Additional notes on the update", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#CD7F32"}, "patch_path": "poc_dbt_snowflake://models/bronze/tpcds_store_sales.yml", "build_path": "target/run/poc_dbt_snowflake/models/bronze/tpcds_store_sales.sql", "unrendered_config": {"schema": "bronze", "materialized": "incremental", "on_schema_change": "append_new_columns", "incremental_strategy": "merge", "unique_key": "hash_key", "merge_update_columns": ["etl_updated_ts", "updated_by", "update_notes"], "contract": {"enforced": true, "alias_types": true}, "tags": ["bronze"], "docs": {"node_color": "#CD7F32"}}, "created_at": 1747437532.0167434, "relation_name": "SANDBOX_DATA_PIPELINE.bronze.tpcds_store_sales", "raw_code": "/*\nSQL script to create the tpcds store_sales model in the lookup schema\n*/\nSELECT\n    SS_SOLD_DATE_SK,\n    SS_SOLD_TIME_SK,\n    SS_ITEM_SK,\n    SS_CUSTOMER_SK,\n    SS_CDEMO_SK,\n    SS_HDEMO_SK,\n    SS_ADDR_SK,\n    SS_STORE_SK,\n    SS_PROMO_SK,\n    SS_TICKET_NUMBER,\n    SS_QUANTITY,\n    SS_WHOLESALE_COST,\n    SS_LIST_PRICE,\n    SS_SALES_PRICE,\n    SS_EXT_DISCOUNT_AMT,\n    SS_EXT_SALES_PRICE,\n    SS_EXT_WHOLESALE_COST,\n    SS_EXT_LIST_PRICE,\n    SS_EXT_TAX,\n    SS_COUPON_AMT,\n    SS_NET_PAID,\n    SS_NET_PAID_INC_TAX,\n    SS_NET_PROFIT,\n    {{\n        dbt_utils.generate_surrogate_key(\n            [\n                'SS_SOLD_DATE_SK',\n                'SS_SOLD_TIME_SK',\n                'SS_ITEM_SK',\n                'SS_CUSTOMER_SK',\n                'SS_CDEMO_SK',\n                'SS_HDEMO_SK',\n                'SS_ADDR_SK',\n                'SS_STORE_SK',\n                'SS_PROMO_SK',\n                'SS_TICKET_NUMBER',\n                'SS_QUANTITY',\n                'SS_WHOLESALE_COST',\n                'SS_LIST_PRICE',\n                'SS_SALES_PRICE',\n                'SS_EXT_DISCOUNT_AMT',\n                'SS_EXT_SALES_PRICE',\n                'SS_EXT_WHOLESALE_COST',\n                'SS_EXT_LIST_PRICE',\n                'SS_EXT_TAX',\n                'SS_COUPON_AMT',\n                'SS_NET_PAID',\n                'SS_NET_PAID_INC_TAX',\n                'SS_NET_PROFIT'\n            ]\n        )\n    }} AS HASH_KEY,\n    {{ audit_columns() }}\nFROM {{ source('TPCDS', 'STORE_SALES') }}", "language": "sql", "refs": [], "sources": [["TPCDS", "STORE_SALES"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.poc_dbt_snowflake.audit_columns"], "nodes": ["source.poc_dbt_snowflake.TPCDS.STORE_SALES"]}, "compiled_path": "target/compiled/poc_dbt_snowflake/models/bronze/tpcds_store_sales.sql", "compiled": true, "compiled_code": "/*\nSQL script to create the tpcds store_sales model in the lookup schema\n*/\nSELECT\n    SS_SOLD_DATE_SK,\n    SS_SOLD_TIME_SK,\n    SS_ITEM_SK,\n    SS_CUSTOMER_SK,\n    SS_CDEMO_SK,\n    SS_HDEMO_SK,\n    SS_ADDR_SK,\n    SS_STORE_SK,\n    SS_PROMO_SK,\n    SS_TICKET_NUMBER,\n    SS_QUANTITY,\n    SS_WHOLESALE_COST,\n    SS_LIST_PRICE,\n    SS_SALES_PRICE,\n    SS_EXT_DISCOUNT_AMT,\n    SS_EXT_SALES_PRICE,\n    SS_EXT_WHOLESALE_COST,\n    SS_EXT_LIST_PRICE,\n    SS_EXT_TAX,\n    SS_COUPON_AMT,\n    SS_NET_PAID,\n    SS_NET_PAID_INC_TAX,\n    SS_NET_PROFIT,\n    md5(cast(coalesce(cast(SS_SOLD_DATE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_SOLD_TIME_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_ITEM_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_CUSTOMER_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_CDEMO_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_HDEMO_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_ADDR_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_STORE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_PROMO_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_TICKET_NUMBER as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_QUANTITY as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_WHOLESALE_COST as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_LIST_PRICE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_SALES_PRICE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_EXT_DISCOUNT_AMT as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_EXT_SALES_PRICE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_EXT_WHOLESALE_COST as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_EXT_LIST_PRICE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_EXT_TAX as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_COUPON_AMT as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_NET_PAID as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_NET_PAID_INC_TAX as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(SS_NET_PROFIT as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS HASH_KEY,\n    convert_timezone('UTC', current_timestamp()) AS etl_created_ts\n    , convert_timezone('UTC', current_timestamp()) AS etl_updated_ts\n    , CAST(CURRENT_USER AS VARCHAR) AS updated_by\n    , NVL('', NULL) AS update_notes\nFROM QBIZ_DATA.TPCDS.STORE_SALES", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "45b61fac1a179cbb4be48933c1eed09d865bd4901a8c5afc315db58cc4206d8b"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hash_key"], "time_spine": null}, "model.poc_dbt_snowflake.tpcds_web_sales": {"database": "SANDBOX_DATA_PIPELINE", "schema": "bronze", "name": "tpcds_web_sales", "resource_type": "model", "package_name": "poc_dbt_snowflake", "path": "bronze/tpcds_web_sales.sql", "original_file_path": "models/bronze/tpcds_web_sales.sql", "unique_id": "model.poc_dbt_snowflake.tpcds_web_sales", "fqn": ["poc_dbt_snowflake", "bronze", "tpcds_web_sales"], "alias": "tpcds_web_sales", "checksum": {"name": "sha256", "checksum": "31c0c3ab660485deb390b3d16b294dec23f196b6f88d80c5d075d4cec2739e47"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["bronze"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "hash_key", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#CD7F32"}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "merge_update_columns": ["etl_updated_ts", "updated_by", "update_notes"]}, "tags": ["bronze"], "description": "TPCDS web_sales fact table containing transactional sales data from web channels.", "columns": {"WS_SOLD_DATE_SK": {"name": "WS_SOLD_DATE_SK", "description": "Surrogate key for the date the sale occurred.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_SOLD_TIME_SK": {"name": "WS_SOLD_TIME_SK", "description": "Surrogate key for the time the sale occurred.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_SHIP_DATE_SK": {"name": "WS_SHIP_DATE_SK", "description": "Surrogate key for the date the item was shipped.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_ITEM_SK": {"name": "WS_ITEM_SK", "description": "Surrogate key for the item sold.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_BILL_CUSTOMER_SK": {"name": "WS_BILL_CUSTOMER_SK", "description": "Surrogate key for the billing customer.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_BILL_CDEMO_SK": {"name": "WS_BILL_CDEMO_SK", "description": "Surrogate key for the billing customer demographics.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_BILL_HDEMO_SK": {"name": "WS_BILL_HDEMO_SK", "description": "Surrogate key for the billing household demographics.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_BILL_ADDR_SK": {"name": "WS_BILL_ADDR_SK", "description": "Surrogate key for the billing address.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_SHIP_CUSTOMER_SK": {"name": "WS_SHIP_CUSTOMER_SK", "description": "Surrogate key for the shipping customer.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_SHIP_CDEMO_SK": {"name": "WS_SHIP_CDEMO_SK", "description": "Surrogate key for the shipping customer demographics.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_SHIP_HDEMO_SK": {"name": "WS_SHIP_HDEMO_SK", "description": "Surrogate key for the shipping household demographics.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_SHIP_ADDR_SK": {"name": "WS_SHIP_ADDR_SK", "description": "Surrogate key for the shipping address.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_WEB_PAGE_SK": {"name": "WS_WEB_PAGE_SK", "description": "Surrogate key for the web page.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_WEB_SITE_SK": {"name": "WS_WEB_SITE_SK", "description": "Surrogate key for the web site.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_SHIP_MODE_SK": {"name": "WS_SHIP_MODE_SK", "description": "Surrogate key for the shipping mode.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_WAREHOUSE_SK": {"name": "WS_WAREHOUSE_SK", "description": "Surrogate key for the warehouse.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_PROMO_SK": {"name": "WS_PROMO_SK", "description": "Surrogate key for the promotion.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_ORDER_NUMBER": {"name": "WS_ORDER_NUMBER", "description": "Order number for the web sales transaction.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_QUANTITY": {"name": "WS_QUANTITY", "description": "Quantity of items sold.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_WHOLESALE_COST": {"name": "WS_WHOLESALE_COST", "description": "Wholesale cost per unit.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_LIST_PRICE": {"name": "WS_LIST_PRICE", "description": "List price per unit.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_SALES_PRICE": {"name": "WS_SALES_PRICE", "description": "Actual sales price per unit.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_EXT_DISCOUNT_AMT": {"name": "WS_EXT_DISCOUNT_AMT", "description": "Extended discount amount.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_EXT_SALES_PRICE": {"name": "WS_EXT_SALES_PRICE", "description": "Extended sales price.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_EXT_WHOLESALE_COST": {"name": "WS_EXT_WHOLESALE_COST", "description": "Extended wholesale cost.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_EXT_LIST_PRICE": {"name": "WS_EXT_LIST_PRICE", "description": "Extended list price.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_EXT_TAX": {"name": "WS_EXT_TAX", "description": "Extended tax amount.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_COUPON_AMT": {"name": "WS_COUPON_AMT", "description": "Coupon discount amount.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_EXT_SHIP_COST": {"name": "WS_EXT_SHIP_COST", "description": "Extended shipping cost.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_NET_PAID": {"name": "WS_NET_PAID", "description": "Net amount paid.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_NET_PAID_INC_TAX": {"name": "WS_NET_PAID_INC_TAX", "description": "Net amount paid including tax.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_NET_PAID_INC_SHIP": {"name": "WS_NET_PAID_INC_SHIP", "description": "Net amount paid including shipping.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_NET_PAID_INC_SHIP_TAX": {"name": "WS_NET_PAID_INC_SHIP_TAX", "description": "Net amount paid including shipping and tax.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "WS_NET_PROFIT": {"name": "WS_NET_PROFIT", "description": "Net profit from the sale.", "meta": {}, "data_type": "numeric(7,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hash_key": {"name": "hash_key", "description": "Unique identifier of Bronze Layer entry", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "etl_created_ts": {"name": "etl_created_ts", "description": "UTC timestamp when the Bronze Layer record was created", "meta": {}, "data_type": "timestamp_tz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "etl_updated_ts": {"name": "etl_updated_ts", "description": "UTC timestamp when the Bronze Layer record was last updated", "meta": {}, "data_type": "timestamp_tz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_by": {"name": "updated_by", "description": "User who last updated the record", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_notes": {"name": "update_notes", "description": "Additional notes on the update", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#CD7F32"}, "patch_path": "poc_dbt_snowflake://models/bronze/tpcds_web_sales.yml", "build_path": "target/run/poc_dbt_snowflake/models/bronze/tpcds_web_sales.sql", "unrendered_config": {"schema": "bronze", "materialized": "incremental", "on_schema_change": "append_new_columns", "incremental_strategy": "merge", "unique_key": "hash_key", "merge_update_columns": ["etl_updated_ts", "updated_by", "update_notes"], "contract": {"enforced": true, "alias_types": true}, "tags": ["bronze"], "docs": {"node_color": "#CD7F32"}}, "created_at": 1747437532.102049, "relation_name": "SANDBOX_DATA_PIPELINE.bronze.tpcds_web_sales", "raw_code": "/*\nSQL script to create the tpcds web_sales model in the bronze schema\n*/\nSELECT\n    WS_SOLD_DATE_SK,\n    WS_SOLD_TIME_SK,\n    WS_SHIP_DATE_SK,\n    WS_ITEM_SK,\n    WS_BILL_CUSTOMER_SK,\n    WS_BILL_CDEMO_SK,\n    WS_BILL_HDEMO_SK,\n    WS_BILL_ADDR_SK,\n    WS_SHIP_CUSTOMER_SK,\n    WS_SHIP_CDEMO_SK,\n    WS_SHIP_HDEMO_SK,\n    WS_SHIP_ADDR_SK,\n    WS_WEB_PAGE_SK,\n    WS_WEB_SITE_SK,\n    WS_SHIP_MODE_SK,\n    WS_WAREHOUSE_SK,\n    WS_PROMO_SK,\n    WS_ORDER_NUMBER,\n    WS_QUANTITY,\n    WS_WHOLESALE_COST,\n    WS_LIST_PRICE,\n    WS_SALES_PRICE,\n    WS_EXT_DISCOUNT_AMT,\n    WS_EXT_SALES_PRICE,\n    WS_EXT_WHOLESALE_COST,\n    WS_EXT_LIST_PRICE,\n    WS_EXT_TAX,\n    WS_COUPON_AMT,\n    WS_EXT_SHIP_COST,\n    WS_NET_PAID,\n    WS_NET_PAID_INC_TAX,\n    WS_NET_PAID_INC_SHIP,\n    WS_NET_PAID_INC_SHIP_TAX,\n    WS_NET_PROFIT,\n    {{\n        dbt_utils.generate_surrogate_key(\n            [\n                'WS_SOLD_DATE_SK',\n                'WS_SOLD_TIME_SK',\n                'WS_SHIP_DATE_SK',\n                'WS_ITEM_SK',\n                'WS_BILL_CUSTOMER_SK',\n                'WS_BILL_CDEMO_SK',\n                'WS_BILL_HDEMO_SK',\n                'WS_BILL_ADDR_SK',\n                'WS_SHIP_CUSTOMER_SK',\n                'WS_SHIP_CDEMO_SK',\n                'WS_SHIP_HDEMO_SK',\n                'WS_SHIP_ADDR_SK',\n                'WS_WEB_PAGE_SK',\n                'WS_WEB_SITE_SK',\n                'WS_SHIP_MODE_SK',\n                'WS_WAREHOUSE_SK',\n                'WS_PROMO_SK',\n                'WS_ORDER_NUMBER',\n                'WS_QUANTITY',\n                'WS_WHOLESALE_COST',\n                'WS_LIST_PRICE',\n                'WS_SALES_PRICE',\n                'WS_EXT_DISCOUNT_AMT',\n                'WS_EXT_SALES_PRICE',\n                'WS_EXT_WHOLESALE_COST',\n                'WS_EXT_LIST_PRICE',\n                'WS_EXT_TAX',\n                'WS_COUPON_AMT',\n                'WS_EXT_SHIP_COST',\n                'WS_NET_PAID',\n                'WS_NET_PAID_INC_TAX',\n                'WS_NET_PAID_INC_SHIP',\n                'WS_NET_PAID_INC_SHIP_TAX',\n                'WS_NET_PROFIT'\n            ]\n        )\n    }} AS HASH_KEY,\n    {{ audit_columns() }}\nFROM {{ source('TPCDS', 'WEB_SALES') }}", "language": "sql", "refs": [], "sources": [["TPCDS", "WEB_SALES"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.poc_dbt_snowflake.audit_columns"], "nodes": ["source.poc_dbt_snowflake.TPCDS.WEB_SALES"]}, "compiled_path": "target/compiled/poc_dbt_snowflake/models/bronze/tpcds_web_sales.sql", "compiled": true, "compiled_code": "/*\nSQL script to create the tpcds web_sales model in the bronze schema\n*/\nSELECT\n    WS_SOLD_DATE_SK,\n    WS_SOLD_TIME_SK,\n    WS_SHIP_DATE_SK,\n    WS_ITEM_SK,\n    WS_BILL_CUSTOMER_SK,\n    WS_BILL_CDEMO_SK,\n    WS_BILL_HDEMO_SK,\n    WS_BILL_ADDR_SK,\n    WS_SHIP_CUSTOMER_SK,\n    WS_SHIP_CDEMO_SK,\n    WS_SHIP_HDEMO_SK,\n    WS_SHIP_ADDR_SK,\n    WS_WEB_PAGE_SK,\n    WS_WEB_SITE_SK,\n    WS_SHIP_MODE_SK,\n    WS_WAREHOUSE_SK,\n    WS_PROMO_SK,\n    WS_ORDER_NUMBER,\n    WS_QUANTITY,\n    WS_WHOLESALE_COST,\n    WS_LIST_PRICE,\n    WS_SALES_PRICE,\n    WS_EXT_DISCOUNT_AMT,\n    WS_EXT_SALES_PRICE,\n    WS_EXT_WHOLESALE_COST,\n    WS_EXT_LIST_PRICE,\n    WS_EXT_TAX,\n    WS_COUPON_AMT,\n    WS_EXT_SHIP_COST,\n    WS_NET_PAID,\n    WS_NET_PAID_INC_TAX,\n    WS_NET_PAID_INC_SHIP,\n    WS_NET_PAID_INC_SHIP_TAX,\n    WS_NET_PROFIT,\n    md5(cast(coalesce(cast(WS_SOLD_DATE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_SOLD_TIME_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_SHIP_DATE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_ITEM_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_BILL_CUSTOMER_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_BILL_CDEMO_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_BILL_HDEMO_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_BILL_ADDR_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_SHIP_CUSTOMER_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_SHIP_CDEMO_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_SHIP_HDEMO_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_SHIP_ADDR_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_WEB_PAGE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_WEB_SITE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_SHIP_MODE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_WAREHOUSE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_PROMO_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_ORDER_NUMBER as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_QUANTITY as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_WHOLESALE_COST as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_LIST_PRICE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_SALES_PRICE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_EXT_DISCOUNT_AMT as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_EXT_SALES_PRICE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_EXT_WHOLESALE_COST as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_EXT_LIST_PRICE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_EXT_TAX as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_COUPON_AMT as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_EXT_SHIP_COST as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_NET_PAID as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_NET_PAID_INC_TAX as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_NET_PAID_INC_SHIP as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_NET_PAID_INC_SHIP_TAX as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(WS_NET_PROFIT as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS HASH_KEY,\n    convert_timezone('UTC', current_timestamp()) AS etl_created_ts\n    , convert_timezone('UTC', current_timestamp()) AS etl_updated_ts\n    , CAST(CURRENT_USER AS VARCHAR) AS updated_by\n    , NVL('', NULL) AS update_notes\nFROM QBIZ_DATA.TPCDS.WEB_SALES", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "bfc43c12bc8c0a3cf3482e6359ce79707024abf10f3fc124807f2daf03e81598"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hash_key"], "time_spine": null}, "test.poc_dbt_snowflake.not_null_tpcds_store_sales_hash_key.b01119e3ef": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_store_sales_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_store_sales_hash_key.sql", "original_file_path": "models/bronze/tpcds_store_sales.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_store_sales_hash_key.b01119e3ef", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_store_sales_hash_key"], "alias": "not_null_tpcds_store_sales_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437532.0728717, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_store_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_store_sales"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.tpcds_store_sales", "attached_node": "model.poc_dbt_snowflake.tpcds_store_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('tpcds_store_sales')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.unique_tpcds_store_sales_hash_key.b3d6483a45": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "unique_tpcds_store_sales_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "unique_tpcds_store_sales_hash_key.sql", "original_file_path": "models/bronze/tpcds_store_sales.yml", "unique_id": "test.poc_dbt_snowflake.unique_tpcds_store_sales_hash_key.b3d6483a45", "fqn": ["poc_dbt_snowflake", "bronze", "unique_tpcds_store_sales_hash_key"], "alias": "unique_tpcds_store_sales_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437532.07394, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_store_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.poc_dbt_snowflake.tpcds_store_sales"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.tpcds_store_sales", "attached_node": "model.poc_dbt_snowflake.tpcds_store_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('tpcds_store_sales')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_store_sales_etl_created_ts.783590aaaf": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_store_sales_etl_created_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_store_sales_etl_created_ts.sql", "original_file_path": "models/bronze/tpcds_store_sales.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_store_sales_etl_created_ts.783590aaaf", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_store_sales_etl_created_ts"], "alias": "not_null_tpcds_store_sales_etl_created_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437532.074858, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_store_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_store_sales"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_created_ts", "file_key_name": "models.tpcds_store_sales", "attached_node": "model.poc_dbt_snowflake.tpcds_store_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_created_ts", "model": "{{ get_where_subquery(ref('tpcds_store_sales')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_store_sales_etl_updated_ts.d84b1993ef": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_store_sales_etl_updated_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_store_sales_etl_updated_ts.sql", "original_file_path": "models/bronze/tpcds_store_sales.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_store_sales_etl_updated_ts.d84b1993ef", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_store_sales_etl_updated_ts"], "alias": "not_null_tpcds_store_sales_etl_updated_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437532.075756, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_store_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_store_sales"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_updated_ts", "file_key_name": "models.tpcds_store_sales", "attached_node": "model.poc_dbt_snowflake.tpcds_store_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_updated_ts", "model": "{{ get_where_subquery(ref('tpcds_store_sales')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_store_sales_updated_by.df233d2e2e": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_store_sales_updated_by", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_store_sales_updated_by.sql", "original_file_path": "models/bronze/tpcds_store_sales.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_store_sales_updated_by.df233d2e2e", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_store_sales_updated_by"], "alias": "not_null_tpcds_store_sales_updated_by", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437532.076629, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_store_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_store_sales"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_by", "file_key_name": "models.tpcds_store_sales", "attached_node": "model.poc_dbt_snowflake.tpcds_store_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_by", "model": "{{ get_where_subquery(ref('tpcds_store_sales')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_web_sales_hash_key.95a176d3d6": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_web_sales_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_web_sales_hash_key.sql", "original_file_path": "models/bronze/tpcds_web_sales.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_web_sales_hash_key.95a176d3d6", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_web_sales_hash_key"], "alias": "not_null_tpcds_web_sales_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437532.1026397, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_web_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_web_sales"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.tpcds_web_sales", "attached_node": "model.poc_dbt_snowflake.tpcds_web_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('tpcds_web_sales')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.unique_tpcds_web_sales_hash_key.fa94f38747": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "unique_tpcds_web_sales_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "unique_tpcds_web_sales_hash_key.sql", "original_file_path": "models/bronze/tpcds_web_sales.yml", "unique_id": "test.poc_dbt_snowflake.unique_tpcds_web_sales_hash_key.fa94f38747", "fqn": ["poc_dbt_snowflake", "bronze", "unique_tpcds_web_sales_hash_key"], "alias": "unique_tpcds_web_sales_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437532.1034987, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_web_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.poc_dbt_snowflake.tpcds_web_sales"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.tpcds_web_sales", "attached_node": "model.poc_dbt_snowflake.tpcds_web_sales", "test_metadata": {"name": "unique", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('tpcds_web_sales')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_web_sales_etl_created_ts.6dea1f4848": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_web_sales_etl_created_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_web_sales_etl_created_ts.sql", "original_file_path": "models/bronze/tpcds_web_sales.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_web_sales_etl_created_ts.6dea1f4848", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_web_sales_etl_created_ts"], "alias": "not_null_tpcds_web_sales_etl_created_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437532.1043596, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_web_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_web_sales"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_created_ts", "file_key_name": "models.tpcds_web_sales", "attached_node": "model.poc_dbt_snowflake.tpcds_web_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_created_ts", "model": "{{ get_where_subquery(ref('tpcds_web_sales')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_web_sales_etl_updated_ts.d67c7b0783": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_web_sales_etl_updated_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_web_sales_etl_updated_ts.sql", "original_file_path": "models/bronze/tpcds_web_sales.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_web_sales_etl_updated_ts.d67c7b0783", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_web_sales_etl_updated_ts"], "alias": "not_null_tpcds_web_sales_etl_updated_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437532.1051857, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_web_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_web_sales"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_updated_ts", "file_key_name": "models.tpcds_web_sales", "attached_node": "model.poc_dbt_snowflake.tpcds_web_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_updated_ts", "model": "{{ get_where_subquery(ref('tpcds_web_sales')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_web_sales_updated_by.ab29fbf5f7": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_web_sales_updated_by", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_web_sales_updated_by.sql", "original_file_path": "models/bronze/tpcds_web_sales.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_web_sales_updated_by.ab29fbf5f7", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_web_sales_updated_by"], "alias": "not_null_tpcds_web_sales_updated_by", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437532.1065862, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_web_sales", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_web_sales"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_by", "file_key_name": "models.tpcds_web_sales", "attached_node": "model.poc_dbt_snowflake.tpcds_web_sales", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_by", "model": "{{ get_where_subquery(ref('tpcds_web_sales')) }}"}, "namespace": null}}, "model.poc_dbt_snowflake.tpcds_store": {"database": "SANDBOX_DATA_PIPELINE", "schema": "bronze", "name": "tpcds_store", "resource_type": "model", "package_name": "poc_dbt_snowflake", "path": "bronze/tpcds_store.sql", "original_file_path": "models/bronze/tpcds_store.sql", "unique_id": "model.poc_dbt_snowflake.tpcds_store", "fqn": ["poc_dbt_snowflake", "bronze", "tpcds_store"], "alias": "tpcds_store", "checksum": {"name": "sha256", "checksum": "2ec80cfcf142464f658ed72d83b5fef3b6c65f2d0415a29b4497c96673b679b3"}, "config": {"enabled": true, "alias": null, "schema": "bronze", "database": null, "tags": ["bronze"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "hash_key", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#CD7F32"}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "merge_update_columns": ["etl_updated_ts", "updated_by", "update_notes"]}, "tags": ["bronze"], "description": "TPCDS store table containing retail store location and operational details.", "columns": {"S_STORE_SK": {"name": "S_STORE_SK", "description": "Surrogate key for the store.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_STORE_ID": {"name": "S_STORE_ID", "description": "Business key for the store.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_REC_START_DATE": {"name": "S_REC_START_DATE", "description": "Record start date.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_REC_END_DATE": {"name": "S_REC_END_DATE", "description": "Record end date.", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_CLOSED_DATE_SK": {"name": "S_CLOSED_DATE_SK", "description": "Surrogate key for store closing date.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_STORE_NAME": {"name": "S_STORE_NAME", "description": "Store name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_NUMBER_EMPLOYEES": {"name": "S_NUMBER_EMPLOYEES", "description": "Number of employees.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_FLOOR_SPACE": {"name": "S_FLOOR_SPACE", "description": "Floor space in square feet.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_HOURS": {"name": "S_HOURS", "description": "Store operating hours.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_MANAGER": {"name": "S_MANAGER", "description": "Store manager name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_MARKET_ID": {"name": "S_MARKET_ID", "description": "Market identifier.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_GEOGRAPHY_CLASS": {"name": "S_GEOGRAPHY_CLASS", "description": "Geographic classification.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_MARKET_DESC": {"name": "S_MARKET_DESC", "description": "Market description.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_MARKET_MANAGER": {"name": "S_MARKET_MANAGER", "description": "Market manager name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_DIVISION_ID": {"name": "S_DIVISION_ID", "description": "Division identifier.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_DIVISION_NAME": {"name": "S_DIVISION_NAME", "description": "Division name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_COMPANY_ID": {"name": "S_COMPANY_ID", "description": "Company identifier.", "meta": {}, "data_type": "numeric(38,0)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_COMPANY_NAME": {"name": "S_COMPANY_NAME", "description": "Company name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_STREET_NUMBER": {"name": "S_STREET_NUMBER", "description": "Street number component of address.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_STREET_NAME": {"name": "S_STREET_NAME", "description": "Street name component of address.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_STREET_TYPE": {"name": "S_STREET_TYPE", "description": "Street type (Ave, St, etc).", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_SUITE_NUMBER": {"name": "S_SUITE_NUMBER", "description": "Suite/apt number.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_CITY": {"name": "S_CITY", "description": "City name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_COUNTY": {"name": "S_COUNTY", "description": "County name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_STATE": {"name": "S_STATE", "description": "State abbreviation.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_ZIP": {"name": "S_ZIP", "description": "Zip code.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_COUNTRY": {"name": "S_COUNTRY", "description": "Country name.", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_GMT_OFFSET": {"name": "S_GMT_OFFSET", "description": "GMT offset in hours.", "meta": {}, "data_type": "numeric(5,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "S_TAX_PRECENTAGE": {"name": "S_TAX_PRECENTAGE", "description": "Sales tax percentage.", "meta": {}, "data_type": "numeric(5,2)", "constraints": [], "quote": null, "tags": [], "granularity": null}, "hash_key": {"name": "hash_key", "description": "Unique identifier of Bronze Layer entry", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "etl_created_ts": {"name": "etl_created_ts", "description": "UTC timestamp when the Bronze Layer record was created", "meta": {}, "data_type": "timestamp_tz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "etl_updated_ts": {"name": "etl_updated_ts", "description": "UTC timestamp when the Bronze Layer record was last updated", "meta": {}, "data_type": "timestamp_tz", "constraints": [], "quote": null, "tags": [], "granularity": null}, "updated_by": {"name": "updated_by", "description": "User who last updated the record", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}, "update_notes": {"name": "update_notes", "description": "Additional notes on the update", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": "#CD7F32"}, "patch_path": "poc_dbt_snowflake://models/bronze/tpcds_store.yml", "build_path": "target/run/poc_dbt_snowflake/models/bronze/tpcds_store.sql", "unrendered_config": {"schema": "bronze", "materialized": "incremental", "on_schema_change": "append_new_columns", "incremental_strategy": "merge", "unique_key": "hash_key", "merge_update_columns": ["etl_updated_ts", "updated_by", "update_notes"], "contract": {"enforced": true, "alias_types": true}, "tags": ["bronze"], "docs": {"node_color": "#CD7F32"}}, "created_at": 1747437772.5903516, "relation_name": "SANDBOX_DATA_PIPELINE.bronze.tpcds_store", "raw_code": "/*\nSQL script to create the tpcds store model in the Bronze Layer\n*/\nSELECT\n    S_STORE_SK,\n    S_STORE_ID,\n    S_REC_START_DATE,\n    S_REC_END_DATE,\n    S_CLOSED_DATE_SK,\n    S_STORE_NAME,\n    S_NUMBER_EMPLOYEES,\n    S_FLOOR_SPACE,\n    S_HOURS,\n    S_MANAGER,\n    S_MARKET_ID,\n    S_GEOGRAPHY_CLASS,\n    S_MARKET_DESC,\n    S_MARKET_MANAGER,\n    S_DIVISION_ID,\n    S_DIVISION_NAME,\n    S_COMPANY_ID,\n    S_COMPANY_NAME,\n    S_STREET_NUMBER,\n    S_STREET_NAME,\n    S_STREET_TYPE,\n    S_SUITE_NUMBER,\n    S_CITY,\n    S_COUNTY,\n    S_STATE,\n    S_ZIP,\n    S_COUNTRY,\n    S_GMT_OFFSET,\n    S_TAX_PRECENTAGE,\n    {{\n        dbt_utils.generate_surrogate_key(\n            [\n                'S_STORE_SK',\n                'S_STORE_ID',\n                'S_REC_START_DATE',\n                'S_REC_END_DATE',\n                'S_CLOSED_DATE_SK',\n                'S_STORE_NAME',\n                'S_NUMBER_EMPLOYEES',\n                'S_FLOOR_SPACE',\n                'S_HOURS',\n                'S_MANAGER',\n                'S_MARKET_ID',\n                'S_GEOGRAPHY_CLASS',\n                'S_MARKET_DESC',\n                'S_MARKET_MANAGER',\n                'S_DIVISION_ID',\n                'S_DIVISION_NAME',\n                'S_COMPANY_ID',\n                'S_COMPANY_NAME',\n                'S_STREET_NUMBER',\n                'S_STREET_NAME',\n                'S_STREET_TYPE',\n                'S_SUITE_NUMBER',\n                'S_CITY',\n                'S_COUNTY',\n                'S_STATE',\n                'S_ZIP',\n                'S_COUNTRY',\n                'S_GMT_OFFSET',\n                'S_TAX_PRECENTAGE'\n            ]\n        )\n    }} AS HASH_KEY,\n    {{ audit_columns() }}\nFROM {{ source('TPCDS', 'STORE') }}", "language": "sql", "refs": [], "sources": [["TPCDS", "STORE"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.poc_dbt_snowflake.audit_columns"], "nodes": ["source.poc_dbt_snowflake.TPCDS.STORE"]}, "compiled_path": "target/compiled/poc_dbt_snowflake/models/bronze/tpcds_store.sql", "compiled": true, "compiled_code": "/*\nSQL script to create the tpcds store model in the Bronze Layer\n*/\nSELECT\n    S_STORE_SK,\n    S_STORE_ID,\n    S_REC_START_DATE,\n    S_REC_END_DATE,\n    S_CLOSED_DATE_SK,\n    S_STORE_NAME,\n    S_NUMBER_EMPLOYEES,\n    S_FLOOR_SPACE,\n    S_HOURS,\n    S_MANAGER,\n    S_MARKET_ID,\n    S_GEOGRAPHY_CLASS,\n    S_MARKET_DESC,\n    S_MARKET_MANAGER,\n    S_DIVISION_ID,\n    S_DIVISION_NAME,\n    S_COMPANY_ID,\n    S_COMPANY_NAME,\n    S_STREET_NUMBER,\n    S_STREET_NAME,\n    S_STREET_TYPE,\n    S_SUITE_NUMBER,\n    S_CITY,\n    S_COUNTY,\n    S_STATE,\n    S_ZIP,\n    S_COUNTRY,\n    S_GMT_OFFSET,\n    S_TAX_PRECENTAGE,\n    md5(cast(coalesce(cast(S_STORE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_STORE_ID as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_REC_START_DATE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_REC_END_DATE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_CLOSED_DATE_SK as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_STORE_NAME as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_NUMBER_EMPLOYEES as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_FLOOR_SPACE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_HOURS as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_MANAGER as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_MARKET_ID as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_GEOGRAPHY_CLASS as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_MARKET_DESC as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_MARKET_MANAGER as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_DIVISION_ID as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_DIVISION_NAME as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_COMPANY_ID as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_COMPANY_NAME as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_STREET_NUMBER as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_STREET_NAME as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_STREET_TYPE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_SUITE_NUMBER as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_CITY as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_COUNTY as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_STATE as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_ZIP as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_COUNTRY as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_GMT_OFFSET as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(S_TAX_PRECENTAGE as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS HASH_KEY,\n    convert_timezone('UTC', current_timestamp()) AS etl_created_ts\n    , convert_timezone('UTC', current_timestamp()) AS etl_updated_ts\n    , CAST(CURRENT_USER AS VARCHAR) AS updated_by\n    , NVL('', NULL) AS update_notes\nFROM QBIZ_DATA.TPCDS.STORE", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "6ec5553c78c0145cc02155c6458fdd6bbc7050db7ed70ad465b6b27d5691ea37"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["hash_key"], "time_spine": null}, "test.poc_dbt_snowflake.not_null_tpcds_date_dim_hash_key.dbe6df66e7": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_date_dim_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_date_dim_hash_key.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_date_dim_hash_key.dbe6df66e7", "fqn": ["poc_dbt_snowflake", "lookup_tables", "not_null_tpcds_date_dim_hash_key"], "alias": "not_null_tpcds_date_dim_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437772.575466, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_date_dim"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.tpcds_date_dim", "attached_node": "model.poc_dbt_snowflake.tpcds_date_dim", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('tpcds_date_dim')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.unique_tpcds_date_dim_hash_key.c575070739": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "unique_tpcds_date_dim_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "unique_tpcds_date_dim_hash_key.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.unique_tpcds_date_dim_hash_key.c575070739", "fqn": ["poc_dbt_snowflake", "lookup_tables", "unique_tpcds_date_dim_hash_key"], "alias": "unique_tpcds_date_dim_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437772.5767372, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.poc_dbt_snowflake.tpcds_date_dim"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.tpcds_date_dim", "attached_node": "model.poc_dbt_snowflake.tpcds_date_dim", "test_metadata": {"name": "unique", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('tpcds_date_dim')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_date_dim_etl_created_ts.fd17fd34cc": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_date_dim_etl_created_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_date_dim_etl_created_ts.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_date_dim_etl_created_ts.fd17fd34cc", "fqn": ["poc_dbt_snowflake", "lookup_tables", "not_null_tpcds_date_dim_etl_created_ts"], "alias": "not_null_tpcds_date_dim_etl_created_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437772.5777326, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_date_dim"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_created_ts", "file_key_name": "models.tpcds_date_dim", "attached_node": "model.poc_dbt_snowflake.tpcds_date_dim", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_created_ts", "model": "{{ get_where_subquery(ref('tpcds_date_dim')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_date_dim_etl_updated_ts.0ebf264178": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_date_dim_etl_updated_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_date_dim_etl_updated_ts.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_date_dim_etl_updated_ts.0ebf264178", "fqn": ["poc_dbt_snowflake", "lookup_tables", "not_null_tpcds_date_dim_etl_updated_ts"], "alias": "not_null_tpcds_date_dim_etl_updated_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437772.5786664, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_date_dim"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_updated_ts", "file_key_name": "models.tpcds_date_dim", "attached_node": "model.poc_dbt_snowflake.tpcds_date_dim", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_updated_ts", "model": "{{ get_where_subquery(ref('tpcds_date_dim')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_date_dim_updated_by.3365e84371": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_date_dim_updated_by", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_date_dim_updated_by.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_date_dim_updated_by.3365e84371", "fqn": ["poc_dbt_snowflake", "lookup_tables", "not_null_tpcds_date_dim_updated_by"], "alias": "not_null_tpcds_date_dim_updated_by", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437772.5796797, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_date_dim"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_by", "file_key_name": "models.tpcds_date_dim", "attached_node": "model.poc_dbt_snowflake.tpcds_date_dim", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_by", "model": "{{ get_where_subquery(ref('tpcds_date_dim')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_store_hash_key.3085c400f3": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_store_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_store_hash_key.sql", "original_file_path": "models/bronze/tpcds_store.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_store_hash_key.3085c400f3", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_store_hash_key"], "alias": "not_null_tpcds_store_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437772.591008, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_store", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_store"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.tpcds_store", "attached_node": "model.poc_dbt_snowflake.tpcds_store", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('tpcds_store')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.unique_tpcds_store_hash_key.1e6cabb7b0": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "unique_tpcds_store_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "unique_tpcds_store_hash_key.sql", "original_file_path": "models/bronze/tpcds_store.yml", "unique_id": "test.poc_dbt_snowflake.unique_tpcds_store_hash_key.1e6cabb7b0", "fqn": ["poc_dbt_snowflake", "bronze", "unique_tpcds_store_hash_key"], "alias": "unique_tpcds_store_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437772.5919416, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_store", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.poc_dbt_snowflake.tpcds_store"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.tpcds_store", "attached_node": "model.poc_dbt_snowflake.tpcds_store", "test_metadata": {"name": "unique", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('tpcds_store')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_store_etl_created_ts.7c3583b2d0": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_store_etl_created_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_store_etl_created_ts.sql", "original_file_path": "models/bronze/tpcds_store.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_store_etl_created_ts.7c3583b2d0", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_store_etl_created_ts"], "alias": "not_null_tpcds_store_etl_created_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437772.5928736, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_store", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_store"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_created_ts", "file_key_name": "models.tpcds_store", "attached_node": "model.poc_dbt_snowflake.tpcds_store", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_created_ts", "model": "{{ get_where_subquery(ref('tpcds_store')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_store_etl_updated_ts.7f35a3674e": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_store_etl_updated_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_store_etl_updated_ts.sql", "original_file_path": "models/bronze/tpcds_store.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_store_etl_updated_ts.7f35a3674e", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_store_etl_updated_ts"], "alias": "not_null_tpcds_store_etl_updated_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437772.593877, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_store", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_store"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_updated_ts", "file_key_name": "models.tpcds_store", "attached_node": "model.poc_dbt_snowflake.tpcds_store", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_updated_ts", "model": "{{ get_where_subquery(ref('tpcds_store')) }}"}, "namespace": null}}, "test.poc_dbt_snowflake.not_null_tpcds_store_updated_by.19cbc124c5": {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_tpcds_store_updated_by", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_tpcds_store_updated_by.sql", "original_file_path": "models/bronze/tpcds_store.yml", "unique_id": "test.poc_dbt_snowflake.not_null_tpcds_store_updated_by.19cbc124c5", "fqn": ["poc_dbt_snowflake", "bronze", "not_null_tpcds_store_updated_by"], "alias": "not_null_tpcds_store_updated_by", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747437772.59481, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "tpcds_store", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.poc_dbt_snowflake.tpcds_store"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_by", "file_key_name": "models.tpcds_store", "attached_node": "model.poc_dbt_snowflake.tpcds_store", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_by", "model": "{{ get_where_subquery(ref('tpcds_store')) }}"}, "namespace": null}}}, "sources": {"source.poc_dbt_snowflake.TPCDS.CUSTOMER": {"database": "QBIZ_DATA", "schema": "TPCDS", "name": "CUSTOMER", "resource_type": "source", "package_name": "poc_dbt_snowflake", "path": "models/sources/src_tpcds.yml", "original_file_path": "models/sources/src_tpcds.yml", "unique_id": "source.poc_dbt_snowflake.TPCDS.CUSTOMER", "fqn": ["poc_dbt_snowflake", "sources", "TPCDS", "CUSTOMER"], "source_name": "TPCDS", "source_description": "This points to the base TPCDS schema in snowflake", "loader": "", "identifier": "CUSTOMER", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "QBIZ_DATA.TPCDS.CUSTOMER", "created_at": 1747433785.9809961, "unrendered_database": "QBIZ_DATA", "unrendered_schema": null}, "source.poc_dbt_snowflake.TPCDS.DATE_DIM": {"database": "QBIZ_DATA", "schema": "TPCDS", "name": "DATE_DIM", "resource_type": "source", "package_name": "poc_dbt_snowflake", "path": "models/sources/src_tpcds.yml", "original_file_path": "models/sources/src_tpcds.yml", "unique_id": "source.poc_dbt_snowflake.TPCDS.DATE_DIM", "fqn": ["poc_dbt_snowflake", "sources", "TPCDS", "DATE_DIM"], "source_name": "TPCDS", "source_description": "This points to the base TPCDS schema in snowflake", "loader": "", "identifier": "DATE_DIM", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "QBIZ_DATA.TPCDS.DATE_DIM", "created_at": 1747433785.981827, "unrendered_database": "QBIZ_DATA", "unrendered_schema": null}, "source.poc_dbt_snowflake.TPCDS.STORE": {"database": "QBIZ_DATA", "schema": "TPCDS", "name": "STORE", "resource_type": "source", "package_name": "poc_dbt_snowflake", "path": "models/sources/src_tpcds.yml", "original_file_path": "models/sources/src_tpcds.yml", "unique_id": "source.poc_dbt_snowflake.TPCDS.STORE", "fqn": ["poc_dbt_snowflake", "sources", "TPCDS", "STORE"], "source_name": "TPCDS", "source_description": "This points to the base TPCDS schema in snowflake", "loader": "", "identifier": "STORE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "QBIZ_DATA.TPCDS.STORE", "created_at": 1747433785.9819431, "unrendered_database": "QBIZ_DATA", "unrendered_schema": null}, "source.poc_dbt_snowflake.TPCDS.STORE_SALES": {"database": "QBIZ_DATA", "schema": "TPCDS", "name": "STORE_SALES", "resource_type": "source", "package_name": "poc_dbt_snowflake", "path": "models/sources/src_tpcds.yml", "original_file_path": "models/sources/src_tpcds.yml", "unique_id": "source.poc_dbt_snowflake.TPCDS.STORE_SALES", "fqn": ["poc_dbt_snowflake", "sources", "TPCDS", "STORE_SALES"], "source_name": "TPCDS", "source_description": "This points to the base TPCDS schema in snowflake", "loader": "", "identifier": "STORE_SALES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "QBIZ_DATA.TPCDS.STORE_SALES", "created_at": 1747433785.982043, "unrendered_database": "QBIZ_DATA", "unrendered_schema": null}, "source.poc_dbt_snowflake.TPCDS.WEB_PAGE": {"database": "QBIZ_DATA", "schema": "TPCDS", "name": "WEB_PAGE", "resource_type": "source", "package_name": "poc_dbt_snowflake", "path": "models/sources/src_tpcds.yml", "original_file_path": "models/sources/src_tpcds.yml", "unique_id": "source.poc_dbt_snowflake.TPCDS.WEB_PAGE", "fqn": ["poc_dbt_snowflake", "sources", "TPCDS", "WEB_PAGE"], "source_name": "TPCDS", "source_description": "This points to the base TPCDS schema in snowflake", "loader": "", "identifier": "WEB_PAGE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "QBIZ_DATA.TPCDS.WEB_PAGE", "created_at": 1747433785.9821377, "unrendered_database": "QBIZ_DATA", "unrendered_schema": null}, "source.poc_dbt_snowflake.TPCDS.WEB_SALES": {"database": "QBIZ_DATA", "schema": "TPCDS", "name": "WEB_SALES", "resource_type": "source", "package_name": "poc_dbt_snowflake", "path": "models/sources/src_tpcds.yml", "original_file_path": "models/sources/src_tpcds.yml", "unique_id": "source.poc_dbt_snowflake.TPCDS.WEB_SALES", "fqn": ["poc_dbt_snowflake", "sources", "TPCDS", "WEB_SALES"], "source_name": "TPCDS", "source_description": "This points to the base TPCDS schema in snowflake", "loader": "", "identifier": "WEB_SALES", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null}, "patch_path": null, "unrendered_config": {}, "relation_name": "QBIZ_DATA.TPCDS.WEB_SALES", "created_at": 1747433785.982228, "unrendered_database": "QBIZ_DATA", "unrendered_schema": null}}, "macros": {"macro.poc_dbt_snowflake.audit_seed": {"name": "audit_seed", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/audit_seed.sql", "original_file_path": "macros/audit_seed.sql", "unique_id": "macro.poc_dbt_snowflake.audit_seed", "macro_sql": "{% macro audit_seed(seed_name) -%}\n\nWITH {{seed_name}}_audit AS (\n     SELECT s.*\n     , {{\n           dbt_utils.generate_surrogate_key(\n            dbt_utils.get_filtered_columns_in_relation(ref(seed_name))\n                  )\n        }} AS hash_key\n     ,  {{ audit_columns() }}\n     FROM {{ ref( seed_name ) }} AS s\n)\nSELECT * from {{seed_name}}_audit\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt_utils.get_filtered_columns_in_relation", "macro.poc_dbt_snowflake.audit_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0059166, "supported_languages": null}, "macro.poc_dbt_snowflake.get_incremental_custom_scd_type2_sql": {"name": "get_incremental_custom_scd_type2_sql", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/custom_scd_type2_strategy.sql", "original_file_path": "macros/custom_scd_type2_strategy.sql", "unique_id": "macro.poc_dbt_snowflake.get_incremental_custom_scd_type2_sql", "macro_sql": "{% macro get_incremental_custom_scd_type2_sql(arg_dict) %}\n\n    {% set target_relation = arg_dict['target_relation'] %}\n    {% set temp_relation = arg_dict['temp_relation'] %}\n    {% set unique_key = arg_dict['unique_key'] %}\n    {% set dest_columns = arg_dict['dest_columns'] %}\n\n    {% set insert_cols_csv = dest_columns | map(attribute=\"name\") | join(', ') %}\n\n    -- Close out old records\n    UPDATE {{ target_relation }} AS t\n    SET \n        valid_to = s.valid_from,\n        is_current = FALSE\n    FROM {{ temp_relation }} AS s\n    WHERE t.{{unique_key}} = s.{{unique_key}}\n      AND t.is_current = TRUE\n      AND t.hash_key != s.hash_key;\n\n    -- Insert new and changed records\n    INSERT INTO {{ target_relation }} ({{ insert_cols_csv }})\n    SELECT {{ insert_cols_csv }}\n    FROM {{ temp_relation }} AS s\n    WHERE NOT EXISTS (\n        SELECT 1\n        FROM {{ target_relation }} AS t\n        WHERE t.{{unique_key}} = s.{{unique_key}}\n          AND t.hash_key = s.hash_key\n          AND t.is_current = TRUE\n    );\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0068784, "supported_languages": null}, "macro.poc_dbt_snowflake.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "unique_id": "macro.poc_dbt_snowflake.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none and target.name != 'prod' -%}\n\n        {{ default_schema }}\n\n    {%- elif target.name != 'prod' -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.007453, "supported_languages": null}, "macro.poc_dbt_snowflake.get_json_keys": {"name": "get_json_keys", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/get_json_keys.sql", "original_file_path": "macros/get_json_keys.sql", "unique_id": "macro.poc_dbt_snowflake.get_json_keys", "macro_sql": "{% macro get_json_keys(attribute_keys_table='user_attribute_keys_audit', json_attribute_name='Jsonb') -%}\n\n    {% set json_keys_query %}\n        SELECT attribute_name FROM {{ ref(attribute_keys_table) }}\n    {% endset %}\n    {% set json_keys_result = run_query(json_keys_query) %}\n    {% if execute %}\n        {% set json_keys = json_keys_result.columns[0].values() %}\n    {% else %}\n        {% set json_keys = ('') %}\n    {% endif -%}\n\n    CASE WHEN attribute_name = '{{ json_attribute_name }}' THEN ARRAY{{ json_keys }}\n         ELSE NULL\n     END\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0081346, "supported_languages": null}, "macro.poc_dbt_snowflake.print_var": {"name": "print_var", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/log_get_var.sql", "original_file_path": "macros/log_get_var.sql", "unique_id": "macro.poc_dbt_snowflake.print_var", "macro_sql": "{% macro print_var(var_name, nested_keys=[]) %}\n    {% set base_var = var(var_name) %}\n\n    {% if nested_keys %}\n        {% for key in nested_keys %}\n            {% set base_var = base_var[key] %}\n        {% endfor %}\n    {% endif %}\n\n    {{ log(base_var, info=True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0086646, "supported_languages": null}, "macro.poc_dbt_snowflake.audit_columns": {"name": "audit_columns", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/bronze/audit_columns.sql", "original_file_path": "macros/bronze/audit_columns.sql", "unique_id": "macro.poc_dbt_snowflake.audit_columns", "macro_sql": "{% macro audit_columns(update_note_string) -%}\n\n    {{ dbt.current_timestamp() }} AS etl_created_ts\n    , {{ dbt.current_timestamp() }} AS etl_updated_ts\n    , CAST(CURRENT_USER AS VARCHAR) AS updated_by\n    , NVL('{{ update_note_string }}', NULL) AS update_notes\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0089226, "supported_languages": null}, "macro.poc_dbt_snowflake.bool_to_string": {"name": "bool_to_string", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/bronze/bool_to_string.sql", "original_file_path": "macros/bronze/bool_to_string.sql", "unique_id": "macro.poc_dbt_snowflake.bool_to_string", "macro_sql": "{% macro bool_to_string(boolean_col) -%}\n\n    CASE WHEN {{ boolean_col }} THEN 'TRUE'\n         ELSE 'FALSE'\n     END\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0091085, "supported_languages": null}, "macro.poc_dbt_snowflake.convert_string_columns_to_ints": {"name": "convert_string_columns_to_ints", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/bronze/convert_string_columns_to_ints.sql", "original_file_path": "macros/bronze/convert_string_columns_to_ints.sql", "unique_id": "macro.poc_dbt_snowflake.convert_string_columns_to_ints", "macro_sql": "{% macro convert_string_columns_to_ints(columns) %}\n\n    {% for col in columns -%}\n        CAST(REGEXP_REPLACE({{ col }}, '\\\\.0', '') AS INTEGER) AS {{ col }}\n        {%- if not loop.last -%}\n            ,\n        {% endif -%}\n    {%- endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Macro that transforms the string columns to integer \u2013 where values end with '.0'", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/bronze/convert_string_columns_to_ints.yml", "arguments": [{"name": "columns", "type": "array", "description": "List of column names to convert"}], "created_at": 1746823683.251086, "supported_languages": null}, "macro.poc_dbt_snowflake.string_to_bool": {"name": "string_to_bool", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/bronze/string_to_bool.sql", "original_file_path": "macros/bronze/string_to_bool.sql", "unique_id": "macro.poc_dbt_snowflake.string_to_bool", "macro_sql": "{% macro string_to_bool(col) %}\n\n    CASE WHEN {{ col }} = 'true' THEN TRUE\n         WHEN {{ col }} = 'false' THEN FALSE\n         ELSE NULL\n     END\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Macro to convert string values ('true', 'false') to booleans.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/bronze/string_to_bool.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of column whose values to convert \u2013 e.g. 'active'"}], "created_at": 1746823683.2517414, "supported_languages": null}, "macro.poc_dbt_snowflake.create_bronze_iterable_list_users": {"name": "create_bronze_iterable_list_users", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/bronze/iterable/create_bronze_iterable_list_users.sql", "original_file_path": "macros/bronze/iterable/create_bronze_iterable_list_users.sql", "unique_id": "macro.poc_dbt_snowflake.create_bronze_iterable_list_users", "macro_sql": "{% macro create_bronze_iterable_list_users(iterable_list_id) %}\nWITH source_data AS (   \n\n    SELECT \n          iterable_list_id\n        , email\n        , source_created_ts\n        , {{ check_test_email('email') }} as is_test\n    FROM {{ ref('iterable_all_lists_copper') }}\n    WHERE TRUE\n        AND iterable_list_id = '{{ iterable_list_id }}' \n        {{ apply_date_filters('etl_updated_ts') }}\n),\nlist_users AS (\n    SELECT \n          s.iterable_list_id\n        , s.email\n        , u.kinship_user_id\n        , s.source_created_ts\n        , s.is_test\n        , {{ audit_columns() }}\n        , {{ dbt_utils.generate_surrogate_key(\n                ['s.iterable_list_id'\n                 , 's.email'\n                 , 'u.kinship_user_id' \n                ]\n             )\n           }} as hash_key\n    FROM source_data s\n    LEFT JOIN {{ ref('cpd_user_profile_user_profile') }} u\n        ON s.email = u.email\n)\n{{\n    dbt_utils.deduplicate(\n        relation='list_users',\n        partition_by='hash_key',\n        order_by='source_created_ts DESC', \n    )\n}}\n{% endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_email", "macro.poc_dbt_snowflake.apply_date_filters", "macro.poc_dbt_snowflake.audit_columns", "macro.dbt_utils.generate_surrogate_key", "macro.dbt_utils.deduplicate"]}, "description": "Macro that creates bronze layer model for emails belonging to an iterable list", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/bronze/iterable/create_bronze_iterable_list_users.yml", "arguments": [{"name": "iterable_list_id", "type": "string", "description": "Iterable list id used to create the table"}], "created_at": 1746823683.2524471, "supported_languages": null}, "macro.poc_dbt_snowflake.list_columns": {"name": "list_columns", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/bronze/iterable/list_columns.sql", "original_file_path": "macros/bronze/iterable/list_columns.sql", "unique_id": "macro.poc_dbt_snowflake.list_columns", "macro_sql": "{% macro list_columns(lob) -%}\n      id::TEXT AS iterable_list_id\n    , \"name\" AS list_name\n    , lower(listtype) AS list_type\n    , \"description\" AS list_description\n    , {{ from_unixtime_ms('createdat') }} AS source_created_ts\n    , '{{ lob }}' AS line_of_business\n    , {{\n        dbt_utils.generate_surrogate_key(\n            [\n            'iterable_list_id'\n            , 'list_type'  \n            , 'list_name'\n            , 'list_description'\n            , 'line_of_business'\n            ]\n        )\n    }} AS hash_key\n    , {{ audit_columns() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.from_unixtime_ms", "macro.dbt_utils.generate_surrogate_key", "macro.poc_dbt_snowflake.audit_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0107868, "supported_languages": null}, "macro.poc_dbt_snowflake.list_size_history_columns": {"name": "list_size_history_columns", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/bronze/iterable/list_size_history_columns.sql", "original_file_path": "macros/bronze/iterable/list_size_history_columns.sql", "unique_id": "macro.poc_dbt_snowflake.list_size_history_columns", "macro_sql": "{% macro list_size_history_columns(lob) -%}\n      id::TEXT AS iterable_list_id\n    , \"size\"::INT AS list_size\n    , '{{ lob }}' AS line_of_business\n    , ingestedat::TIMESTAMP AS transfer_ts\n    , {{ dbt_utils.generate_surrogate_key(\n            [\n                  'iterable_list_id'\n                , 'list_size'  \n                , 'line_of_business'\n                , 'transfer_ts'\n            ]\n        )\n        }} AS hash_key\n    , {{ audit_columns() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.poc_dbt_snowflake.audit_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0111706, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_coupon": {"name": "check_test_coupon", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_coupon.sql", "original_file_path": "macros/check_test_macros/check_test_coupon.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_coupon", "macro_sql": "{% macro check_test_coupon(col) -%}\n\n    {{\n        check_test_lookup(\n            test_col=col,\n            rule_col='test_rule',\n            rule_type_col='rule_type',\n            rule_type='coupon',\n            lookup_source=ref('test_rules')\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_lookup"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0114844, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_email": {"name": "check_test_email", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_email.sql", "original_file_path": "macros/check_test_macros/check_test_email.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_email", "macro_sql": "{% macro check_test_email(col) -%}\n\n    {{\n        check_test_lookup(\n            test_col=col,\n            rule_col='test_rule',\n            rule_type_col='rule_type',\n            rule_type='email',\n            lookup_source=ref('test_rules')\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_lookup"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.01179, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_in_other_table": {"name": "check_test_in_other_table", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_in_other_table.sql", "original_file_path": "macros/check_test_macros/check_test_in_other_table.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_in_other_table", "macro_sql": "{% macro check_test_in_other_table(col, ref_table, ref_col, prefix='') -%}\n\nCASE WHEN {{ col }} ~ '^{{ prefix }}.*' THEN NVL(\n              SUBSTRING({{ col }}, LEN('{{ prefix }}') + 1) IN (\n                  SELECT {{ ref_col }}\n                  FROM {{ ref_table }}\n                  WHERE is_test\n              )\n              , FALSE\n          )\n     ELSE NVL(\n              {{ col }} IN (\n                  SELECT {{ ref_col }}\n                  FROM {{ ref_table }}\n                  WHERE is_test\n              )\n              , FALSE\n          )\n END\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Macro to check if some value is registered in another table as test", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_in_other_table.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of the column with the value to check against another table's test values \u2013 e.g. 'external_user_id'"}, {"name": "ref_table", "type": "reference", "description": "The table which has the marked test values \u2013 e.g. ref('cpd_user_profile_user_profile')"}, {"name": "ref_col", "type": "string", "description": "Name of the column in the comparison table that matches the values of the current table \u2013 e.g. 'kinship_user_id'"}, {"name": "substring", "type": "string", "description": "Any substring from the col variable to remove before the comparison \u2013 e.g. 'sub_'. Defaults to an empty string"}], "created_at": 1746823683.253785, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_lookup": {"name": "check_test_lookup", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_lookup.sql", "original_file_path": "macros/check_test_macros/check_test_lookup.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_lookup", "macro_sql": "{% macro check_test_lookup(test_col, rule_col, rule_type_col, rule_type, lookup_source) %}\n\n    {%- set patterns = dbt_utils.get_column_values(\n        table=lookup_source,\n        column=rule_col,\n        where=rule_type_col + \" = '\" + rule_type + \"'\"\n    ) -%}\n\n    CASE {% for pattern in patterns -%}\n            WHEN {{ test_col }} ILIKE '{{ pattern }}' THEN TRUE\n         {% endfor -%}\n        ELSE FALSE\n    END\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0127566, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_name": {"name": "check_test_name", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_name.sql", "original_file_path": "macros/check_test_macros/check_test_name.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_name", "macro_sql": "{% macro check_test_name(col) -%}\n\n    {{\n        check_test_lookup(\n            test_col=col,\n            rule_col='test_rule',\n            rule_type_col='rule_type',\n            rule_type='name',\n            lookup_source=ref('test_rules')\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_lookup"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0130768, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_not_livemode": {"name": "check_test_not_livemode", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_not_livemode.sql", "original_file_path": "macros/check_test_macros/check_test_not_livemode.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_not_livemode", "macro_sql": "{% macro check_test_not_livemode(columns) -%}\n\n    CASE\n\n    {%- for col in columns %}\n        WHEN NVL({{ col }}, TRUE) THEN FALSE\n    {%- endfor %}\n        ELSE TRUE\n    END\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0133417, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_pet_profile": {"name": "check_test_pet_profile", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_pet_profile.sql", "original_file_path": "macros/check_test_macros/check_test_pet_profile.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_pet_profile", "macro_sql": "{% macro check_test_pet_profile(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('kinship_pet_profile'),\n            ref_col='pet_profile_id',\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Macro to identify test records based on pet profile ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_pet_profile.yml", "arguments": [{"name": "col", "type": "string", "description": "The column containing the pet profile ID"}], "created_at": 1746823683.2541785, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_kinship_pet": {"name": "check_test_kinship_pet", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_pet_profile.sql", "original_file_path": "macros/check_test_macros/check_test_pet_profile.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_kinship_pet", "macro_sql": "{% macro check_test_kinship_pet(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('cpd_pet_profile_pet_profile'),\n            ref_col='kinship_pet_id',\n        )\n    }}\n    OR {{\n           check_test_in_other_table(\n               col=col,\n               ref_table=ref('cpd_pet_profile_pet_profile_bkp'),\n               ref_col='kinship_pet_id',\n           )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Macro to identify test records based on Kinship pet ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_pet_profile.yml", "arguments": [{"name": "col", "type": "string", "description": "The column containing the Kinship pet ID"}], "created_at": 1746823683.2544975, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_picture_uri": {"name": "check_test_picture_uri", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_picture_uri.sql", "original_file_path": "macros/check_test_macros/check_test_picture_uri.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_picture_uri", "macro_sql": "{% macro check_test_picture_uri(col) -%}\n\n    {{\n        check_test_lookup(\n            test_col=col,\n            rule_col='test_rule',\n            rule_type_col='rule_type',\n            rule_type='picture_uri',\n            lookup_source=ref('test_rules')\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_lookup"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0144181, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_time_zone": {"name": "check_test_time_zone", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_time_zone.sql", "original_file_path": "macros/check_test_macros/check_test_time_zone.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_time_zone", "macro_sql": "{% macro check_test_time_zone(col) -%}\n\n    {{\n        check_test_lookup(\n            test_col=col,\n            rule_col='test_rule',\n            rule_type_col='rule_type',\n            rule_type='time_zone',\n            lookup_source=ref('test_rules')\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_lookup"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0147266, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_kinship_user": {"name": "check_test_kinship_user", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_user.sql", "original_file_path": "macros/check_test_macros/check_test_user.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_kinship_user", "macro_sql": "{% macro check_test_kinship_user(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('cpd_user_profile_user_profile'),\n            ref_col='kinship_user_id',\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Checks if a user ID is associated with a test Kinship user ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_users.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of column with the Kinship user ID to check \u2013 e.g. 'kinship_user_id'"}], "created_at": 1746823683.2549222, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_the_wildest_user": {"name": "check_test_the_wildest_user", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_user.sql", "original_file_path": "macros/check_test_macros/check_test_user.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_the_wildest_user", "macro_sql": "{% macro check_test_the_wildest_user(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('kinship_user_profile'),\n            ref_col='the_wildest_user_id',\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Checks if a user ID is associated with a test The Wildest user ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_users.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of column with The Wildest user ID to check \u2013 e.g. 'legacy_the_wildest_user_id'"}], "created_at": 1746823683.2552443, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_us_consultation": {"name": "check_test_vetinsight_us_consultation", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_us_consultation", "macro_sql": "{% macro check_test_vetinsight_us_consultation(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_consultations'),\n            ref_col='consultation_id'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Checks if a record is associated with a test VetInsight consultation ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of column with the VetInsight consultation ID to check \u2013 e.g. 'consultation_id'"}], "created_at": 1746823683.2556458, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_uk_consultation": {"name": "check_test_vetinsight_uk_consultation", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_uk_consultation", "macro_sql": "{% macro check_test_vetinsight_uk_consultation(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_uk_consultations'),\n            ref_col='consultation_id'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Checks if a record is associated with a test VetInsight UK consultation ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of column with the VetInsight UK consultation ID to check \u2013 e.g. 'consultation_id'"}], "created_at": 1746823683.2559717, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_uk_conversation": {"name": "check_test_vetinsight_uk_conversation", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_uk_conversation", "macro_sql": "{% macro check_test_vetinsight_uk_conversation(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_uk_conversations'),\n            ref_col='conversation_id'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Checks if a record is associated with a test VetInsight UK conversation ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of column with the VetInsight UK conversation ID to check \u2013 e.g. 'conversation_id'"}], "created_at": 1746823683.256441, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_us_external_pet": {"name": "check_test_vetinsight_us_external_pet", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_us_external_pet", "macro_sql": "{% macro check_test_vetinsight_us_external_pet(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_external_pet_identities'),\n            ref_col='vetinsight_pet_id'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Checks if a given VetInsight pet ID matches a test based on its external ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of column with the VetInsight pet ID to check \u2013 e.g. 'vetinsight_pet_id'"}], "created_at": 1746823683.2567778, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_uk_external_pet": {"name": "check_test_vetinsight_uk_external_pet", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_uk_external_pet", "macro_sql": "{% macro check_test_vetinsight_uk_external_pet(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_uk_external_pet_identities'),\n            ref_col='vetinsight_pet_id'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Checks if a given VetInsight pet ID matches a test based on its external ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of column with the VetInsight UK pet ID to check \u2013 e.g. 'vetinsight_pet_id'"}], "created_at": 1746823683.2570956, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_us_external_user": {"name": "check_test_vetinsight_us_external_user", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_us_external_user", "macro_sql": "{% macro check_test_vetinsight_us_external_user(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_external_identities'),\n            ref_col='vetinsight_user_id'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Checks if a given VetInsight user ID matches a test based on its external ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of column with the VetInsight user ID to check \u2013 e.g. 'vetinsight_user_id'"}], "created_at": 1746823683.2574096, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_uk_external_user": {"name": "check_test_vetinsight_uk_external_user", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_uk_external_user", "macro_sql": "{% macro check_test_vetinsight_uk_external_user(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_uk_external_identities'),\n            ref_col='vetinsight_user_id'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Checks if a given VetInsight UK user ID matches a test based on its external ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of column with the VetInsight UK user ID to check \u2013 e.g. 'vetinsight_user_id'"}], "created_at": 1746823683.257733, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_uk_partner": {"name": "check_test_vetinsight_uk_partner", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_uk_partner", "macro_sql": "{% macro check_test_vetinsight_uk_partner(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_uk_partners'),\n            ref_col='partner_id'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Macro to identify test records based on VetInsight UK partner ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "The column containing the VetInsight UK partner ID"}], "created_at": 1746823683.2580557, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_us_pet": {"name": "check_test_vetinsight_us_pet", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_us_pet", "macro_sql": "{% macro check_test_vetinsight_us_pet(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_pets'),\n            ref_col='vetinsight_pet_id'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Macro to identify test records based on VetInsight pet ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "The column containing the VetInsight pet ID"}], "created_at": 1746823683.258368, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_uk_pet": {"name": "check_test_vetinsight_uk_pet", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_uk_pet", "macro_sql": "{% macro check_test_vetinsight_uk_pet(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_uk_pets'),\n            ref_col='vetinsight_pet_id'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Macro to identify test records based on VetInsight UK pet ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "The column containing the VetInsight UK pet ID"}], "created_at": 1746823683.258695, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_uk_practice": {"name": "check_test_vetinsight_uk_practice", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_uk_practice", "macro_sql": "{% macro check_test_vetinsight_uk_practice(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_uk_practices'),\n            ref_col='practice_id'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Macro to identify test records based on VetInsight UK practice ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "The column containing the VetInsight UK practice ID"}], "created_at": 1746823683.2590072, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_uk_practice_group": {"name": "check_test_vetinsight_uk_practice_group", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_uk_practice_group", "macro_sql": "{% macro check_test_vetinsight_uk_practice_group(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_uk_practice_groups'),\n            ref_col='practice_group_id'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Macro to identify test records based on VetInsight UK practice group ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "The column containing the VetInsight UK practice group ID"}], "created_at": 1746823683.259311, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_us_tags": {"name": "check_test_vetinsight_us_tags", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_us_tags", "macro_sql": "{% macro check_test_vetinsight_us_tags(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_tags'),\n            ref_col='tag_id'\n        )\n    }}\n    OR {{\n           check_test_in_other_table(\n               col=col,\n               ref_table=ref('vetinsight_postgres_predefined_tags'),\n               ref_col='tag_id'\n           )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Checks if a given VetInsight tag ID matches a test tag record", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of column with the VetInsight tag ID to check \u2013 e.g. 'tag_id'"}], "created_at": 1746823683.259612, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_uk_tags": {"name": "check_test_vetinsight_uk_tags", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_uk_tags", "macro_sql": "{% macro check_test_vetinsight_uk_tags(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_uk_tags'),\n            ref_col='tag_id'\n        )\n    }}\n    OR {{\n           check_test_in_other_table(\n               col=col,\n               ref_table=ref('vetinsight_postgres_uk_predefined_tags'),\n               ref_col='tag_id'\n           )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Checks if a given VetInsight UK tag ID matches a test tag record", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of column with the VetInsight UK tag ID to check \u2013 e.g. 'tag_id'"}], "created_at": 1746823683.2599325, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_us_user": {"name": "check_test_vetinsight_us_user", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_us_user", "macro_sql": "{% macro check_test_vetinsight_us_user(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_users'),\n            ref_col='vetinsight_user_id'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Checks if a user ID is associated with a test VetInsight user ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of column with the VetInsight user ID to check \u2013 e.g. 'vetinsight_user_id'"}], "created_at": 1746823683.260243, "supported_languages": null}, "macro.poc_dbt_snowflake.check_test_vetinsight_uk_user": {"name": "check_test_vetinsight_uk_user", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/check_test_macros/check_test_vetinsight.sql", "original_file_path": "macros/check_test_macros/check_test_vetinsight.sql", "unique_id": "macro.poc_dbt_snowflake.check_test_vetinsight_uk_user", "macro_sql": "{% macro check_test_vetinsight_uk_user(col) -%}\n\n    {{\n        check_test_in_other_table(\n            col=col,\n            ref_table=ref('vetinsight_postgres_uk_users'),\n            ref_col='vetinsight_user_id'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.check_test_in_other_table"]}, "description": "Checks if a user ID is associated with a test VetInsight UK user ID", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/check_test_macros/check_test_vetinsight.yml", "arguments": [{"name": "col", "type": "string", "description": "Name of column with the VetInsight UK user ID to check \u2013 e.g. 'vetinsight_uk_user_id'"}], "created_at": 1746823683.2605493, "supported_languages": null}, "macro.poc_dbt_snowflake.apply_date_filters": {"name": "apply_date_filters", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/datetime_macros/apply_date_filters.sql", "original_file_path": "macros/datetime_macros/apply_date_filters.sql", "unique_id": "macro.poc_dbt_snowflake.apply_date_filters", "macro_sql": "{%\n    macro apply_date_filters(\n        date_col,\n        lookback_days_start=var('lookback_window')['default']['start_days'],\n        lookback_days_end=var('lookback_window')['default']['end_days']\n    )\n-%}\n                            \n    {% if is_incremental() and lookback_days_start is none -%}\n     AND {{ date_col }}  >= (\n             SELECT MAX({{ date_col }})\n             FROM {{ this }}\n         )\n    {%- endif %}\n    \n    {% if is_incremental() and lookback_days_start is not none -%}\n        AND DATE_TRUNC('day', {{ date_col}} ) >= DATE_TRUNC(\n                'day', {{ get_lookback_dt(lookback_days_start) }}\n            )\n    {%- endif %}\n\n    {% if lookback_days_end is not none and date_col is not none -%}\n        AND DATE_TRUNC('day', {{ date_col }}) <= DATE_TRUNC(\n                'day', {{ get_lookback_dt(lookback_days_end) }}\n            )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.poc_dbt_snowflake.get_lookback_dt"]}, "description": "This macro defines and conditionally applies a date window on to the model", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/datetime_macros/apply_date_filters.yml", "arguments": [{"name": "date_col", "type": "string", "description": "Name of the column to apply the date filters to"}, {"name": "lookback_days_start", "type": "integer", "description": "When not supplied, incremental runs will use the value of the supplied date_col  in the model (already materialized) to determine the starting point for the lookback period.  Supply an integer if to specify a fixed number of days as the starting point for the lookback period. i.e. 7 to process data from 7 days go\n"}, {"name": "lookback_days_end", "type": "integer", "description": "The is the end point for the lookback period. i.e. 2 to process data that is at least 2 days old"}], "created_at": 1746823683.2618294, "supported_languages": null}, "macro.poc_dbt_snowflake.from_unixtime": {"name": "from_unixtime", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/datetime_macros/from_unixtime.sql", "original_file_path": "macros/datetime_macros/from_unixtime.sql", "unique_id": "macro.poc_dbt_snowflake.from_unixtime", "macro_sql": "{% macro from_unixtime(column_name, div=1) -%}\n\n  TIMESTAMP 'epoch' + {{ column_name }} / {{ div }} * INTERVAL '1 second'\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Macro to convert UNIX time epoch into datestamp.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/datetime_macros/from_unixtime.yml", "arguments": [{"name": "column_name", "type": "string", "description": "Name of the column to convert from UNIX time"}, {"name": "div", "type": "integer", "description": "Specifies how much to divide by the UNIX time column to arrive at a seconds-level conversion. Defaults to 1."}], "created_at": 1746823683.2627258, "supported_languages": null}, "macro.poc_dbt_snowflake.from_unixtime_ms": {"name": "from_unixtime_ms", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/datetime_macros/from_unixtime_ms.sql", "original_file_path": "macros/datetime_macros/from_unixtime_ms.sql", "unique_id": "macro.poc_dbt_snowflake.from_unixtime_ms", "macro_sql": "{% macro from_unixtime_ms(column_name) -%}\n\n  TIMESTAMP 'epoch' + {{ column_name }} / 1000 * INTERVAL '1 second'\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0206316, "supported_languages": null}, "macro.poc_dbt_snowflake.from_utc_offset": {"name": "from_utc_offset", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/datetime_macros/from_utc_offset.sql", "original_file_path": "macros/datetime_macros/from_utc_offset.sql", "unique_id": "macro.poc_dbt_snowflake.from_utc_offset", "macro_sql": "{% macro from_utc_offset(column_name, offset) -%}\n\n  CONVERT_TIMEZONE('{{offset}}', 'UTC', {{column_name}})\n  \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0208187, "supported_languages": null}, "macro.poc_dbt_snowflake.from_utc_offset_string": {"name": "from_utc_offset_string", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/datetime_macros/from_utc_offset_string.sql", "original_file_path": "macros/datetime_macros/from_utc_offset_string.sql", "unique_id": "macro.poc_dbt_snowflake.from_utc_offset_string", "macro_sql": "{% macro from_utc_offset_string(column_name, offset, dt_format='YYYY-MM-DD HH24:MI:SS') -%}\n\n  CONVERT_TIMEZONE('{{offset}}', \n                   'UTC', \n                   TO_TIMESTAMP({{column_name}}, '{{dt_format}}')::timestamp\n                   ) \n  \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0211396, "supported_languages": null}, "macro.poc_dbt_snowflake.get_lookback_dt": {"name": "get_lookback_dt", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/datetime_macros/get_lookback_dt.sql", "original_file_path": "macros/datetime_macros/get_lookback_dt.sql", "unique_id": "macro.poc_dbt_snowflake.get_lookback_dt", "macro_sql": "{% macro get_lookback_dt(n_days) -%}\n    DATEADD(day, -{{n_days}}, {{ dbt.current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "Macro that contains the date math and returns the timestamp for 'n days ago from the current time'.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/datetime_macros/get_lookback_dt.yml", "arguments": [{"name": "n_days", "type": "integer", "description": "Number of days from today"}], "created_at": 1746823683.263525, "supported_languages": null}, "macro.poc_dbt_snowflake.exclude_corrupted_partitions": {"name": "exclude_corrupted_partitions", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/ga4/exclude_corrupted_partitions.sql", "original_file_path": "macros/ga4/exclude_corrupted_partitions.sql", "unique_id": "macro.poc_dbt_snowflake.exclude_corrupted_partitions", "macro_sql": "{% macro exclude_corrupted_partitions(partition_dates) -%}\n\n    AND partition_0 NOT IN (\n            {%- for partition_date in partition_dates -%}\n                '{{ partition_date }}'\n                {%- if not loop.last -%}\n                    ,\n                {%- endif -%}\n            {%- endfor -%}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Macro that excludes partitions with corrupted parquet files \u2013 see JIRA ticket KDM-350 for details", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/ga4/exclude_corrupted_partitions.yml", "arguments": [{"name": "partition_dates", "type": "list", "description": "List of partition dates that contain corrupted parquet files in the format of 'YYYYMMDD'"}], "created_at": 1746823683.2643223, "supported_languages": null}, "macro.poc_dbt_snowflake.loop_through_columns": {"name": "loop_through_columns", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/ga4/extract_event_params.sql", "original_file_path": "macros/ga4/extract_event_params.sql", "unique_id": "macro.poc_dbt_snowflake.loop_through_columns", "macro_sql": "{%\n    macro loop_through_columns(\n              columns, prefix='', is_aggregated=false, aggregate_func='MAX'\n          )\n-%}\n\n    {% for col in columns -%}\n        {%- if is_aggregated -%}\n            {{ aggregate_func }}({{ prefix }}{{ col }}) AS {{ col }}\n        {%- else -%}\n            {{ prefix }}{{ col }}\n        {%- endif %}\n        {%- if not loop.last %}\n            ,\n        {%- endif -%}\n    {%- endfor %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Macro that loops through a given list of columns as part of a select statement", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/ga4/extract_event_params.yml", "arguments": [{"name": "columns", "type": "array", "description": "List of column names to select"}, {"name": "prefix", "type": "string", "description": "Prefix to apply before column names. Defaults to an empty string"}, {"name": "is_aggregated", "type": "boolean", "description": "Whether to use an aggregate function on the columns. Defaults to false"}, {"name": "aggregate_func", "type": "string", "description": "Name of aggregate function to use on columns \u2013 has to be Redshift compatible. Defaults to 'MAX'"}], "created_at": 1746823683.266798, "supported_languages": null}, "macro.poc_dbt_snowflake.process_field": {"name": "process_field", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/ga4/extract_event_params.sql", "original_file_path": "macros/ga4/extract_event_params.sql", "unique_id": "macro.poc_dbt_snowflake.process_field", "macro_sql": "\n{%- macro process_field(field) -%}\n\n    {% if field.null_value is not defined -%}\n        {%- do field.update({'null_value': '\\'\\''}) -%}\n    {%- endif %}\n    {% if field.alias is not defined -%}\n        {%- do field.update({'alias': field['field_key']}) -%}\n    {%- endif %}\n    {% if field.value_type is not defined -%}\n        {%- do field.update({'value_type': 'string'}) -%}\n    {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "Macro to process and standardise the nested field dictionary passed", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/ga4/extract_event_params.yml", "arguments": [{"name": "field", "type": "dictionary", "description": "Nested field dictionary to standardise"}], "created_at": 1746823683.267504, "supported_languages": null}, "macro.poc_dbt_snowflake.loop_through_nested_fields": {"name": "loop_through_nested_fields", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/ga4/extract_event_params.sql", "original_file_path": "macros/ga4/extract_event_params.sql", "unique_id": "macro.poc_dbt_snowflake.loop_through_nested_fields", "macro_sql": "{%\n    macro loop_through_nested_fields(\n              nested_fields,\n              field_dict_key,\n              is_aggregated=false,\n              aggregate_func='MAX'\n          )\n-%}\n\n    {% for curr_field in nested_fields -%}\n        {{ process_field(field=curr_field) }}\n        {%- set field_val = curr_field[field_dict_key] -%}\n        {% if is_aggregated -%}\n            {{ aggregate_func }}({{ field_val }}) AS {{ field_val }}\n        {% else -%}\n            {{ field_val }}\n        {%- endif %}\n        {% if not loop.last -%}\n            ,\n        {%- endif %}\n    {%- endfor %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.process_field"]}, "description": "Macro that loops through a given list of nested field dictionaries, accessing a given key as part of a select statement", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/ga4/extract_event_params.yml", "arguments": [{"name": "nested_fields", "type": "array", "description": "List of nested field dictionaries to loop through"}, {"name": "field_dict_key", "type": "string", "description": "The key to access within the dictionaries"}, {"name": "is_aggregated", "type": "boolean", "description": "Whether to use an aggregate function on the columns. Defaults to false"}, {"name": "aggregate_func", "type": "string", "description": "Name of aggregate function to use on columns \u2013 has to be Redshift compatible. Defaults to 'MAX'"}], "created_at": 1746823683.2682981, "supported_languages": null}, "macro.poc_dbt_snowflake.expand_value_columns": {"name": "expand_value_columns", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/ga4/extract_event_params.sql", "original_file_path": "macros/ga4/extract_event_params.sql", "unique_id": "macro.poc_dbt_snowflake.expand_value_columns", "macro_sql": "{% macro expand_value_columns(value_fields, prefix) -%}\n\n    {%- set key_col = prefix + '_key' -%}\n\n    {% for curr_value in value_fields -%}\n        {{ process_field(field=curr_value) }}\n        {% if curr_value['value_type'] == 'string' -%}\n            {%- set value_col = prefix + '_string_value' -%}\n        {% elif curr_value['value_type'] == 'int' -%}\n            {%- set value_col = prefix + '_int_value' -%}\n        {% elif curr_value['value_type'] == 'float' -%}\n            {%- set value_col = prefix + '_float_value' -%}\n        {% else -%}\n            {%- set value_col = prefix + '_double_value' -%}\n        {%- endif %}\n        CASE WHEN {{ key_col }} = '{{ curr_value[\"field_key\"] }}' THEN\n        {% if curr_value['value_type'] == 'string' -%}\n            SUBSTRING({{ value_col }}, 2, LENGTH({{ value_col }}) - 2)\n        {% else -%}\n            {{ value_col }}\n        {%- endif %}\n             ELSE CAST({{ curr_value['null_value'] }} AS VARCHAR)\n         END AS {{ curr_value['alias'] }}\n        {% if not loop.last -%}\n            ,\n        {%- endif %}\n    {%- endfor %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.process_field"]}, "description": "Macro to expand nested field values related to given value keys as new columns", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/ga4/extract_event_params.yml", "arguments": [{"name": "value_fields", "type": "array", "description": "A list of nested value dictionaries that have to at least define 'field_key' \u2013 which is the value key to expand. Other possible dictionary keys to define are 'null_value' that defines what to pass null values as \u2013 if not defined will get an empty string assigned. 'alias' that defines what to alias the new parameter column as \u2013 if not defined will get the 'field_key' values assigned. 'value_type' which can be either 'string', 'int', 'float' or 'double' and specifies which value type the nested value is originally in the GA4 source data \u2013 if not defined will get 'string' assigned. E.g. [({'field_key': 'kinship_id', 'alias': 'kinship_user_id'}), ({'field_key': 'ga_session_id', 'value_type': 'int'})]"}, {"name": "prefix", "type": "string", "description": "Prefix that is used for the nested fields \u2013 use 'event_params' for event parameter and 'user_properties' for user properties."}], "created_at": 1746823683.2689075, "supported_languages": null}, "macro.poc_dbt_snowflake.explode_nested_fields": {"name": "explode_nested_fields", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/ga4/extract_event_params.sql", "original_file_path": "macros/ga4/extract_event_params.sql", "unique_id": "macro.poc_dbt_snowflake.explode_nested_fields", "macro_sql": "{%\n    macro explode_nested_fields(\n              columns, source_table, group_by_column\n          )\n-%}\n\n       SELECT s.{{ group_by_column }}\n            , {{ loop_through_columns(columns=columns, prefix='s.') }}\n            , ep.\"key\" AS event_params_key\n            , JSON_SERIALIZE(ep.\"value\".\"string_value\") AS event_params_string_value\n            , JSON_SERIALIZE(ep.\"value\".\"int_value\") AS event_params_int_value\n            , JSON_SERIALIZE(ep.\"value\".\"float_value\") AS event_params_float_value\n            , JSON_SERIALIZE(ep.\"value\".\"double_value\") AS event_params_double_value\n            , up.\"key\" AS user_properties_key\n            , JSON_SERIALIZE(up.\"value\".\"string_value\") AS user_properties_string_value\n            , JSON_SERIALIZE(up.\"value\".\"int_value\") AS user_properties_int_value\n            , JSON_SERIALIZE(up.\"value\".\"float_value\") AS user_properties_float_value\n            , JSON_SERIALIZE(up.\"value\".\"double_value\") AS user_properties_double_value\n         FROM {{ source_table }} AS s\n    LEFT JOIN s.event_params AS ep\n           ON TRUE\n    LEFT JOIN s.user_properties AS up\n           ON TRUE\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.loop_through_columns"]}, "description": "Macro that selects data and explodes nested fields from the source table", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/ga4/extract_event_params.yml", "arguments": [{"name": "columns", "type": "array", "description": "A list of column names to include from the original model"}, {"name": "source_table", "type": "reference", "description": "The table from which to select and extract the data"}, {"name": "group_by_column", "type": "string", "description": "Name of the column to group the events by after explosion \u2013 included to select along columns"}], "created_at": 1746823683.2692816, "supported_languages": null}, "macro.poc_dbt_snowflake.create_extraction_query": {"name": "create_extraction_query", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/ga4/extract_event_params.sql", "original_file_path": "macros/ga4/extract_event_params.sql", "unique_id": "macro.poc_dbt_snowflake.create_extraction_query", "macro_sql": "{%\n    macro create_extraction_query(\n              columns,\n              event_params,\n              user_properties,\n              source_table,\n              group_by_column='hash_key'\n          )\n-%}\n\n    exploded_data AS (\n        {{\n            explode_nested_fields(\n                columns=columns,\n                source_table=source_table,\n                group_by_column=group_by_column\n            )\n        }}\n    ),\n\n    extracted_data AS (\n        SELECT {{ group_by_column }}\n             , {{ loop_through_columns(columns=columns) }}\n             , {{ expand_value_columns(value_fields=event_params, prefix='event_params') }}\n             , {{ expand_value_columns(value_fields=user_properties, prefix='user_properties') }}\n          FROM exploded_data\n    ),\n\n    collapsed_data AS (\n          SELECT {{ group_by_column }}\n               , {{ loop_through_columns(columns=columns, is_aggregated=true) }}\n               , {{\n                     loop_through_nested_fields(\n                         nested_fields=event_params,\n                         field_dict_key='alias',\n                         is_aggregated=true\n                     )\n                 }}\n               , {{\n                     loop_through_nested_fields(\n                         nested_fields=user_properties,\n                         field_dict_key='alias',\n                         is_aggregated=true\n                     )\n                 }}\n            FROM extracted_data\n        GROUP BY {{ group_by_column }}\n    )\n\n    SELECT {{ group_by_column }}\n         , {{ loop_through_columns(columns=columns) }}\n         , {{\n               loop_through_nested_fields(\n                   nested_fields=event_params, field_dict_key='alias'\n               )\n           }}\n         , {{\n               loop_through_nested_fields(\n                   nested_fields=user_properties, field_dict_key='alias'\n               )\n           }}\n         , {{ audit_columns() }}\n      FROM collapsed_data\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.explode_nested_fields", "macro.poc_dbt_snowflake.loop_through_columns", "macro.poc_dbt_snowflake.expand_value_columns", "macro.poc_dbt_snowflake.loop_through_nested_fields", "macro.poc_dbt_snowflake.audit_columns"]}, "description": "Macro that creates a table where the given event parameters are extracted", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/ga4/extract_event_params.yml", "arguments": [{"name": "columns", "type": "array", "description": "A list of column names to include from the original model"}, {"name": "event_params", "type": "array", "description": "A list of event parameter dictionaries that have to at least define 'field_key' \u2013 which is the event_params key to expand. Other possible dictionary keys to define are 'null_value' that defines what to pass null values as \u2013 if not defined will get an empty string assigned. 'alias' that defines what to alias the new parameter column as \u2013 if not defined will get the 'field_key' values assigned. 'value_type' which can be either 'string', 'int', 'float' or 'double' and specifies which value type the event_params value is originally in the GA4 source data \u2013 if not defined will get 'string' assigned. E.g. [({'field_key': 'kinship_id', 'alias': 'kinship_user_id'}), ({'field_key': 'ga_session_id', 'value_type': 'int'})]"}, {"name": "user_properties", "type": "array", "description": "A list of user property dictionaries that have to at least define 'field_key' \u2013 which is the user_property key to expand. Other possible dictionary keys to define are 'null_value' that defines what to pass null values as \u2013 if not defined will get an empty string assigned. 'alias' that defines what to alias the new parameter column as \u2013 if not defined will get the 'field_key' values assigned. 'value_type' which can be either 'string', 'int', 'float' or 'double' and specifies which value type the user_property value is originally in the GA4 source data \u2013 if not defined will get 'string' assigned. E.g. [({'field_key': 'locale'}), ({'field_key': 'first_open_time', 'value_type': 'int', 'alias': 'page_first_opened'})]"}, {"name": "source_table", "type": "reference", "description": "The table from which to select and extract the data"}, {"name": "group_by_column", "type": "string", "description": "Name of the column to group the events by after explosion. Defaults to 'hash_key'"}], "created_at": 1746823683.2656188, "supported_languages": null}, "macro.poc_dbt_snowflake.extract_event_params_string": {"name": "extract_event_params_string", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/ga4/extract_event_params.sql", "original_file_path": "macros/ga4/extract_event_params.sql", "unique_id": "macro.poc_dbt_snowflake.extract_event_params_string", "macro_sql": "{% macro extract_event_params_string(event_params_key, alias_name) -%}\n\n    REGEXP_SUBSTR(\n        JSON_SERIALIZE(event_params),\n        '\"{{ event_params_key }}\",\"value\":\\\\{\"string_value\":\"([\\\\w\\-]+)\"',\n        1,\n        1,\n        'e'\n    ) AS {{ alias_name }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Macro to extract a given event parameter string value from the event_params JSON stirng", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/ga4/extract_event_params.yml", "arguments": [{"name": "event_params_key", "type": "string", "description": "Key of the event parameter to extract \u2013 e.g. 'kinship_id'"}, {"name": "alais_name", "type": "string", "description": "Alias of the column that will contain the extracted value \u2013 e.g. kinship_user_id"}], "created_at": 1746823683.270158, "supported_languages": null}, "macro.poc_dbt_snowflake.ga4_create_bronze_model": {"name": "ga4_create_bronze_model", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/ga4/ga4_create_bronze_model.sql", "original_file_path": "macros/ga4/ga4_create_bronze_model.sql", "unique_id": "macro.poc_dbt_snowflake.ga4_create_bronze_model", "macro_sql": "{% macro ga4_create_bronze_model(source_table_ref, lookback_start=7) %}\n-- GA4 timestamps are measured in microseconds (1/1,000,000th of a second), hence the division variable.\n{% set ts_div = 1000000 %}\n\nWITH source_data AS (\n    SELECT app_info\n         , batch_event_index\n         , batch_ordering_id\n         , batch_page_id\n         , collected_traffic_source\n         , device\n         , ecommerce\n         , event_bundle_sequence_id\n         , CAST({{ from_unixtime(column_name='event_timestamp_unix', div=ts_div)}} AS DATE) AS event_date\n         , event_dimensions\n         , event_name\n         , event_params\n         , {{\n               from_unixtime(\n                   column_name='event_previous_timestamp_unix', div=ts_div\n               )\n           }} AS event_previous_timestamp\n         , event_server_timestamp_offset_micros\n         , {{\n               from_unixtime(column_name='event_timestamp_unix', div=ts_div)\n           }} AS event_timestamp\n         , event_value_in_usd\n         , geo\n         , is_active_user\n         , items\n         , partition_0\n         , platform\n         , privacy_info\n         , publisher\n         , session_traffic_source_last_click\n         , stream_id\n         , traffic_source\n         , {{\n               from_unixtime(\n                   column_name='user_first_touch_timestamp_unix', div=ts_div\n               )\n           }} AS user_first_touch_timestamp\n         , user_id\n         , user_ltv\n         , user_properties\n         , user_pseudo_id\n         , {{ extract_event_params_string('kinship_id', 'kinship_user_id') }}\n         , {{ check_test_kinship_user('kinship_user_id') }} AS is_test\n         , {{\n               dbt_utils.generate_surrogate_key(\n                   [\n                       'app_info'\n                       , 'batch_event_index'\n                       , 'batch_ordering_id'\n                       , 'batch_page_id'\n                       , 'collected_traffic_source'\n                       , 'device'\n                       , 'ecommerce'\n                       , 'event_bundle_sequence_id'\n                       , 'event_date'\n                       , 'event_dimensions'\n                       , 'event_name'\n                       , 'event_params'\n                       , 'event_previous_timestamp'\n                       , 'event_server_timestamp_offset_micros'\n                       , 'event_timestamp'\n                       , 'event_value_in_usd'\n                       , 'geo'\n                       , bool_to_string('is_active_user')\n                       , 'items'\n                       , 'platform'\n                       , 'privacy_info'\n                       , 'publisher'\n                       , 'session_traffic_source_last_click'\n                       , 'stream_id'\n                       , 'traffic_source'\n                       , 'user_first_touch_timestamp'\n                       , 'user_id'\n                       , 'user_ltv'\n                       , 'user_properties'\n                       , 'user_pseudo_id'\n                   ]\n               )\n           }} AS hash_key\n         , {{ audit_columns() }}\n      FROM {{ source_table_ref }}\n      WHERE TRUE\n         {{\n             apply_date_filters(\n                 'CAST(event_date_string AS DATE)',\n                 lookback_days_start=lookback_start\n             )\n         }}\n)\n{{\n    dbt_utils.deduplicate(\n        relation='source_data',\n        partition_by='hash_key',\n        order_by='event_timestamp DESC',\n    )\n}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.from_unixtime", "macro.poc_dbt_snowflake.extract_event_params_string", "macro.poc_dbt_snowflake.check_test_kinship_user", "macro.dbt_utils.generate_surrogate_key", "macro.poc_dbt_snowflake.bool_to_string", "macro.poc_dbt_snowflake.audit_columns", "macro.poc_dbt_snowflake.apply_date_filters", "macro.dbt_utils.deduplicate"]}, "description": "This macro generates the SQL to produce a Bronze Layer table for the specified GA4 Copper Layer model.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/ga4/ga4_create_bronze_model.yml", "arguments": [{"name": "source_table_ref", "type": "relation", "description": "The GA4 Copper Layer model relation (ref) to be ingested to the Bronze Layer"}, {"name": "lookback_days", "type": "integer", "description": "Specifies the ingestion window in days (from today) in case the build is not a full-refresh"}], "created_at": 1746823683.2711737, "supported_languages": null}, "macro.poc_dbt_snowflake.ga4_create_copper_model": {"name": "ga4_create_copper_model", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/ga4/ga4_create_copper_model.sql", "original_file_path": "macros/ga4/ga4_create_copper_model.sql", "unique_id": "macro.poc_dbt_snowflake.ga4_create_copper_model", "macro_sql": "{% macro ga4_create_copper_model(src, lookback_start=7) %}\n\n    SELECT app_info\n         , batch_event_index\n         , batch_ordering_id\n         , batch_page_id\n         , collected_traffic_source\n         , device\n         , ecommerce\n         , event_bundle_sequence_id\n         , event_date AS event_date_string\n         , event_dimensions\n         , event_name\n         , event_params\n         , event_previous_timestamp AS event_previous_timestamp_unix\n         , event_server_timestamp_offset AS event_server_timestamp_offset_micros\n         , event_timestamp AS event_timestamp_unix\n         , event_value_in_usd\n         , geo\n         , is_active_user\n         , items\n         , partition_0\n         , platform\n         , privacy_info\n         , publisher\n         , session_traffic_source_last_click\n         , stream_id\n         , traffic_source\n         , user_first_touch_timestamp AS user_first_touch_timestamp_unix\n         , user_id\n         , user_ltv\n         , user_properties\n         , user_pseudo_id\n         , {{ audit_columns() }}\n      FROM {{ src }}\n      WHERE TRUE\n        {{ apply_date_filters('CAST(event_date AS DATE)', lookback_days_start=lookback_start) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.audit_columns", "macro.poc_dbt_snowflake.apply_date_filters"]}, "description": "This macro generates the SQL to produce a Copper Layer table for the specified GA4 source.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/ga4/ga4_create_copper_model.yml", "arguments": [{"name": "src", "type": "source", "description": "The GA4 source to be ingested to the Copper Layer"}, {"name": "lookback_days", "type": "integer", "description": "Specifies the ingestion window in days (from today) in case the build is not a full-refresh"}], "created_at": 1746823683.271991, "supported_languages": null}, "macro.poc_dbt_snowflake.ga4_create_extracted_model": {"name": "ga4_create_extracted_model", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/ga4/ga4_create_extracted_model.sql", "original_file_path": "macros/ga4/ga4_create_extracted_model.sql", "unique_id": "macro.poc_dbt_snowflake.ga4_create_extracted_model", "macro_sql": "{% macro ga4_create_extracted_model(source_table, lookback_days_start=7) -%}\n\n    WITH array_fields_serialized AS (\n        SELECT batch_event_index\n             , batch_ordering_id\n             , batch_page_id\n             , JSON_SERIALIZE(ecommerce) AS ecommerce\n             , event_date\n             , event_name\n             , event_params\n             , JSON_SERIALIZE(event_params) AS event_params_text\n             , event_timestamp\n             , hash_key\n             , stream_id\n             , JSON_SERIALIZE(traffic_source) AS traffic_source\n             , user_properties\n             , JSON_SERIALIZE(user_properties) AS user_properties_text\n             , user_pseudo_id\n          FROM {{ source_table }}\n         WHERE TRUE\n             {{ apply_date_filters('event_date', lookback_days_start=lookback_days_start) }}\n    ),\n\n    {{\n        create_extraction_query(\n            columns=[\n                'batch_event_index',\n                'batch_ordering_id',\n                'batch_page_id',\n                'ecommerce',\n                'event_date',\n                'event_name',\n                'event_params_text',\n                'event_timestamp',\n                'stream_id',\n                'traffic_source',\n                'user_properties_text',\n                'user_pseudo_id'\n            ],\n            event_params=[\n                ({'field_key': 'aav_option'}),\n                ({'field_key': 'aav_topic'}),\n                ({'field_key': 'campaign'}),\n                ({'field_key': 'content_type'}),\n                ({'field_key': 'engagement_time_msec', 'value_type': 'int'}),\n                ({'field_key': 'firebase_screen'}),\n                ({'field_key': 'firebase_screen_class'}),\n                ({'field_key': 'firebase_screen_id', 'value_type': 'int'}),\n                ({'field_key': 'ga_session_id', 'value_type': 'int', 'null_value': 'NULL'}),\n                ({'field_key': 'ga_session_number', 'value_type': 'int', 'null_value': 'NULL'}),\n                ({'field_key': 'kinship_id', 'alias': 'kinship_user_id', 'null_value': 'NULL'}),\n                ({'field_key': 'link_text'}),\n                ({'field_key': 'link_url'}),\n                ({'field_key': 'logged_in_state'}),\n                ({'field_key': 'offer_category'}),\n                ({'field_key': 'offer_code'}),\n                ({'field_key': 'page_location'}),\n                ({'field_key': 'page_referrer'}),\n                ({'field_key': 'page_title'}),\n                ({'field_key': 'pagetype', 'alias': 'page_type'}),\n                ({'field_key': 'transaction_id', 'alias': 'event_params_transaction_id'})\n            ],\n            user_properties=[\n                ({'field_key': 'locale'})\n            ],\n            source_table='array_fields_serialized'\n        )\n    }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.apply_date_filters", "macro.poc_dbt_snowflake.create_extraction_query"]}, "description": "Macro to build an extracted GA4 model from a given source", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/ga4/ga4_create_extracted_model.yml", "arguments": [{"name": "source_table", "type": "reference", "description": "Source to create the extracted table from"}, {"name": "lookback_days_start", "type": "integer", "description": "Number of days to start lookback window during incremental loads \u2013 defaults to 7"}], "created_at": 1746823683.2723968, "supported_languages": null}, "macro.poc_dbt_snowflake.accumulate_by_date": {"name": "accumulate_by_date", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/gold/accumulate_by_date.sql", "original_file_path": "macros/gold/accumulate_by_date.sql", "unique_id": "macro.poc_dbt_snowflake.accumulate_by_date", "macro_sql": "{% macro accumulate_by_date(source_table\n                          , date_field\n                          , date_field_name\n                          , accumulated_field_name\n                          , filter_for_current=TRUE\n                          , extra_fields=[]\n                          , sum_fields=[]\n                          ) -%}\n    SELECT count(*) AS {{ accumulated_field_name }}\n           {% for item in sum_fields -%}\n         , SUM( {{ item }} ) AS total_{{item}}\n           {%- endfor -%}\n           {% for item in extra_fields -%}\n         , {{ item }}\n           {%- endfor -%}\n         , {{ date_field }} AS {{date_field_name}}\n         , {{ audit_columns() }}\n      FROM {{ ref( source_table ) }} AS st\n      {% if filter_for_current|as_bool -%}\n      WHERE is_current\n      {% endif %}\n      GROUP BY {{ date_field }}\n     {%- for item in extra_fields -%}\n       , {{ item }}\n     {%- endfor -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.audit_columns"]}, "description": "This macro generates the SQL to produce a table that accumulates a value by a given date field.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/gold/accumulate_by_date.yml", "arguments": [{"name": "source_table", "type": "string", "description": "The table from which to accumulate, i.e. dim_users"}, {"name": "date_field", "type": "string", "description": "The name of the field which the accumulation will be performed over, i.e. user_create_date"}, {"name": "date_field_name", "type": "string", "description": "A custom name for the date field"}, {"name": "accumulated_field_name", "type": "string", "description": "The name you want for the accumulated value i.e. num_users"}, {"name": "filter_for_current", "type": "boolean", "description": "Whether or not to use the silver table `is_current` flag to filter"}, {"name": "extra_fields", "type": "array", "description": "Extra fields for accumulation"}, {"name": "sum_fields", "type": "array", "description": "Analytical fields which you want to sum in the results"}], "created_at": 1746823683.2741513, "supported_languages": null}, "macro.poc_dbt_snowflake.accumulate_by_month": {"name": "accumulate_by_month", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/gold/accumulate_by_month.sql", "original_file_path": "macros/gold/accumulate_by_month.sql", "unique_id": "macro.poc_dbt_snowflake.accumulate_by_month", "macro_sql": "{% macro accumulate_by_month(source_table\n                           , date_field\n                           , date_field_name\n                           , accumulated_field_name\n                           , filter_for_current=TRUE\n                           , extra_fields=[]\n                           , sum_fields=[]\n                           ) -%}\n       SELECT count(*) AS {{accumulated_field_name}}\n            , extract(YEAR FROM {{date_field}}) || '-' || LPAD(extract(MONTH FROM {{date_field}}), 2, '0') AS {{date_field_name}}\n           {% for item in extra_fields -%}\n            , {{ item }}\n           {%- endfor -%}\n           {% for item in sum_fields -%}\n            , SUM( {{ item }} ) AS total_{{item}}\n           {%- endfor -%}\n            , {{ audit_columns() }}\n         FROM {{ ref(source_table) }} AS st\n         {% if filter_for_current|as_bool -%}\n         WHERE is_current\n         {% endif %}\n         GROUP BY {{date_field_name}}\n           {% for item in extra_fields -%}\n            , {{ item }}\n           {%- endfor -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.audit_columns"]}, "description": "This macro generates the SQL to produce a table that accumulates a value by a given date field.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/gold/accumulate_by_month.yml", "arguments": [{"name": "source_table", "type": "string", "description": "The table from which to accumulate, i.e. dim_users"}, {"name": "date_field", "type": "string", "description": "The name of the field which the accumulation will be performed over, i.e. user_create_date"}, {"name": "date_field_name", "type": "string", "description": "A custom name for the date field"}, {"name": "accumulated_field_name", "type": "string", "description": "The name you want for the accumulated value i.e. num_users"}, {"name": "filter_for_current", "type": "boolean", "description": "Whether or not to use the silver table `is_current` flag to filter"}, {"name": "extra_fields", "type": "array", "description": "Extra fields for accumulation"}, {"name": "sum_fields", "type": "array", "description": "Analytical fields which you want to sum in the results"}], "created_at": 1746823683.274719, "supported_languages": null}, "macro.poc_dbt_snowflake.demographic_cte": {"name": "demographic_cte", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/gold/demographic_cte.sql", "original_file_path": "macros/gold/demographic_cte.sql", "unique_id": "macro.poc_dbt_snowflake.demographic_cte", "macro_sql": "{% macro demographic_cte(name, demographic_type, is_first=FALSE, demographic_source='dim_user_demographics') -%}\n    {% if is_first|as_bool -%}\n       WITH {{ name }}\n    {% else %}\n       , {{ name }}\n    {% endif %}\n     AS (\n          SELECT dud.kinship_user_id, dud.demographic_detail AS {{ demographic_type }}\n          FROM {{ ref(demographic_source) }} AS dud\n          WHERE dud.demographic_type = '{{ demographic_type }}'\n    )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "This macro generates a CTE from dim_user_demographics for a specified attribute type.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/gold/demographic_cte.yml", "arguments": [{"name": "name", "type": "string", "description": "Custom name for the CTE to be defined"}, {"name": "demographic_type", "type": "string", "description": "The attribute name to look up in the demographics"}, {"name": "is_first", "type": "boolean", "description": "Indication of if this CTE should be considered the First one (requiring WITH keyword)"}, {"name": "demographic_source", "type": "string", "description": "Table name (dbt reference name) for where the demographic data is stored, defaults to 'dim_user_demographics'"}], "created_at": 1746823683.2767494, "supported_languages": null}, "macro.poc_dbt_snowflake.list_tables": {"name": "list_tables", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/metadata/list_tables.sql", "original_file_path": "macros/metadata/list_tables.sql", "unique_id": "macro.poc_dbt_snowflake.list_tables", "macro_sql": "{% macro list_tables() %}\n\n{% set query %}\n        SELECT \n            table_schema || '.' || table_name AS full_table_name,\n            table_name, \n            table_schema\n        FROM information_schema.tables\n        WHERE table_schema NOT IN ('information_schema', 'pg_catalog')\n        ORDER BY table_schema, table_name\n{% endset %}\n\n{{ return(query) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "This macro returns a query on the information schema and returns all tables in the database.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/metadata/schema.yml", "arguments": [], "created_at": 1746823683.2771254, "supported_languages": null}, "macro.poc_dbt_snowflake.log_database_tables": {"name": "log_database_tables", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/metadata/log_database_tables.sql", "original_file_path": "macros/metadata/log_database_tables.sql", "unique_id": "macro.poc_dbt_snowflake.log_database_tables", "macro_sql": "{% macro log_database_tables() %}\n{#\nThis macro runs the list_tables query and logs the result to dbt logs: \n`dbt run-operation log_database_tables`\n#}\n    {% set query_result = list_tables() %}\n    {% set result = run_query(query_result) %}\n    \n    {# Log the result to the dbt logs #}\n    {% if result %}\n        {% for row in result %}\n            {% do log( '{\"table_path\": \"' ~ row[0] ~ '\"}', info=True) %}\n        {% endfor %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.list_tables", "macro.dbt.run_query"]}, "description": "This macro runs the query returned by `list_tables` logs the formatted result to dbt logs.\nIt can be invoked with `dbt run-operation log_database_tables` to log all the tables in your database.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/metadata/schema.yml", "arguments": [], "created_at": 1746823683.2774076, "supported_languages": null}, "macro.poc_dbt_snowflake.apple_json_get": {"name": "apple_json_get", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/silver/apple_json_get.sql", "original_file_path": "macros/silver/apple_json_get.sql", "unique_id": "macro.poc_dbt_snowflake.apple_json_get", "macro_sql": "{% macro apple_json_get(json_col, secondary_key, primary_key='transaction') -%}\n\n    CASE WHEN JSON_EXTRACT_PATH_TEXT(\n                  {{ json_col }}\n                  , 'data'\n                  , '{{ primary_key }}'\n                  , '{{ secondary_key }}'\n              ) = '' THEN NULL\n         ELSE JSON_EXTRACT_PATH_TEXT(\n                  {{ json_col }}\n                  , 'data'\n                  , '{{ primary_key }}'\n                  , '{{ secondary_key }}'\n              )\n     END\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0344653, "supported_languages": null}, "macro.poc_dbt_snowflake.create_change_flags": {"name": "create_change_flags", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/silver/create_change_flags.sql", "original_file_path": "macros/silver/create_change_flags.sql", "unique_id": "macro.poc_dbt_snowflake.create_change_flags", "macro_sql": "{% macro create_change_flags(flag_cols) %}\n    {% for flag_col in flag_cols %}\n        CASE WHEN {{ flag_col + '_lag' }} IS NULL THEN FALSE\n             WHEN {{ flag_col + '_lag'}} <> {{ flag_col }} THEN TRUE\n             ELSE FALSE\n         END AS {{ flag_col + '_change_flag' }}\n        {% if not loop.last %}\n            ,\n        {% endif %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Macro to create change flag columns for given fields. It marks with a true boolean whether the current value of a field is different to the previous value along some grouping logic (e.g. by user). It is meant to be used in combination with the create_lag_cols macro that drives the above grouping logic.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/silver/create_change_flags.yml", "arguments": [{"name": "flag_cols", "type": "array", "description": "List of column names to create a change flag column for."}], "created_at": 1746823683.2780054, "supported_languages": null}, "macro.poc_dbt_snowflake.create_lag_cols": {"name": "create_lag_cols", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/silver/create_lag_cols.sql", "original_file_path": "macros/silver/create_lag_cols.sql", "unique_id": "macro.poc_dbt_snowflake.create_lag_cols", "macro_sql": "{% macro create_lag_cols(lag_cols, partition_col, order_col, asc_desc='ASC') %}\n    {% for lag_col in lag_cols %}\n        LAG({{ lag_col }}) OVER (\n            PARTITION BY {{ partition_col }}\n                ORDER BY {{ order_col }} {{ asc_desc }}\n        ) AS {{ lag_col + '_lag' }}\n        {% if not loop.last %}\n            ,\n        {% endif %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Macro that creates lagged value columns for a given list of fields.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/silver/create_lag_cols.yml", "arguments": [{"name": "lag_cols", "type": "array", "description": "List of column names to create a lagged value column for."}, {"name": "partition_col", "type": "string", "description": "Name of the column to partition the lagged values by \u2013 e.g. 'kinship_user_id'."}, {"name": "order_col", "type": "string", "description": "Name of the column to order by the lagged values by \u2013 e.g. 'source_updated_ts'."}, {"name": "asc_desc", "type": "string", "description": "Whether the ordering should be ascending ('ASC') or descending ('DESC'). Defaults to 'ASC'."}], "created_at": 1746823683.2792873, "supported_languages": null}, "macro.poc_dbt_snowflake.combined_update_time_col": {"name": "combined_update_time_col", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/silver/ranked_data_columns.sql", "original_file_path": "macros/silver/ranked_data_columns.sql", "unique_id": "macro.poc_dbt_snowflake.combined_update_time_col", "macro_sql": "{%\n    macro combined_update_time_col(\n              scd_key_col,\n              primary_update_time_col,\n              secondary_update_time_col,\n              combined_ts_col_name\n    )\n-%}\n    {% if secondary_update_time_col != '' %}\n        CASE WHEN SUM(1) OVER (\n                      PARTITION BY {{ scd_key_col }}\n                                 , {{ primary_update_time_col }}\n                  ) > 1 THEN {{ secondary_update_time_col }}\n             ELSE {{ primary_update_time_col }}\n         END AS {{ combined_ts_col_name }}\n    {% else %}\n        {{ primary_update_time_col }} AS {{ combined_ts_col_name }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Combines the primary and secondary update time sources to provide a unique update time in case the primary update time source overlaps between records.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/silver/ranked_data_columns.yml", "arguments": [{"name": "scd_key_col", "type": "string", "description": "Name of the column with the identifier for an entity. It usually is the natural key \u2013 e.g. user ID for users"}, {"name": "primary_update_time_col", "type": "string", "description": "Name of the column that should be used as a primary source for record update times"}, {"name": "secondary_update_time_col", "type": "string", "description": "Name of the column that should be used as a fallback source for record update times \u2013 in case the primary source is not sufficient i.e. might overlap between records."}, {"name": "combined_ts_col_name", "type": "string", "description": "The name that should be given to the combined update timestamp column (the primary source if unique, the secondary if not)."}], "created_at": 1746823683.2812102, "supported_languages": null}, "macro.poc_dbt_snowflake.incremental_row_num_col": {"name": "incremental_row_num_col", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/silver/ranked_data_columns.sql", "original_file_path": "macros/silver/ranked_data_columns.sql", "unique_id": "macro.poc_dbt_snowflake.incremental_row_num_col", "macro_sql": "{%\n    macro incremental_row_num_col(\n              scd_key_col,\n              primary_update_time_col,\n              secondary_update_time_col,\n              row_num_col_name\n    )\n-%}\n\n    CASE WHEN NOT {{ scd_key_col }} IN (\n                  SELECT {{ scd_key_col }} FROM {{ this }}\n              ) THEN ROW_NUMBER() OVER (\n                         PARTITION BY {{ scd_key_col }}\n                         ORDER BY {{ primary_update_time_col }} ASC\n                         {%- if secondary_update_time_col != '' -%}\n                             , {{ secondary_update_time_col }} ASC\n                         {%- endif -%}\n                     )\n         ELSE 0\n     END AS {{ row_num_col_name }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Handles incremental loads' ranking logic.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/silver/ranked_data_columns.yml", "arguments": [{"name": "scd_key_col", "type": "string", "description": "Name of the column with the identifier for an entity. It usually is the natural key \u2013 e.g. user ID for users"}, {"name": "primary_update_time_col", "type": "string", "description": "Name of the column that should be used as a primary source for record update times"}, {"name": "secondary_update_time_col", "type": "string", "description": "Name of the column that should be used as a fallback source for record update times \u2013 in case the primary source is not sufficient i.e. might overlap between records."}, {"name": "row_num_col_name", "type": "string", "description": "Name to be given to the ranked row number column."}], "created_at": 1746823683.2816212, "supported_languages": null}, "macro.poc_dbt_snowflake.initial_row_num_col": {"name": "initial_row_num_col", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/silver/ranked_data_columns.sql", "original_file_path": "macros/silver/ranked_data_columns.sql", "unique_id": "macro.poc_dbt_snowflake.initial_row_num_col", "macro_sql": "{%\n    macro initial_row_num_col(\n              scd_key_col,\n              primary_update_time_col,\n              secondary_update_time_col,\n              row_num_col_name\n    )\n-%}\n\n    ROW_NUMBER() OVER (\n        PARTITION BY {{ scd_key_col }}\n            ORDER BY {{ primary_update_time_col }} ASC\n            {%- if secondary_update_time_col != '' -%}\n                , {{ secondary_update_time_col }} ASC\n            {%- endif -%}\n    ) AS {{ row_num_col_name }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Handles the initial load's ranking logic.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/silver/ranked_data_columns.yml", "arguments": [{"name": "scd_key_col", "type": "string", "description": "Name of the column with the identifier for an entity. It usually is the natural key \u2013 e.g. user ID for users"}, {"name": "primary_update_time_col", "type": "string", "description": "Name of the column that should be used as a primary source for record update times"}, {"name": "secondary_update_time_col", "type": "string", "description": "Name of the column that should be used as a fallback source for record update times \u2013 in case the primary source is not sufficient i.e. might overlap between records."}, {"name": "row_num_col_name", "type": "string", "description": "Name to be given to the ranked row number column."}], "created_at": 1746823683.2820168, "supported_languages": null}, "macro.poc_dbt_snowflake.ranked_data_columns": {"name": "ranked_data_columns", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/silver/ranked_data_columns.sql", "original_file_path": "macros/silver/ranked_data_columns.sql", "unique_id": "macro.poc_dbt_snowflake.ranked_data_columns", "macro_sql": "{%\n    macro ranked_data_columns(\n              scd_key_col,\n              primary_update_time_col,\n              secondary_update_time_col='',\n              combined_ts_col_name='combined_update_ts',\n              row_num_col_name='row_num'\n    )\n-%}\n    {{ combined_update_time_col(\n           scd_key_col=scd_key_col,\n           primary_update_time_col=primary_update_time_col,\n           secondary_update_time_col=secondary_update_time_col,\n           combined_ts_col_name=combined_ts_col_name\n       )\n    }}\n    {% if is_incremental() %}\n        , {{\n              incremental_row_num_col(\n                  scd_key_col=scd_key_col,\n                  primary_update_time_col=primary_update_time_col,\n                  secondary_update_time_col=secondary_update_time_col,\n                  row_num_col_name=row_num_col_name\n              )\n          }}\n    {% else %}\n        , {{\n              initial_row_num_col(\n                  scd_key_col=scd_key_col,\n                  primary_update_time_col=primary_update_time_col,\n                  secondary_update_time_col=secondary_update_time_col,\n                  row_num_col_name=row_num_col_name\n              )\n          }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.combined_update_time_col", "macro.dbt.is_incremental", "macro.poc_dbt_snowflake.incremental_row_num_col", "macro.poc_dbt_snowflake.initial_row_num_col"]}, "description": "Adds the row number and combined update timestamp column to the ranked data, handling the incremental logic.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/silver/ranked_data_columns.yml", "arguments": [{"name": "scd_key_col", "type": "string", "description": "Name of the column with the identifier for an entity. It usually is the natural key \u2013 e.g. user ID for users"}, {"name": "primary_update_time_col", "type": "string", "description": "Name of the column that should be used as a primary source for record update times"}, {"name": "secondary_update_time_col", "type": "string", "description": "Name of the column that should be used as a fallback source for record update times \u2013 in case the primary source is not sufficient i.e. might overlap between records. Defaults to an empty string."}, {"name": "combined_ts_col_name", "type": "string", "description": "The name that should be given to the combined update timestamp column (the primary source if unique, the secondary if not). Defaults to 'combined_update_ts'."}, {"name": "row_num_col_name", "type": "string", "description": "Name to be given to the ranked row number column. Defaults to 'row_num'."}], "created_at": 1746823683.2807798, "supported_languages": null}, "macro.poc_dbt_snowflake.valid_from_col": {"name": "valid_from_col", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/silver/scd_time_columns.sql", "original_file_path": "macros/silver/scd_time_columns.sql", "unique_id": "macro.poc_dbt_snowflake.valid_from_col", "macro_sql": "{%\n    macro valid_from_col(\n        initial_record_time_col,\n        update_time_col,\n        row_num_col='row_num'\n    )\n-%}\n\n    CASE WHEN {{ row_num_col }} = 1 THEN {{ initial_record_time_col }}\n         ELSE {{ update_time_col }}\n     END AS valid_from\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Macro to create the valid_from column in a SCD2 model", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/silver/scd_time_columns.yml", "arguments": [{"name": "initial_record_time_col", "type": "string", "description": "Name of the datetime column that marks the start of the validity of the first record"}, {"name": "update_time_col", "type": "string", "description": "Name of the datetime column that marks the start of the validity of consequent records"}, {"name": "row_num_col", "type": "string", "description": "Name of the column with the row numbers for a given entity. Defaults to 'row_num'"}], "created_at": 1746823683.341873, "supported_languages": null}, "macro.poc_dbt_snowflake.valid_to_col": {"name": "valid_to_col", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/silver/scd_time_columns.sql", "original_file_path": "macros/silver/scd_time_columns.sql", "unique_id": "macro.poc_dbt_snowflake.valid_to_col", "macro_sql": "{% macro valid_to_col(scd_key_col, update_time_col) -%}\n\n    NVL(\n        LEAD({{ update_time_col }}) OVER (\n            PARTITION BY {{ scd_key_col }} ORDER BY {{ update_time_col }} ASC\n        ), CAST('4444-04-04' AS TIMESTAMP)\n    )AS valid_to\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Macro to create the valid_to column in a SCD2 model", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/silver/scd_time_columns.yml", "arguments": [{"name": "scd_key_col", "type": "string", "description": "Name of the column with the identifier for an entity. It usually is the natural key \u2013 e.g. user ID for users"}, {"name": "update_time_col", "type": "string", "description": "Name of the datetime column that marks the update of a record"}], "created_at": 1746823683.3422484, "supported_languages": null}, "macro.poc_dbt_snowflake.is_current_col": {"name": "is_current_col", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/silver/scd_time_columns.sql", "original_file_path": "macros/silver/scd_time_columns.sql", "unique_id": "macro.poc_dbt_snowflake.is_current_col", "macro_sql": "{% macro is_current_col(scd_key_col, update_time_col) -%}\n\n    CASE WHEN LEAD({{ scd_key_col }}) OVER (\n                  PARTITION BY {{ scd_key_col }}\n                      ORDER BY {{ update_time_col }} ASC\n              ) IS NULL THEN TRUE\n         ELSE FALSE\n     END AS is_current\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Macro to create the is_current flag in a SCD2 model", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/silver/scd_time_columns.yml", "arguments": [{"name": "scd_key_col", "type": "string", "description": "Name of the column with the identifier for an entity. It usually is the natural key \u2013 e.g. user ID for users"}, {"name": "update_time_col", "type": "string", "description": "Name of the datetime column that marks the update of a record"}], "created_at": 1746823683.3426118, "supported_languages": null}, "macro.poc_dbt_snowflake.scd_time_columns": {"name": "scd_time_columns", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/silver/scd_time_columns.sql", "original_file_path": "macros/silver/scd_time_columns.sql", "unique_id": "macro.poc_dbt_snowflake.scd_time_columns", "macro_sql": "{%\n    macro scd_time_columns(\n        scd_key_col,\n        initial_record_time_col,\n        update_time_col='combined_update_ts',\n        row_num_col='row_num'\n    )\n-%}\n\n    {{\n        valid_from_col(\n            initial_record_time_col=initial_record_time_col,\n            update_time_col=update_time_col,\n            row_num_col=row_num_col\n        )\n    }}\n    , {{\n          valid_to_col(\n              scd_key_col=scd_key_col,\n              update_time_col=update_time_col\n          )\n      }}\n    , {{\n          is_current_col(\n              scd_key_col=scd_key_col,\n              update_time_col=update_time_col\n          )\n      }}\n    , {{ row_num_col }} = 1 AS first_record_flg\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.valid_from_col", "macro.poc_dbt_snowflake.valid_to_col", "macro.poc_dbt_snowflake.is_current_col"]}, "description": "Macro to add the valid_from, valid_to columns and the is_current and is_first_record flags in a SCD2 model.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/silver/scd_time_columns.yml", "arguments": [{"name": "scd_key_col", "type": "string", "description": "Name of the column with the identifier for an entity. It usually is the natural key \u2013 e.g. user ID for users"}, {"name": "initial_record_time_col", "type": "string", "description": "Name of the datetime column that marks the start of the validity of the first record"}, {"name": "update_time_col", "type": "string", "description": "Name of the datetime column that marks the start of the validity of consequent records / any update to the entity tracked. Defaults to 'combined_update_ts' to match the ranked_data_columns macro."}, {"name": "row_num_col", "type": "string", "description": "Name of the column with the row numbers for a given entity. Defaults to 'row_num'"}], "created_at": 1746823683.3414514, "supported_languages": null}, "macro.poc_dbt_snowflake.fact_user_journey_data_from_ga4_table": {"name": "fact_user_journey_data_from_ga4_table", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/silver/user_journey_data_from_ga4_table.sql", "original_file_path": "macros/silver/user_journey_data_from_ga4_table.sql", "unique_id": "macro.poc_dbt_snowflake.fact_user_journey_data_from_ga4_table", "macro_sql": "{%\n    macro fact_user_journey_data_from_ga4_table(\n              ga4_property_name,\n              extracted_table,\n              base_table,\n              lookback_days_start=7\n          )\n-%}\n\n\n\n       SELECT e.hash_key AS user_journey_event_id\n            , a.user_activity_id\n            , CAST('{{ ga4_property_name }}' AS VARCHAR) AS ga4_property_name\n            , e.kinship_user_id\n            , e.user_pseudo_id\n            , CAST(e.ga_session_id AS BIGINT) AS ga_session_id\n            , CAST(e.ga_session_number AS INTEGER) AS ga_session_number\n            , e.event_date\n            , e.event_timestamp AS event_ts\n            , e.batch_event_index\n            , e.batch_ordering_id\n            , e.batch_page_id\n            , e.event_params_transaction_id\n            , e.campaign\n            , e.offer_category\n            , e.offer_code\n            , e.logged_in_state\n            , e.link_text\n            , e.link_url\n            , JSON_EXTRACT_PATH_TEXT(e.ecommerce, 'transaction_id', TRUE) AS ecommerce_transaction_id\n            , SPLIT_PART(e.page_location, '?', 2) AS content_context\n            , SPLIT_PART(e.page_referrer, '?', 1) AS page_referrer\n            , SPLIT_PART(e.page_referrer, '?', 2) AS page_referrer_context\n            , e.stream_id\n            , e.locale\n            , c.content_id\n            , t.traffic_source_id\n            , e.etl_updated_ts AS etl_watermark_ts\n            , e.hash_key\n            , b.is_test\n            , {{ audit_columns() }}\n         FROM {{ extracted_table }} AS e\n    LEFT JOIN {{ base_table }} AS b\n           ON e.hash_key = b.hash_key\n    LEFT JOIN {{ ref('dim_user_activities') }} AS a\n           ON e.event_name = a.user_activity\n    LEFT JOIN {{ ref('dim_content') }} AS c\n           ON e.content_type = c.content_type\n              AND SPLIT_PART(e.page_location, '?', 1) = c.page_location\n              AND e.page_title = c.page_title\n    LEFT JOIN {{ ref('dim_traffic_source') }} AS t\n           ON NVL(JSON_EXTRACT_PATH_TEXT(e.traffic_source, 'medium', TRUE), '') = t.traffic_source_medium\n              AND NVL(JSON_EXTRACT_PATH_TEXT(e.traffic_source, 'name', TRUE), '') = t.traffic_source_name\n              AND NVL(JSON_EXTRACT_PATH_TEXT(e.traffic_source, 'source', TRUE), '') = t.traffic_source_source\n        WHERE TRUE\n            {{ apply_date_filters('e.event_date', lookback_days_start=lookback_days_start) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.audit_columns", "macro.poc_dbt_snowflake.apply_date_filters"]}, "description": "Macro that selects the appropriate columns for the fact_user_journey_events table from given GA4 bronze layer sources", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/silver/user_journey_data_from_ga4_table.yml", "arguments": [{"name": "ga4_property_name", "type": "string", "description": "GA4 property name \u2013 e.g. 'Kinship'"}, {"name": "extracted_table", "type": "reference", "description": "The extracted GA4 table in the bronze layer"}, {"name": "base_table", "type": "reference", "description": "The base GA4 table in the bronze layer"}, {"name": "lookback_days_start", "type": "integer", "description": "Number of days where to start the lookback window for incremental runs"}], "created_at": 1746823683.3438027, "supported_languages": null}, "macro.poc_dbt_snowflake.dim_content_from_ga4_table": {"name": "dim_content_from_ga4_table", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/silver/user_journey_data_from_ga4_table.sql", "original_file_path": "macros/silver/user_journey_data_from_ga4_table.sql", "unique_id": "macro.poc_dbt_snowflake.dim_content_from_ga4_table", "macro_sql": "{% macro dim_content_from_ga4_table(extracted_table, lookback_days_start=7) -%}\n\n    SELECT content_type\n         , SPLIT_PART(page_location, '?', 1) AS page_location\n         , page_title\n      FROM {{ extracted_table }}\n     WHERE content_type <> ''\n        OR page_location <> ''\n        OR page_title <> ''\n         {{ apply_date_filters('event_date', lookback_days_start=lookback_days_start) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.apply_date_filters"]}, "description": "Macro to select the source table for the dim_content model given a GA4 source", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/silver/user_journey_data_from_ga4_table.yml", "arguments": [{"name": "extracted_table", "type": "reference", "description": "The extracted GA4 table in the bronze layer"}, {"name": "lookback_days_start", "type": "integer", "description": "Number of days where to start the lookback window for incremental runs"}], "created_at": 1746823683.344169, "supported_languages": null}, "macro.poc_dbt_snowflake.dim_traffic_source_from_ga4_table": {"name": "dim_traffic_source_from_ga4_table", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/silver/user_journey_data_from_ga4_table.sql", "original_file_path": "macros/silver/user_journey_data_from_ga4_table.sql", "unique_id": "macro.poc_dbt_snowflake.dim_traffic_source_from_ga4_table", "macro_sql": "{% macro dim_traffic_source_from_ga4_table(extracted_table, lookback_days_start=7) -%}\n\n    SELECT NVL(JSON_EXTRACT_PATH_TEXT(traffic_source, 'name', TRUE), '') AS traffic_source_name\n         , NVL(JSON_EXTRACT_PATH_TEXT(traffic_source, 'medium', TRUE), '') AS traffic_source_medium\n         , NVL(JSON_EXTRACT_PATH_TEXT(traffic_source, 'source', TRUE), '') AS traffic_source_source\n      FROM {{ extracted_table }}\n     WHERE TRUE\n         {{ apply_date_filters('event_date', lookback_days_start=7) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.poc_dbt_snowflake.apply_date_filters"]}, "description": "Macro to select the source table for the dim_traffic_source model given a GA4 source", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/silver/user_journey_data_from_ga4_table.yml", "arguments": [{"name": "extracted_table", "type": "reference", "description": "The extracted GA4 table in the bronze layer"}, {"name": "lookback_days_start", "type": "integer", "description": "Number of days where to start the lookback window for incremental runs"}], "created_at": 1746823683.3445282, "supported_languages": null}, "macro.poc_dbt_snowflake.mock_ga4_untested_columns": {"name": "mock_ga4_untested_columns", "resource_type": "macro", "package_name": "poc_dbt_snowflake", "path": "macros/test_helpers/mock_ga4_untested_columns.sql", "original_file_path": "macros/test_helpers/mock_ga4_untested_columns.sql", "unique_id": "macro.poc_dbt_snowflake.mock_ga4_untested_columns", "macro_sql": "{% macro mock_ga4_untested_columns() -%}\n      NULL as app_info\n    , NULL as batch_event_index\n    , NULL as batch_ordering_id\n    , NULL as batch_page_id\n    , NULL as collected_traffic_source\n    , NULL as device\n    , NULL as ecommerce\n    , NULL as event_bundle_sequence_id\n    , NULL as event_dimensions\n    , NULL as event_name\n    , NULL as event_params\n    , NULL as event_previous_timestamp\n    , NULL as event_server_timestamp_offset\n    , NULL as event_timestamp\n    , NULL as event_value_in_usd\n    , NULL as geo\n    , NULL as is_active_user\n    , NULL as items\n    , NULL as partition_0\n    , NULL as platform\n    , NULL as privacy_info\n    , NULL as publisher\n    , NULL as session_traffic_source_last_click\n    , NULL as stream_id\n    , NULL as traffic_source\n    , NULL as user_first_touch_timestamp\n    , NULL as user_id\n    , NULL as user_ltv\n    , NULL as user_properties\n    , NULL as user_pseudo_id\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "Unit tests require all columns to be mocked. This macro mocks the untested columns for reuse in simplified model and fixtures", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "poc_dbt_snowflake://macros/test_helpers/mock_ga4_untested_columns.yml", "arguments": [], "created_at": 1746823683.3449104, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0421922, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.042492, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation.render() }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation.render() }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0433042, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_object_metadata": {"name": "snowflake__show_object_metadata", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_object_metadata", "macro_sql": "{% macro snowflake__show_object_metadata(relation) %}\n  {%- set sql -%}\n    show objects in {{ relation.include(identifier=False) }} starts with '{{ relation.identifier }}' limit 1\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0436249, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0442302, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.044707, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} table {{ relation.render() }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0450373, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation.render() }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0454102, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0461767, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0463843, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.04656, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0470393, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0472262, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.047722, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0489442, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0492084, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation.render() }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0494945, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.049793, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0499191, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0508482, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0512478, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0514376, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0515678, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0516567, "supported_languages": null}, "macro.dbt_snowflake.snowflake__catalog_equals": {"name": "snowflake__catalog_equals", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__catalog_equals", "macro_sql": "{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0518327, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0521038, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0527153, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata.sql", "original_file_path": "macros/metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0533426, "supported_languages": null}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0535707, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0538685, "supported_languages": null}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0551884, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0565588, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0568018, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0572956, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0575895, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert and microbatch strategies can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy in [\"delete+insert\", \"microbatch\"] and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `\" ~ strategy ~ \"` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\", \"insert_overwrite\") %}\n    {{ return(\"view\") }}\n  {% elif strategy in [\"delete+insert\", \"microbatch\"] and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.059832, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n\n  {%- set identifier = this.name -%}\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=catalog_relation.table_format\n  ) -%}\n\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n    {% if target_relation.needs_to_drop(existing_relation) %}\n      {{ drop_relation_if_exists(existing_relation) }}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif target_relation.table_format != existing_relation.table_format %}\n    {% do exceptions.raise_compiler_error(\n        \"Unable to update the incremental model `\" ~ target_relation.identifier ~ \"` from `\" ~ existing_relation.table_format ~ \"` to `\" ~ target_relation.table_format ~ \"` due to Snowflake limitation. Please execute with --full-refresh to drop the table and recreate in the new catalog.'\"\n      )\n    %}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.drop_relation_if_exists", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.063839, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0640361, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0657876, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.066103, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0664802, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set existing_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=catalog_relation.table_format\n   ) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if target_relation.needs_to_drop(existing_relation) %}\n    {{ drop_relation_if_exists(existing_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0681186, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0684953, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0690658, "supported_languages": ["sql"]}, "macro.dbt_snowflake.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental/insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) -%}\n  {{ adapter.dispatch('insert_overwrite_get_sql', 'dbt')(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"]) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__insert_overwrite_get_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0696683, "supported_languages": null}, "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql": {"name": "snowflake__insert_overwrite_get_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental/insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql", "macro_sql": "{% macro snowflake__insert_overwrite_get_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dml -%}\n\n    {%- set overwrite_columns = config.get('overwrite_columns', []) -%}\n\n    {{ config.get('sql_header', '') }}\n\n    {% set target_columns_list = '(' ~ ', '.join(overwrite_columns) ~ ')' if overwrite_columns else '' %}\n    {% set source_query_columns_list = ', '.join(overwrite_columns) if overwrite_columns else '*' %}\n    insert overwrite into {{ target.render() }} {{ target_columns_list }}\n        select {{ source_query_columns_list }}\n        from {{ source.render() }}\n\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.070371, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0715806, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0718958, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0721552, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0723696, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql": {"name": "snowflake__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql", "macro_sql": "{% macro snowflake__get_incremental_microbatch_sql(arg_dict) %}\n    {%- set target = arg_dict[\"target_relation\"] -%}\n    {%- set source = arg_dict[\"temp_relation\"] -%}\n    {%- set dest_columns = arg_dict[\"dest_columns\"] -%}\n    {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n\n    {#-- Add additional incremental_predicates to filter for batch --#}\n    {% if model.batch and model.batch.event_time_start -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"')\") %}\n    {% endif %}\n    {% if model.batch and model.batch.event_time_end -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"')\") %}\n    {% endif %}\n    {% do arg_dict.update({'incremental_predicates': incremental_predicates}) %}\n\n    delete from {{ target }} DBT_INTERNAL_TARGET\n    where (\n    {% for predicate in incremental_predicates %}\n        {%- if not loop.first %}and {% endif -%} {{ predicate }}\n    {% endfor %}\n    );\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0736086, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata/list_relations_without_caching.sql", "original_file_path": "macros/metadata/list_relations_without_caching.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10000, max_results_per_iter=10000) %}\n\n    {%- if schema_relation is string -%}\n        {%- set schema = schema_relation -%}\n    {%- else -%}\n        {%- set schema = schema_relation.include(identifier=False) -%}\n    {%- endif -%}\n\n    {%- set max_results_per_iter = adapter.config.flags.get('list_relations_per_page', max_results_per_iter) -%}\n    {%- set max_iter = adapter.config.flags.get('list_relations_page_limit', max_iter) -%}\n    {%- set too_many_relations_msg -%}\n        dbt is currently configured to list a maximum of {{ max_results_per_iter * max_iter }} objects per schema.\n        {{ schema }} exceeds this limit. If this is expected, you may configure this limit\n        by setting list_relations_per_page and list_relations_page_limit in your project flags.\n        It is recommended to start by increasing list_relations_page_limit.\n    {%- endset -%}\n\n    {%- set paginated_state = namespace(paginated_results=[], watermark=none) -%}\n\n    {%- do run_query('alter session set quoted_identifiers_ignore_case = false;') -%}\n\n    {#-\n        loop an extra time to catch the breach of max iterations\n        Note: while range is 0-based, loop.index starts at 1\n    -#}\n    {%- for _ in range(max_iter + 1) -%}\n\n        {#-\n            raise a warning and break if we still didn't exit and we're beyond the max iterations limit\n            Note: while range is 0-based, loop.index starts at 1\n        -#}\n        {%- if loop.index == max_iter + 1 -%}\n            {%- do exceptions.warn(too_many_relations_msg) -%}\n            {%- break -%}\n        {%- endif -%}\n\n        {%- set show_objects_sql = snowflake__show_objects_sql(schema, max_results_per_iter, paginated_state.watermark) -%}\n        {%- set paginated_result = run_query(show_objects_sql) -%}\n        {%- do paginated_state.paginated_results.append(paginated_result) -%}\n        {%- set paginated_state.watermark = paginated_result.columns.get('name').values()[-1] -%}\n\n        {#- we got less results than the max_results_per_iter (includes 0), meaning we reached the end -#}\n        {%- if (paginated_result | length) < max_results_per_iter -%}\n            {%- break -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- do run_query('alter session unset quoted_identifiers_ignore_case;') -%}\n\n    {#- grab the first table in the paginated results to access the `merge` method -#}\n    {%- set agate_table = paginated_state.paginated_results[0] -%}\n    {%- do return(agate_table.merge(paginated_state.paginated_results)) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__show_objects_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0756524, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_objects_sql": {"name": "snowflake__show_objects_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata/list_relations_without_caching.sql", "original_file_path": "macros/metadata/list_relations_without_caching.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_objects_sql", "macro_sql": "{% macro snowflake__show_objects_sql(schema, max_results_per_iter=10000, watermark=none) %}\n\n{%- set _sql -%}\nshow objects in {{ schema }}\n    limit {{ max_results_per_iter }}\n    {% if watermark is not none -%} from '{{ watermark }}' {%- endif %}\n;\n\n{#- gated for performance reasons - if you don't want iceberg, you shouldn't pay the latency penalty -#}\n{%- if adapter.behavior.enable_iceberg_materializations.no_warn %}\nselect all_objects.*, all_tables.IS_ICEBERG as \"is_iceberg\"\nfrom table(result_scan(last_query_id(-1))) all_objects\nleft join {{ schema.database }}.INFORMATION_SCHEMA.tables as all_tables\non all_tables.table_name = all_objects.\"name\"\nand all_tables.table_schema = all_objects.\"schema_name\"\nand all_tables.table_catalog = all_objects.\"database_name\"\n;\n{%- endif -%}\n\n{%- endset -%}\n\n{%- do return(_sql) -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.076166, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0765321, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_backup_sql": {"name": "snowflake__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_backup_sql", "macro_sql": "{%- macro snowflake__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(relation, backup_relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0768812, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0772128, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.077477, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql": {"name": "snowflake__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql", "macro_sql": "{%- macro snowflake__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(intermediate_relation, relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.077754, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.078144, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/alter.sql", "original_file_path": "macros/relations/dynamic_table/alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0791037, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n        {{ snowflake__create_dynamic_table_info_schema_sql(dynamic_table, relation, compiled_code) }}\n    {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n        {{ snowflake__create_dynamic_table_built_in_sql(dynamic_table, relation, compiled_code) }}\n    {%- else -%}\n        {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql", "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0799913, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql": {"name": "snowflake__create_dynamic_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql", "macro_sql": "{% macro snowflake__create_dynamic_table_info_schema_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that creates an info schema dynamic table\n\n    Implements CREATE DYNAMIC TABLE:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic info schema table.\n-#}\n\ncreate dynamic table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0804949, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql": {"name": "snowflake__create_dynamic_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql", "macro_sql": "{% macro snowflake__create_dynamic_table_built_in_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that creates a dynamic iceberg table\n\n    Implements CREATE DYNAMIC ICEBERG TABLE (Snowflake as the Iceberg catalog):\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\ncreate dynamic iceberg table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'SNOWFLAKE'  -- required, and always SNOWFLAKE for built-in Iceberg tables\n    base_location = '{{ catalog_relation.base_location }}'\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0810397, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n{#-\n    Get all relevant metadata about a dynamic table\n\n    Args:\n    - relation: SnowflakeRelation - the relation to describe\n    Returns:\n        A dictionary with one or two entries depending on whether iceberg is enabled:\n        - dynamic_table: the metadata associated with an info schema dynamic table\n-#}\n    {%- set _dynamic_table_sql -%}\n    alter session set quoted_identifiers_ignore_case = false;\n    show dynamic tables\n        like '{{ relation.identifier }}'\n        in schema {{ relation.database }}.{{ relation.schema }}\n    ;\n    select\n        \"name\",\n        \"schema_name\",\n        \"database_name\",\n        \"text\",\n        \"target_lag\",\n        \"warehouse\",\n        \"refresh_mode\"\n    from table(result_scan(last_query_id()))\n    ;\n    {%- endset -%}\n\n    {%- set results = {'dynamic_table': run_query(_dynamic_table_sql)} -%}\n\n    alter session unset quoted_identifiers_ignore_case;\n\n    {%- do return(results) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0815978, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/drop.sql", "original_file_path": "macros/relations/dynamic_table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0817628, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/refresh.sql", "original_file_path": "macros/relations/dynamic_table/refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.081979, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) -%}\n{#-\n    Produce DDL that replaces a dynamic table with a new dynamic table\n\n    Args:\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Globals:\n    - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n    Returns:\n        A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {%- if catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n        {{ snowflake__replace_dynamic_table_info_schema_sql(dynamic_table, relation, sql) }}\n    {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n        {{ snowflake__replace_dynamic_table_built_in_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql", "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0829048, "supported_languages": null}, "macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql": {"name": "snowflake__replace_dynamic_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql", "macro_sql": "{% macro snowflake__replace_dynamic_table_info_schema_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that replaces an info schema dynamic table with a new info schema dynamic table\n\n    This follows the syntax outlined here:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic info schema table.\n-#}\n\ncreate or replace dynamic table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0832896, "supported_languages": null}, "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql": {"name": "snowflake__replace_dynamic_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql", "macro_sql": "{% macro snowflake__replace_dynamic_table_built_in_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that replaces a dynamic iceberg table with a new dynamic iceberg table\n\n    This follows the syntax outlined here:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\ncreate or replace dynamic iceberg table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'snowflake'\n    base_location = '{{ catalog_relation.base_location }}'\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.083833, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {%- if language == 'sql' -%}\n        {%- if temporary -%}\n            {{ snowflake__create_table_temporary_sql(relation, compiled_code) }}\n        {%- elif catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n            {{ snowflake__create_table_info_schema_sql(relation, compiled_code) }}\n        {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n            {{ snowflake__create_table_built_in_sql(relation, compiled_code) }}\n        {%- else -%}\n            {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n        {%- endif -%}\n\n    {%- elif language == 'python' -%}\n        {%- if catalog_relation.catalog_type == 'BUILT_IN' %}\n            {% do exceptions.raise_compiler_error('Iceberg is incompatible with Python models. Please use a SQL model for the iceberg format.') %}\n        {%- else -%}\n            {{ py_write_table(compiled_code, relation) }}\n        {%- endif %}\n\n    {%- else -%}\n        {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_temporary_sql", "macro.dbt_snowflake.snowflake__create_table_info_schema_sql", "macro.dbt_snowflake.snowflake__create_table_built_in_sql", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0857615, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_temporary_sql": {"name": "snowflake__create_table_temporary_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_temporary_sql", "macro_sql": "{% macro snowflake__create_table_temporary_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE TEMPORARY TABLE and CREATE TEMPORARY TABLE ... AS SELECT:\n    https://docs.snowflake.com/en/sql-reference/sql/create-table\n    https://docs.snowflake.com/en/sql-reference/sql/create-table#create-table-as-select-also-referred-to-as-ctas\n-#}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace temporary table {{ relation }}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\nas (\n    {{ compiled_code }}\n    )\n;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0863407, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_info_schema_sql": {"name": "snowflake__create_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_info_schema_sql", "macro_sql": "{% macro snowflake__create_table_info_schema_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE TABLE and CREATE TABLE ... AS SELECT:\n    https://docs.snowflake.com/en/sql-reference/sql/create-table\n    https://docs.snowflake.com/en/sql-reference/sql/create-table#create-table-as-select-also-referred-to-as-ctas\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{%- if catalog_relation.is_transient -%}\n    {%- set transient='transient ' -%}\n{%- else -%}\n    {%- set transient='' -%}\n{%- endif -%}\n\n{%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace {{ transient }}table {{ relation }}\n    {%- set contract_config = config.get('contract') -%}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\n    {{ optional('cluster by', catalog_relation.cluster_by, '(', '') }}\n    {% if copy_grants -%} copy grants {%- endif %}\n    as (\n        {%- if catalog_relation.cluster_by is not none -%}\n        select * from (\n            {{ compiled_code }}\n        )\n        order by (\n            {{ catalog_relation.cluster_by }}\n        )\n        {%- else -%}\n        {{ compiled_code }}\n        {%- endif %}\n    )\n;\n\n{% if catalog_relation.cluster_by is not none -%}\nalter table {{ relation }} cluster by ({{ catalog_relation.cluster_by }});\n{%- endif -%}\n\n{% if catalog_relation.automatic_clustering and catalog_relation.cluster_by is not none %}\nalter table {{ relation }} resume recluster;\n{%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0877945, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_built_in_sql": {"name": "snowflake__create_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_built_in_sql", "macro_sql": "{% macro snowflake__create_table_built_in_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE ICEBERG TABLE and CREATE ICEBERG TABLE ... AS SELECT (Snowflake as the Iceberg catalog):\n    https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table-snowflake\n\n    Limitations:\n    - Iceberg does not support temporary tables (use a standard Snowflake table)\n-#}\n\n{%- if not adapter.behavior.enable_iceberg_materializations.no_warn -%}\n    {%- do exceptions.raise_compiler_error('Was unable to create model as Iceberg Table Format. Please set the `enable_iceberg_materializations` behavior flag to True in your dbt_project.yml. For more information, go to https://docs.getdbt.com/reference/resource-configs/snowflake-configs#iceberg-table-format') -%}\n{%- endif -%}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace iceberg table {{ relation }}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\n    {{ optional('cluster by', catalog_relation.cluster_by, '(', '') }}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'SNOWFLAKE'  -- required, and always SNOWFLAKE for built-in Iceberg tables\n    base_location = '{{ catalog_relation.base_location }}'\n    {% if copy_grants -%} copy grants {%- endif %}\nas (\n    {%- if catalog_relation.cluster_by is not none -%}\n    select * from (\n        {{ compiled_code }}\n    )\n    order by (\n        {{ catalog_relation.cluster_by }}\n    )\n    {%- else -%}\n    {{ compiled_code }}\n    {%- endif %}\n    )\n;\n\n{% if catalog_relation.cluster_by is not none -%}\nalter iceberg table {{ relation }} cluster by ({{ catalog_relation.cluster_by }});\n{%- endif -%}\n\n{% if catalog_relation.automatic_clustering and catalog_relation.cluster_by is not none %}\nalter iceberg table {{ relation }} resume recluster;\n{%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0892706, "supported_languages": null}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{% if catalog_relation.is_transient %}\n    {%- set table_type='transient' -%}\n{% endif %}\n\n{{ compiled_code }}\n\n\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n            session.use_database(target_relation.database)\n            session.use_schema(target_relation.schema)\n            # session.write_pandas does not have overwrite function\n            df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0897079, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0898716, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    /*\n    Rename or move a table to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0901022, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0903065, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.091687, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0918498, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0931754, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.093374, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    /*\n    Rename or move a view to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.093611, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.093805, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0940201, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0941758, "supported_languages": null}, "macro.dbt_snowflake.snowflake__cast": {"name": "snowflake__cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__cast", "macro_sql": "{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0946171, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0948308, "supported_languages": null}, "macro.dbt_snowflake.optional": {"name": "optional", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/optional.sql", "original_file_path": "macros/utils/optional.sql", "unique_id": "macro.dbt_snowflake.optional", "macro_sql": "{% macro optional(name, value, quote_char = '', equals_char = '= ') %}\n{#-\n--  Insert optional DDL parameters only when their value is provided; makes DDL statements more readable\n--\n--  Args:\n--  - name: the name of the DDL option\n--  - value: the value of the DDL option, may be None\n--  - quote_char: the quote character to use (e.g. '\"', '(', etc.), leave blank if unnecessary\n--  - equals_char: the equals character to use (e.g. '= ')\n--  Returns:\n--      If the value is not None (e.g. provided by the user), return the option setting DDL\n--      If the value is None, return an empty string\n-#}\n{%- set quote_char_right = ')' if quote_char == '(' else quote_char -%}\n{% if value is not none %}{{ name }} {{ equals_char }}{{ quote_char }}{{ value }}{{ quote_char_right }}{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0953984, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0957463, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.cast", "macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0964687, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0966988, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0968914, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0970085, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.097121, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0972695, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0983992, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0985281, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0987031, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0988255, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0991843, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0993772, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0995216, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0997617, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.0999844, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1002164, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1004357, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1006682, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1013727, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1015842, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1018586, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1020954, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1033878, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1045024, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1046748, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.104992, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1052163, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1054327, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1056185, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1068237, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.107187, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1073759, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1077452, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1079867, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1086679, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1089325, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.109801, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1102772, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1107407, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.110962, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1112993, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1117876, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1119578, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1121304, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1125436, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1127543, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1129043, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.113068, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.113202, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1141388, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.114424, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1146336, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1149063, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1150954, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1152637, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1154478, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.115698, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.115906, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.116241, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1164358, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1166086, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1167948, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1169605, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1171315, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1172898, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1175163, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1177008, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.118158, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1183403, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1185482, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.118725, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1189926, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1194727, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.12019, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1203678, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.121244, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1215599, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1218112, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1221788, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1223733, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.122565, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1228096, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1233618, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1235914, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.123738, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.124064, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1242838, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.124457, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.124651, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1250389, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1252322, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1254776, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.125981, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.126147, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1263216, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1264412, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.126885, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.127065, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.12715, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1273186, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1274853, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1277735, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.128005, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.128888, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.130106, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.130891, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1311893, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1325336, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1331224, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1334302, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.133973, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1342833, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1346066, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.134853, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.135233, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.135652, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.136023, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1362913, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.136757, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1370585, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.137368, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1376762, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1379921, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.138307, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1391964, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.139402, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.139555, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1397145, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1398761, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1416357, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.142035, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1422958, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1436467, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.143887, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1445632, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1466935, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.148816, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1491, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1492302, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1517174, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1520379, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1522183, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.153076, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1536415, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.154298, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1545348, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.155297, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1602504, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1608958, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1620092, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1637776, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1640491, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1647818, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1650484, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.165726, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1669006, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1681602, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.169378, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.17026, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1709104, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.171161, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1713567, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1716454, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.171851, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1721473, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1723368, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.172632, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1728292, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1729872, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.173175, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.173348, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1736522, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1746123, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1756482, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1758957, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1764324, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1766403, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1767898, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1769438, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1770678, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1772313, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.177358, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1778722, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1780958, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.179367, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.18198, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1838849, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.184229, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.184414, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1845195, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1846764, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1848197, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.185034, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1852837, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and ({{ strategy.row_changed }})\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {%- for col in source_sql_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1890023, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1892278, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1897962, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1902413, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1908891, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1913483, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1916585, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1920292, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1926517, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.192888, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.193112, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1971247, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1975875, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.1984625, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2005353, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.200741, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2009876, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2020001, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.202177, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2023585, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2038748, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2055264, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2066417, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2073808, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2077622, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2084236, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2106326, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2122254, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2125757, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2129917, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2137074, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2138789, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2148664, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2153418, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2159538, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.216433, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.216517, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.216911, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2173948, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.217717, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2180324, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2183816, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2186394, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2190826, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2195137, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.219711, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2199237, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2202356, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2205594, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.220796, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2213333, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2217834, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2219973, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2223117, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2226338, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2228525, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.223428, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2246358, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2249198, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2251456, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2258894, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2260206, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2266042, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.226785, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2269318, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2282684, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.228677, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2290277, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2296016, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2298095, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2301013, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2302582, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2305381, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2307994, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2310922, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2312593, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2315993, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.231751, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2320232, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2321837, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2324522, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2326121, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2332182, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.23341, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2339153, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.234634, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2351162, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2353115, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.235503, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2357934, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2359304, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2362046, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2363806, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2366564, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2368262, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2372026, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2373707, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2375605, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.238149, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2384129, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2385478, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2388196, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.238983, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2394989, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.239657, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.240812, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2410202, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.241286, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2438924, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2445028, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2456656, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2459054, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.246018, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2462907, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.246408, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2467134, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2468607, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2471411, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.247285, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.247658, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2479286, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2481954, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2483115, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2486172, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2488685, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2491305, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.249304, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2495604, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2496982, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.25043, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2505958, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.250769, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2509294, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2511091, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2512681, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2514346, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.251615, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2518036, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2519631, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2521508, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.252308, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2524743, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2526264, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.253125, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2534425, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2537751, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.253958, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.254295, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.254477, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2549784, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.25574, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2559838, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2563844, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2566748, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.25684, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2571733, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2574904, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2578, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2579575, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.258206, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2583008, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2587395, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2591867, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2593923, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2599509, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2602277, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2604327, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2606735, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2607605, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2610996, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2613955, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2615678, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.261834, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2619545, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2624354, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2628734, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2631385, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2632546, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2638443, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2640011, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2643197, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.264533, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2648351, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2649877, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.265287, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2654412, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2658184, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2660112, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2662487, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2667408, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2670093, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2673297, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2676415, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(\n    start_date=None, end_date=None, n_dateparts=None, datepart=\"day\"\n) %}\n    {{\n        adapter.dispatch(\"get_base_dates\", \"dbt_date\")(\n            start_date, end_date, n_dateparts, datepart\n        )\n    }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2683911, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n    {%- if start_date and end_date -%}\n        {%- set start_date = (\n            \"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"\n        ) -%}\n        {%- set end_date = (\n            \"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"\n        ) -%}\n\n    {%- elif n_dateparts and datepart -%}\n\n        {%- set start_date = dbt.dateadd(\n            datepart, -1 * n_dateparts, dbt_date.today()\n        ) -%}\n        {%- set end_date = dbt_date.tomorrow() -%}\n    {%- endif -%}\n\n    with\n        date_spine as (\n\n            {{\n                dbt_date.date_spine(\n                    datepart=datepart,\n                    start_date=start_date,\n                    end_date=end_date,\n                )\n            }}\n\n        )\n    select\n        cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\n    from date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.269277, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n    {%- if start_date and end_date -%}\n        {%- set start_date = \"cast('\" ~ start_date ~ \"' as datetime )\" -%}\n        {%- set end_date = \"cast('\" ~ end_date ~ \"' as datetime )\" -%}\n\n    {%- elif n_dateparts and datepart -%}\n\n        {%- set start_date = dbt.dateadd(\n            datepart, -1 * n_dateparts, dbt_date.today()\n        ) -%}\n        {%- set end_date = dbt_date.tomorrow() -%}\n    {%- endif -%}\n\n    with\n        date_spine as (\n\n            {{\n                dbt_date.date_spine(\n                    datepart=datepart,\n                    start_date=start_date,\n                    end_date=end_date,\n                )\n            }}\n\n        )\n    select\n        cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\n    from date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2700107, "supported_languages": null}, "macro.dbt_date.trino__get_base_dates": {"name": "trino__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.trino__get_base_dates", "macro_sql": "{% macro trino__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n    {%- if start_date and end_date -%}\n        {%- set start_date = (\n            \"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"\n        ) -%}\n        {%- set end_date = (\n            \"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"\n        ) -%}\n\n    {%- elif n_dateparts and datepart -%}\n\n        {%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.now()) -%}\n        {%- set end_date = dbt_date.tomorrow() -%}\n    {%- endif -%}\n\n    with\n        date_spine as (\n\n            {{\n                dbt_date.date_spine(\n                    datepart=datepart,\n                    start_date=start_date,\n                    end_date=end_date,\n                )\n            }}\n\n        )\n    select\n        cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\n    from date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2708755, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch(\"get_date_dimension\", \"dbt_date\")(start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.272227, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\n    with\n        base_dates as ({{ dbt_date.get_base_dates(start_date, end_date) }}),\n        dates_with_prior_year_dates as (\n\n            select\n                cast(d.date_day as date) as date_day,\n                cast(\n                    {{ dbt.dateadd(\"year\", -1, \"d.date_day\") }} as date\n                ) as prior_year_date_day,\n                cast(\n                    {{ dbt.dateadd(\"day\", -364, \"d.date_day\") }} as date\n                ) as prior_year_over_year_date_day\n            from base_dates d\n\n        )\n    select\n        d.date_day,\n        {{ dbt_date.yesterday(\"d.date_day\") }} as prior_date_day,\n        {{ dbt_date.tomorrow(\"d.date_day\") }} as next_date_day,\n        d.prior_year_date_day as prior_year_date_day,\n        d.prior_year_over_year_date_day,\n        {{ dbt_date.day_of_week(\"d.date_day\", isoweek=false) }} as day_of_week,\n        {{ dbt_date.day_of_week(\"d.date_day\", isoweek=true) }} as day_of_week_iso,\n        {{ dbt_date.day_name(\"d.date_day\", short=false) }} as day_of_week_name,\n        {{ dbt_date.day_name(\"d.date_day\", short=true) }} as day_of_week_name_short,\n        {{ dbt_date.day_of_month(\"d.date_day\") }} as day_of_month,\n        {{ dbt_date.day_of_year(\"d.date_day\") }} as day_of_year,\n\n        {{ dbt_date.week_start(\"d.date_day\") }} as week_start_date,\n        {{ dbt_date.week_end(\"d.date_day\") }} as week_end_date,\n        {{ dbt_date.week_start(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_week_start_date,\n        {{ dbt_date.week_end(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_week_end_date,\n        {{ dbt_date.week_of_year(\"d.date_day\") }} as week_of_year,\n\n        {{ dbt_date.iso_week_start(\"d.date_day\") }} as iso_week_start_date,\n        {{ dbt_date.iso_week_end(\"d.date_day\") }} as iso_week_end_date,\n        {{ dbt_date.iso_week_start(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_iso_week_start_date,\n        {{ dbt_date.iso_week_end(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_iso_week_end_date,\n        {{ dbt_date.iso_week_of_year(\"d.date_day\") }} as iso_week_of_year,\n\n        {{ dbt_date.week_of_year(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_week_of_year,\n        {{ dbt_date.iso_week_of_year(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_iso_week_of_year,\n\n        cast(\n            {{ dbt_date.date_part(\"month\", \"d.date_day\") }} as {{ dbt.type_int() }}\n        ) as month_of_year,\n        {{ dbt_date.month_name(\"d.date_day\", short=false) }} as month_name,\n        {{ dbt_date.month_name(\"d.date_day\", short=true) }} as month_name_short,\n\n        cast({{ dbt.date_trunc(\"month\", \"d.date_day\") }} as date) as month_start_date,\n        cast({{ last_day(\"d.date_day\", \"month\") }} as date) as month_end_date,\n\n        cast(\n            {{ dbt.date_trunc(\"month\", \"d.prior_year_date_day\") }} as date\n        ) as prior_year_month_start_date,\n        cast(\n            {{ last_day(\"d.prior_year_date_day\", \"month\") }} as date\n        ) as prior_year_month_end_date,\n\n        cast(\n            {{ dbt_date.date_part(\"quarter\", \"d.date_day\") }} as {{ dbt.type_int() }}\n        ) as quarter_of_year,\n        cast(\n            {{ dbt.date_trunc(\"quarter\", \"d.date_day\") }} as date\n        ) as quarter_start_date,\n        cast({{ last_day(\"d.date_day\", \"quarter\") }} as date) as quarter_end_date,\n\n        cast(\n            {{ dbt_date.date_part(\"year\", \"d.date_day\") }} as {{ dbt.type_int() }}\n        ) as year_number,\n        cast({{ dbt.date_trunc(\"year\", \"d.date_day\") }} as date) as year_start_date,\n        cast({{ last_day(\"d.date_day\", \"year\") }} as date) as year_end_date\n    from dates_with_prior_year_dates d\n    order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2746456, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\n    with\n        base_dates as ({{ dbt_date.get_base_dates(start_date, end_date) }}),\n        dates_with_prior_year_dates as (\n\n            select\n                cast(d.date_day as date) as date_day,\n                cast(\n                    {{ dbt.dateadd(\"year\", -1, \"d.date_day\") }} as date\n                ) as prior_year_date_day,\n                cast(\n                    {{ dbt.dateadd(\"day\", -364, \"d.date_day\") }} as date\n                ) as prior_year_over_year_date_day\n            from base_dates d\n\n        )\n    select\n        d.date_day,\n        {{ dbt_date.yesterday(\"d.date_day\") }} as prior_date_day,\n        {{ dbt_date.tomorrow(\"d.date_day\") }} as next_date_day,\n        d.prior_year_date_day as prior_year_date_day,\n        d.prior_year_over_year_date_day,\n        {{ dbt_date.day_of_week(\"d.date_day\", isoweek=true) }} as day_of_week,\n\n        {{ dbt_date.day_name(\"d.date_day\", short=false) }} as day_of_week_name,\n        {{ dbt_date.day_name(\"d.date_day\", short=true) }} as day_of_week_name_short,\n        {{ dbt_date.day_of_month(\"d.date_day\") }} as day_of_month,\n        {{ dbt_date.day_of_year(\"d.date_day\") }} as day_of_year,\n\n        {{ dbt_date.week_start(\"d.date_day\") }} as week_start_date,\n        {{ dbt_date.week_end(\"d.date_day\") }} as week_end_date,\n        {{ dbt_date.week_start(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_week_start_date,\n        {{ dbt_date.week_end(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_week_end_date,\n        {{ dbt_date.week_of_year(\"d.date_day\") }} as week_of_year,\n\n        {{ dbt_date.iso_week_start(\"d.date_day\") }} as iso_week_start_date,\n        {{ dbt_date.iso_week_end(\"d.date_day\") }} as iso_week_end_date,\n        {{ dbt_date.iso_week_start(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_iso_week_start_date,\n        {{ dbt_date.iso_week_end(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_iso_week_end_date,\n        {{ dbt_date.iso_week_of_year(\"d.date_day\") }} as iso_week_of_year,\n\n        {{ dbt_date.week_of_year(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_week_of_year,\n        {{ dbt_date.iso_week_of_year(\"d.prior_year_over_year_date_day\") }}\n        as prior_year_iso_week_of_year,\n\n        cast(\n            {{ dbt_date.date_part(\"month\", \"d.date_day\") }} as {{ dbt.type_int() }}\n        ) as month_of_year,\n        {{ dbt_date.month_name(\"d.date_day\", short=false) }} as month_name,\n        {{ dbt_date.month_name(\"d.date_day\", short=true) }} as month_name_short,\n\n        cast({{ dbt.date_trunc(\"month\", \"d.date_day\") }} as date) as month_start_date,\n        cast({{ last_day(\"d.date_day\", \"month\") }} as date) as month_end_date,\n\n        cast(\n            {{ dbt.date_trunc(\"month\", \"d.prior_year_date_day\") }} as date\n        ) as prior_year_month_start_date,\n        cast(\n            {{ last_day(\"d.prior_year_date_day\", \"month\") }} as date\n        ) as prior_year_month_end_date,\n\n        cast(\n            {{ dbt_date.date_part(\"quarter\", \"d.date_day\") }} as {{ dbt.type_int() }}\n        ) as quarter_of_year,\n        cast(\n            {{ dbt.date_trunc(\"quarter\", \"d.date_day\") }} as date\n        ) as quarter_start_date,\n        {# last_day does not support quarter because postgresql does not support quarter interval. #}\n        cast(\n            {{\n                dbt.dateadd(\n                    \"day\",\n                    \"-1\",\n                    dbt.dateadd(\n                        \"month\", \"3\", dbt.date_trunc(\"quarter\", \"d.date_day\")\n                    ),\n                )\n            }} as date\n        ) as quarter_end_date,\n\n        cast(\n            {{ dbt_date.date_part(\"year\", \"d.date_day\") }} as {{ dbt.type_int() }}\n        ) as year_number,\n        cast({{ dbt.date_trunc(\"year\", \"d.date_day\") }} as date) as year_start_date,\n        cast({{ last_day(\"d.date_day\", \"year\") }} as date) as year_end_date\n    from dates_with_prior_year_dates d\n    order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.277071, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n    {%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n    {%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n    {{ adapter.dispatch(\"convert_timezone\", \"dbt_date\")(column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2778144, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n    convert_timezone(\n        '{{ source_tz }}',\n        '{{ target_tz }}',\n        cast({{ column }} as {{ dbt.type_timestamp() }})\n    )\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2780418, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\n    timestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2782164, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n    cast(\n        cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}'\n        as {{ dbt.type_timestamp() }}\n    )\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2784734, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n    {{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2786756, "supported_languages": null}, "macro.dbt_date.duckdb__convert_timezone": {"name": "duckdb__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.duckdb__convert_timezone", "macro_sql": "{% macro duckdb__convert_timezone(column, target_tz, source_tz) -%}\n    {{ return(dbt_date.postgres__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.postgres__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2789013, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\n    from_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'), '{{ target_tz }}'\n    )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2790868, "supported_languages": null}, "macro.dbt_date.trino__convert_timezone": {"name": "trino__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.trino__convert_timezone", "macro_sql": "{%- macro trino__convert_timezone(column, target_tz, source_tz) -%}\n    cast(\n        (\n            at_timezone(\n                with_timezone(\n                    cast({{ column }} as {{ dbt.type_timestamp() }}), '{{ source_tz }}'\n                ),\n                '{{ target_tz }}'\n            )\n        ) as {{ dbt.type_timestamp() }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.279356, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch(\"date_part\", \"dbt_date\")(datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2797112, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2798674, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.280016, "supported_languages": null}, "macro.dbt_date.trino__date_part": {"name": "trino__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.trino__date_part", "macro_sql": "{% macro trino__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2801607, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch(\"day_name\", \"dbt_date\")(date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2807345, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n    {%- set f = \"Dy\" if short else \"Day\" -%} to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2809856, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%} dayname({{ date }})\n    {%- else -%}\n        -- long version not implemented on Snowflake so we're doing it manually :/\n        case\n            dayname({{ date }})\n            when 'Mon'\n            then 'Monday'\n            when 'Tue'\n            then 'Tuesday'\n            when 'Wed'\n            then 'Wednesday'\n            when 'Thu'\n            then 'Thursday'\n            when 'Fri'\n            then 'Friday'\n            when 'Sat'\n            then 'Saturday'\n            when 'Sun'\n            then 'Sunday'\n        end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.281273, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n    {%- set f = \"%a\" if short else \"%A\" -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2815018, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n    {# FM = Fill mode, which suppresses padding blanks #}\n    {%- set f = \"FMDy\" if short else \"FMDay\" -%} to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2817247, "supported_languages": null}, "macro.dbt_date.duckdb__day_name": {"name": "duckdb__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.duckdb__day_name", "macro_sql": "\n\n{%- macro duckdb__day_name(date, short) -%}\n    {%- if short -%} substr(dayname({{ date }}), 1, 3)\n    {%- else -%} dayname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.281933, "supported_languages": null}, "macro.dbt_date.spark__day_name": {"name": "spark__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.spark__day_name", "macro_sql": "\n\n{%- macro spark__day_name(date, short) -%}\n    {%- set f = \"E\" if short else \"EEEE\" -%} date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2821496, "supported_languages": null}, "macro.dbt_date.trino__day_name": {"name": "trino__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.trino__day_name", "macro_sql": "\n\n{%- macro trino__day_name(date, short) -%}\n    {%- set f = \"a\" if short else \"W\" -%} date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2823608, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%} {{ dbt_date.date_part(\"day\", date) }} {%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.282597, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\n    cast({{ dbt_date.date_part(\"day\", date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2827947, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n    {{ adapter.dispatch(\"day_of_week\", \"dbt_date\")(date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2835262, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part(\"dayofweek\", date) -%}\n\n    {%- if isoweek -%}\n        case\n            -- Shift start of week from Sunday (0) to Monday (1)\n            when {{ dow }} = 0 then 7 else {{ dow }}\n        end\n    {%- else -%} {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2838452, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = \"dayofweekiso\" -%} {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = \"dayofweek\" -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7\n            then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2844348, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part(\"dayofweek\", date) -%}\n\n    {%- if isoweek -%}\n        case\n            -- Shift start of week from Sunday (1) to Monday (2)\n            when {{ dow }} = 1 then 7 else {{ dow }} - 1\n        end\n    {%- else -%} {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2847583, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = \"isodow\" -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = \"dow\" -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.285262, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part(\"dayofweek\", date) -%}\n\n    {%- if isoweek -%}\n        case\n            -- Shift start of week from Sunday (0) to Monday (1)\n            when {{ dow }} = 0 then 7 else cast({{ dow }} as {{ dbt.type_bigint() }})\n        end\n    {%- else -%} cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2856722, "supported_languages": null}, "macro.dbt_date.duckdb__day_of_week": {"name": "duckdb__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.duckdb__day_of_week", "macro_sql": "\n\n{%- macro duckdb__day_of_week(date, isoweek) -%}\n    {{ return(dbt_date.postgres__day_of_week(date, isoweek)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2858558, "supported_languages": null}, "macro.dbt_date.spark__day_of_week": {"name": "spark__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.spark__day_of_week", "macro_sql": "\n\n\n{%- macro spark__day_of_week(date, isoweek) -%}\n\n    {%- set dow = \"dayofweek_iso\" if isoweek else \"dayofweek\" -%}\n\n    {{ dbt_date.date_part(dow, date) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2860863, "supported_languages": null}, "macro.dbt_date.trino__day_of_week": {"name": "trino__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.trino__day_of_week", "macro_sql": "\n\n\n{%- macro trino__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part(\"day_of_week\", date) -%}\n\n    {%- if isoweek -%} {{ dow }}\n    {%- else -%} case when {{ dow }} = 7 then 1 else {{ dow }} + 1 end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2863863, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n    {{ adapter.dispatch(\"day_of_year\", \"dbt_date\")(date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2867346, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part(\"dayofyear\", date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2868874, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part(\"doy\", date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2870665, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part(\"dayofyear\", date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.287269, "supported_languages": null}, "macro.dbt_date.spark__day_of_year": {"name": "spark__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.spark__day_of_year", "macro_sql": "\n\n{%- macro spark__day_of_year(date) -%} dayofyear({{ date }}) {%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2873862, "supported_languages": null}, "macro.dbt_date.trino__day_of_year": {"name": "trino__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.trino__day_of_year", "macro_sql": "\n\n{%- macro trino__day_of_year(date) -%}\n    {{ dbt_date.date_part(\"day_of_year\", date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2875376, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch(\"from_unixtimestamp\", \"dbt_date\")(epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2883909, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"value \"\n                ~ format\n                ~ \" for `format` for from_unixtimestamp is not supported.\"\n            )\n        }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2886944, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"value \"\n                ~ format\n                ~ \" for `format` for from_unixtimestamp is not supported.\"\n            )\n        }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.288985, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%} {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%} {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%} {%- set scale = 6 -%}\n    {%- else -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"value \"\n                ~ format\n                ~ \" for `format` for from_unixtimestamp is not supported.\"\n            )\n        }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2895172, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%} timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%} timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%} timestamp_micros({{ epochs }})\n    {%- else -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"value \"\n                ~ format\n                ~ \" for `format` for from_unixtimestamp is not supported.\"\n            )\n        }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2899458, "supported_languages": null}, "macro.dbt_date.trino__from_unixtimestamp": {"name": "trino__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__from_unixtimestamp", "macro_sql": "\n\n{%- macro trino__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        cast(\n            from_unixtime({{ epochs }}) at time zone 'UTC' as {{ dbt.type_timestamp() }}\n        )\n    {%- elif format == \"milliseconds\" -%}\n        cast(\n            from_unixtime_nanos(\n                {{ epochs }} * pow(10, 6)\n            ) at time zone 'UTC' as {{ dbt.type_timestamp() }}\n        )\n    {%- elif format == \"microseconds\" -%}\n        cast(\n            from_unixtime_nanos(\n                {{ epochs }} * pow(10, 3)\n            ) at time zone 'UTC' as {{ dbt.type_timestamp() }}\n        )\n    {%- elif format == \"nanoseconds\" -%}\n        cast(\n            from_unixtime_nanos(\n                {{ epochs }}\n            ) at time zone 'UTC' as {{ dbt.type_timestamp() }}\n        )\n    {%- else -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"value \"\n                ~ format\n                ~ \" for `format` for from_unixtimestamp is not supported.\"\n            )\n        }}\n    {% endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2906108, "supported_languages": null}, "macro.dbt_date.duckdb__from_unixtimestamp": {"name": "duckdb__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.duckdb__from_unixtimestamp", "macro_sql": "\n\n\n{%- macro duckdb__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n        {{\n            exceptions.raise_compiler_error(\n                \"value \"\n                ~ format\n                ~ \" for `format` for from_unixtimestamp is not supported.\"\n            )\n        }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2909076, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n    {%- set dt = date if date else dbt_date.today(tz) -%}\n    {{ adapter.dispatch(\"iso_week_end\", \"dbt_date\")(dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.291393, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n    {%- set dt = dbt_date.iso_week_start(date) -%} {{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2916293, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n    {{ dbt_date._iso_week_end(date, \"isoweek\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2917871, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n    {{ dbt_date._iso_week_end(date, \"weekiso\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2919428, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n    {%- set dt = date if date else dbt_date.today(tz) -%}\n    {{ adapter.dispatch(\"iso_week_of_year\", \"dbt_date\")(dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2924764, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\n    cast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.292691, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n    {{ dbt_date._iso_week_of_year(date, \"isoweek\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2928653, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n    {{ dbt_date._iso_week_of_year(date, \"weekiso\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.293136, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n    -- postgresql week is isoweek, the first week of a year containing January 4 of\n    -- that year.\n    {{ dbt_date._iso_week_of_year(date, \"week\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2933302, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_of_year": {"name": "duckdb__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_of_year", "macro_sql": "\n\n{%- macro duckdb__iso_week_of_year(date) -%}\n    {{ return(dbt_date.postgres__iso_week_of_year(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.293489, "supported_languages": null}, "macro.dbt_date.spark__iso_week_of_year": {"name": "spark__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.spark__iso_week_of_year", "macro_sql": "\n\n{%- macro spark__iso_week_of_year(date) -%}\n    {{ dbt_date._iso_week_of_year(date, \"week\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.29364, "supported_languages": null}, "macro.dbt_date.trino__iso_week_of_year": {"name": "trino__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.trino__iso_week_of_year", "macro_sql": "\n\n{%- macro trino__iso_week_of_year(date) -%}\n    {{ dbt_date._iso_week_of_year(date, \"week\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2937925, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n    {%- set dt = date if date else dbt_date.today(tz) -%}\n    {{ adapter.dispatch(\"iso_week_start\", \"dbt_date\")(dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.294326, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\n    cast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2944977, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n    {{ dbt_date._iso_week_start(date, \"isoweek\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.294653, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n    {{ dbt_date._iso_week_start(date, \"week\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2948058, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n    {{ dbt_date._iso_week_start(date, \"week\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2949817, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_start": {"name": "duckdb__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_start", "macro_sql": "\n\n{%- macro duckdb__iso_week_start(date) -%}\n    {{ return(dbt_date.postgres__iso_week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2951417, "supported_languages": null}, "macro.dbt_date.spark__iso_week_start": {"name": "spark__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.spark__iso_week_start", "macro_sql": "\n\n{%- macro spark__iso_week_start(date) -%}\n    {{ dbt_date._iso_week_start(date, \"week\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2953172, "supported_languages": null}, "macro.dbt_date.trino__iso_week_start": {"name": "trino__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.trino__iso_week_start", "macro_sql": "\n\n{%- macro trino__iso_week_start(date) -%}\n    {{ dbt_date._iso_week_start(date, \"week\") }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2954726, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%} {{ dbt_date.n_months_ago(1, tz) }} {%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2956793, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n    {{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.295935, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n    {{ dbt_date.date_part(\"month\", dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2961676, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%} {{ dbt_date.n_weeks_ago(1, tz) }} {%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.296365, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch(\"month_name\", \"dbt_date\")(date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2969027, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n    {%- set f = \"MON\" if short else \"MONTH\" -%} to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2971275, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n    {%- set f = \"%b\" if short else \"%B\" -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2973871, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n    {%- set f = \"MON\" if short else \"MMMM\" -%} to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2976139, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n    {# FM = Fill mode, which suppresses padding blanks #}\n    {%- set f = \"FMMon\" if short else \"FMMonth\" -%} to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2978384, "supported_languages": null}, "macro.dbt_date.duckdb__month_name": {"name": "duckdb__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.duckdb__month_name", "macro_sql": "\n\n\n{%- macro duckdb__month_name(date, short) -%}\n    {%- if short -%} substr(monthname({{ date }}), 1, 3)\n    {%- else -%} monthname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2980492, "supported_languages": null}, "macro.dbt_date.spark__month_name": {"name": "spark__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.spark__month_name", "macro_sql": "\n\n{%- macro spark__month_name(date, short) -%}\n    {%- set f = \"MMM\" if short else \"MMMM\" -%} date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.298268, "supported_languages": null}, "macro.dbt_date.trino__month_name": {"name": "trino__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.trino__month_name", "macro_sql": "\n\n{%- macro trino__month_name(date, short) -%}\n    {%- set f = \"b\" if short else \"M\" -%} date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.298482, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%} {{ dbt_date.n_months_away(1, tz) }} {%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.29869, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n    {{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2989469, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n    {{ dbt_date.date_part(\"month\", dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2991831, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%} {{ dbt_date.n_weeks_away(1, tz) }} {%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2995148, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n    {{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.2997425, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n    {%- set dt = date if date else dbt_date.today(tz) -%}\n    {%- set n = n | int -%}\n    cast({{ dbt.dateadd(\"day\", -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3004832, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n    {{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3009744, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n    {%- set n = n | int -%}\n    {{ dbt.date_trunc(\"month\", dbt.dateadd(\"month\", -1 * n, dbt_date.today(tz))) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.301514, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n    {%- set n = n | int -%}\n    {{ dbt.date_trunc(\"month\", dbt.dateadd(\"month\", n, dbt_date.today(tz))) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.301945, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n    {%- set n = n | int -%}\n    {{ dbt.date_trunc(\"week\", dbt.dateadd(\"week\", -1 * n, dbt_date.today(tz))) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3023736, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n    {%- set n = n | int -%}\n    {{ dbt.date_trunc(\"week\", dbt.dateadd(\"week\", n, dbt_date.today(tz))) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3027349, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name=\"day\", tz=None) -%}\n    {{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.303021, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3033056, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%} cast({{ dbt_date.now(tz) }} as date) {%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3035095, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n    {{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3037496, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch(\"to_unixtimestamp\", \"dbt_date\")(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3040798, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part(\"epoch\", timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3042378, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part(\"epoch_seconds\", timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.304394, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3045135, "supported_languages": null}, "macro.dbt_date.spark__to_unixtimestamp": {"name": "spark__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.spark__to_unixtimestamp", "macro_sql": "\n\n{%- macro spark__to_unixtimestamp(timestamp) -%}\n    unix_timestamp({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3046324, "supported_languages": null}, "macro.dbt_date.trino__to_unixtimestamp": {"name": "trino__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__to_unixtimestamp", "macro_sql": "\n\n{%- macro trino__to_unixtimestamp(timestamp) -%}\n    to_unixtime({{ timestamp }} at time zone 'UTC')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3047495, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n    {%- set dt = date if date else dbt_date.today(tz) -%}\n    {{ adapter.dispatch(\"week_end\", \"dbt_date\")(dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3051984, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%} {{ last_day(date, \"week\") }} {%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3053703, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n    {%- set dt = dbt_date.week_start(date) -%} {{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.305591, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n    {%- set dt = dbt_date.week_start(date) -%} {{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3058085, "supported_languages": null}, "macro.dbt_date.duckdb__week_end": {"name": "duckdb__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.duckdb__week_end", "macro_sql": "\n\n{%- macro duckdb__week_end(date) -%}\n    {{ return(dbt_date.postgres__week_end(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3059633, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n    {%- set dt = date if date else dbt_date.today(tz) -%}\n    {{ adapter.dispatch(\"week_of_year\", \"dbt_date\")(dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3064132, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\n    cast({{ dbt_date.date_part(\"week\", date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.306615, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n    {# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\n    cast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.306783, "supported_languages": null}, "macro.dbt_date.duckdb__week_of_year": {"name": "duckdb__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__week_of_year", "macro_sql": "\n\n{%- macro duckdb__week_of_year(date) -%}\n    cast(ceil(dayofyear({{ date }}) / 7) as int)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3069031, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n    {%- set dt = date if date else dbt_date.today(tz) -%}\n    {{ adapter.dispatch(\"week_start\", \"dbt_date\")(dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3075454, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\n    cast({{ dbt.date_trunc(\"week\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3077173, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.308039, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n    -- Sunday as week start date\n    cast(\n        {{\n            dbt.dateadd(\n                \"day\", -1, dbt.date_trunc(\"week\", dbt.dateadd(\"day\", 1, date))\n            )\n        }} as date\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3083184, "supported_languages": null}, "macro.dbt_date.duckdb__week_start": {"name": "duckdb__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.duckdb__week_start", "macro_sql": "\n\n{%- macro duckdb__week_start(date) -%}\n    {{ return(dbt_date.postgres__week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3084772, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n    {{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3087213, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n    {#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\n    with\n        fscl_year_dates_for_periods as (\n            {{\n                dbt_date.get_fiscal_year_dates(\n                    dates, year_end_month, week_start_day, shift_year\n                )\n            }}\n        ),\n        fscl_year_w13 as (\n\n            select\n                f.*,\n                -- We count the weeks in a 13 week period\n                -- and separate the 4-5-4 week sequences\n                mod(\n                    cast((f.fiscal_week_of_year - 1) as {{ dbt.type_int() }}), 13\n                ) as w13_number,\n                -- Chop weeks into 13 week merch quarters\n                cast(\n                    least(\n                        floor((f.fiscal_week_of_year - 1) / 13.0), 3\n                    ) as {{ dbt.type_int() }}\n                ) as quarter_number\n            from fscl_year_dates_for_periods f\n\n        ),\n        fscl_periods as (\n\n            select\n                f.date_day,\n                f.fiscal_year_number,\n                f.week_start_date,\n                f.week_end_date,\n                f.fiscal_week_of_year,\n                case\n                    -- we move week 53 into the 3rd period of the quarter\n                    when f.fiscal_week_of_year = 53\n                    then 3\n                    when f.w13_number between 0 and 3\n                    then 1\n                    when f.w13_number between 4 and 8\n                    then 2\n                    when f.w13_number between 9 and 12\n                    then 3\n                end as period_of_quarter,\n                f.quarter_number\n            from fscl_year_w13 f\n\n        ),\n        fscl_periods_quarters as (\n\n            select\n                f.*,\n                cast(\n                    (\n                        (f.quarter_number * 3) + f.period_of_quarter\n                    ) as {{ dbt.type_int() }}\n                ) as fiscal_period_number\n            from fscl_periods f\n\n        )\n    select\n        date_day,\n        fiscal_year_number,\n        week_start_date,\n        week_end_date,\n        fiscal_week_of_year,\n        dense_rank() over (\n            partition by fiscal_period_number order by fiscal_week_of_year\n        ) as fiscal_week_of_period,\n        fiscal_period_number,\n        quarter_number + 1 as fiscal_quarter_number,\n        period_of_quarter as fiscal_period_of_quarter\n    from fscl_periods_quarters\n    order by 1, 2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3094337, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(\n    dates, year_end_month=12, week_start_day=1, shift_year=1\n) %}\n    {{\n        adapter.dispatch(\"get_fiscal_year_dates\", \"dbt_date\")(\n            dates, year_end_month, week_start_day, shift_year\n        )\n    }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3100898, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(\n    dates, year_end_month, week_start_day, shift_year\n) %}\n    -- this gets all the dates within a fiscal year\n    -- determined by the given year-end-month\n    -- ending on the saturday closest to that month's end date\n    with\n        fsc_date_dimension as (select * from {{ dates }}),\n        year_month_end as (\n\n            select\n                d.year_number - {{ shift_year }} as fiscal_year_number, d.month_end_date\n            from fsc_date_dimension d\n            where d.month_of_year = {{ year_end_month }}\n            group by 1, 2\n\n        ),\n        weeks as (\n\n            select\n                d.year_number,\n                d.month_of_year,\n                d.date_day as week_start_date,\n                cast({{ dbt.dateadd(\"day\", 6, \"d.date_day\") }} as date) as week_end_date\n            from fsc_date_dimension d\n            where d.day_of_week = {{ week_start_day }}\n\n        ),\n        -- get all the weeks that start in the month the year ends\n        year_week_ends as (\n\n            select\n                d.year_number - {{ shift_year }} as fiscal_year_number, d.week_end_date\n            from weeks d\n            where d.month_of_year = {{ year_end_month }}\n            group by 1, 2\n\n        ),\n        -- then calculate which Saturday is closest to month end\n        weeks_at_month_end as (\n\n            select\n                d.fiscal_year_number,\n                d.week_end_date,\n                m.month_end_date,\n                rank() over (\n                    partition by d.fiscal_year_number\n                    order by\n                        abs(\n                            {{\n                                dbt.datediff(\n                                    \"d.week_end_date\", \"m.month_end_date\", \"day\"\n                                )\n                            }}\n                        )\n\n                ) as closest_to_month_end\n            from year_week_ends d\n            join year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n        ),\n        fiscal_year_range as (\n\n            select\n                w.fiscal_year_number,\n                cast(\n                    {{\n                        dbt.dateadd(\n                            \"day\",\n                            1,\n                            \"lag(w.week_end_date) over(order by w.week_end_date)\",\n                        )\n                    }} as date\n                ) as fiscal_year_start_date,\n                w.week_end_date as fiscal_year_end_date\n            from weeks_at_month_end w\n            where w.closest_to_month_end = 1\n\n        ),\n        fiscal_year_dates as (\n\n            select\n                d.date_day,\n                m.fiscal_year_number,\n                m.fiscal_year_start_date,\n                m.fiscal_year_end_date,\n                w.week_start_date,\n                w.week_end_date,\n                -- we reset the weeks of the year starting with the merch year start\n                -- date\n                dense_rank() over (\n                    partition by m.fiscal_year_number order by w.week_start_date\n                ) as fiscal_week_of_year\n            from fsc_date_dimension d\n            join\n                fiscal_year_range m\n                on d.date_day\n                between m.fiscal_year_start_date and m.fiscal_year_end_date\n            join weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n        )\n    select *\n    from fiscal_year_dates\n    order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3107374, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{\n        return(\n            adapter.dispatch(\"get_intervals_between\", \"dbt_date\")(\n                start_date, end_date, datepart\n            )\n        )\n    }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3113585, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement(\"get_intervals_between\", fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result(\"get_intervals_between\") -%}\n\n    {%- if value_list and value_list[\"data\"] -%}\n        {%- set values = value_list[\"data\"] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%} {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3120158, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{\n        return(\n            adapter.dispatch(\"date_spine\", \"dbt_date\")(datepart, start_date, end_date)\n        )\n    }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3122673, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n    {# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n    with\n        rawdata as (\n\n            {{\n                dbt_date.generate_series(\n                    dbt_date.get_intervals_between(start_date, end_date, datepart)\n                )\n            }}\n\n        ),\n\n        all_periods as (\n\n            select\n                (\n                    {{\n                        dbt.dateadd(\n                            datepart,\n                            \"(row_number() over (order by 1) - 1)\",\n                            start_date,\n                        )\n                    }}\n                ) as date_{{ datepart }}\n            from rawdata\n\n        ),\n\n        filtered as (\n\n            select * from all_periods where date_{{ datepart }} <= {{ end_date }}\n\n        )\n\n    select *\n    from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.312658, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch(\"get_powers_of_two\", \"dbt_date\")(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3131397, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n        {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n        {% if upper_bound <= 2**loop.index %} {{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.313618, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch(\"generate_series\", \"dbt_date\")(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3138242, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with\n        p as (\n            select 0 as generated_number\n            union all\n            select 1\n        ),\n        unioned as (\n\n            select\n\n                {% for i in range(n) %}\n                    p{{ i }}.generated_number * power(2, {{ i }})\n                    {% if not loop.last %} + {% endif %}\n                {% endfor %}\n                + 1 as generated_number\n\n            from\n\n            {% for i in range(n) %}\n                    p as p{{ i }} {% if not loop.last %} cross join {% endif %}\n            {% endfor %}\n\n        )\n\n    select *\n    from unioned\n    where generated_number <= {{ upper_bound }}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3143888, "supported_languages": null}, "macro.dbt_date.date": {"name": "date", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/modules_datetime.sql", "original_file_path": "macros/_utils/modules_datetime.sql", "unique_id": "macro.dbt_date.date", "macro_sql": "{% macro date(year, month, day) %}\n    {{ return(modules.datetime.date(year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3147306, "supported_languages": null}, "macro.dbt_date.datetime": {"name": "datetime", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/modules_datetime.sql", "original_file_path": "macros/_utils/modules_datetime.sql", "unique_id": "macro.dbt_date.datetime", "macro_sql": "{% macro datetime(\n    year, month, day, hour=0, minute=0, second=0, microsecond=0, tz=None\n) %}\n    {% set tz = tz if tz else var(\"dbt_date:time_zone\") %}\n    {{\n        return(\n            modules.datetime.datetime(\n                year=year,\n                month=month,\n                day=day,\n                hour=hour,\n                minute=minute,\n                second=second,\n                microsecond=microsecond,\n                tzinfo=modules.pytz.timezone(tz),\n            )\n        )\n    }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3152988, "supported_languages": null}, "macro.dbt_external_tables.create_external_schema": {"name": "create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.create_external_schema", "macro_sql": "{%- macro create_external_schema(source_node) -%}\n    {{ adapter.dispatch('create_external_schema', 'dbt_external_tables')(source_node) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.315648, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_schema": {"name": "default__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_schema.sql", "original_file_path": "macros/common/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.default__create_external_schema", "macro_sql": "{%- macro default__create_external_schema(source_node) -%}\n    {%- set fqn -%}\n        {%- if source_node.database -%}\n            {{ source_node.database }}.{{ source_node.schema }}\n        {%- else -%}\n            {{ source_node.schema }}\n        {%- endif -%}\n    {%- endset -%}\n\n    {%- set ddl -%}\n        create schema if not exists {{ fqn }}\n    {%- endset -%}\n\n    {{ return(ddl) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3160653, "supported_languages": null}, "macro.dbt_external_tables.create_external_table": {"name": "create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3163445, "supported_languages": null}, "macro.dbt_external_tables.default__create_external_table": {"name": "default__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "unique_id": "macro.dbt_external_tables.default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3164942, "supported_languages": null}, "macro.dbt_external_tables.get_external_build_plan": {"name": "get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3167708, "supported_languages": null}, "macro.dbt_external_tables.default__get_external_build_plan": {"name": "default__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3169208, "supported_languages": null}, "macro.dbt_external_tables.refresh_external_table": {"name": "refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3171873, "supported_languages": null}, "macro.dbt_external_tables.default__refresh_external_table": {"name": "default__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3173409, "supported_languages": null}, "macro.dbt_external_tables.stage_external_sources": {"name": "stage_external_sources", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "unique_id": "macro.dbt_external_tables.stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n        {% set update_columns = dbt_external_tables.update_external_table_columns(node) %}\n        {{ update_columns }}\n\n    {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement", "macro.dbt_external_tables.update_external_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3208575, "supported_languages": null}, "macro.dbt_external_tables.update_external_table_columns": {"name": "update_external_table_columns", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/update_external_table_columns.sql", "original_file_path": "macros/common/update_external_table_columns.sql", "unique_id": "macro.dbt_external_tables.update_external_table_columns", "macro_sql": "{% macro update_external_table_columns(source_node) %}\n    {{ return(adapter.dispatch('update_external_table_columns', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__update_external_table_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3211813, "supported_languages": null}, "macro.dbt_external_tables.default__update_external_table_columns": {"name": "default__update_external_table_columns", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/update_external_table_columns.sql", "original_file_path": "macros/common/update_external_table_columns.sql", "unique_id": "macro.dbt_external_tables.default__update_external_table_columns", "macro_sql": "{% macro default__update_external_table_columns(source_node) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3212833, "supported_languages": null}, "macro.dbt_external_tables.dropif": {"name": "dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3215454, "supported_languages": null}, "macro.dbt_external_tables.default__dropif": {"name": "default__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3217063, "supported_languages": null}, "macro.dbt_external_tables.exit_transaction": {"name": "exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3219676, "supported_languages": null}, "macro.dbt_external_tables.default__exit_transaction": {"name": "default__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.322099, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_schema": {"name": "bigquery__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_schema.sql", "original_file_path": "macros/plugins/bigquery/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_schema", "macro_sql": "{%- macro bigquery__create_external_schema(source_node) -%}\n    {%- set fqn -%}\n        {%- if source_node.database -%}\n            `{{ source_node.database }}`.{{ source_node.schema }}\n        {%- else -%}\n            {{ source_node.schema }}\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set schema_exists_query %}\n        select * from `{{ source_node.database }}`.INFORMATION_SCHEMA.SCHEMATA where schema_name = '{{ source_node.schema }}' limit 1\n    {% endset %}\n    {% if execute %}\n        {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n    {% else %}\n        {% set schema_exists = false %}\n    {% endif %}  \n\n    {%- if not schema_exists -%}\n        {%- set ddl -%}\n            create schema if not exists {{ fqn }}\n        {%- endset -%}\n        {{ return(ddl) }}\n    {%- else -%}\n        {{ return('') }}\n    {% endif %} \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3230982, "supported_languages": null}, "macro.dbt_external_tables.bigquery__create_external_table": {"name": "bigquery__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    {%- set non_string_options = ['max_staleness'] %}\n\n    {% if options is mapping and options.get('connection_name', none) %}\n        {% set connection_name = options.pop('connection_name') %}\n    {% endif %}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {{column_quoted}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        {% if connection_name %}\n            with connection `{{ connection_name }}`\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string and key not in non_string_options -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3256285, "supported_languages": null}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"name": "bigquery__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% if not dbt_external_tables.create_external_schema(source_node)|length %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% endif %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3268063, "supported_languages": null}, "macro.dbt_external_tables.bigquery__update_external_table_columns": {"name": "bigquery__update_external_table_columns", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/bigquery/update_external_table_columns.sql", "original_file_path": "macros/plugins/bigquery/update_external_table_columns.sql", "unique_id": "macro.dbt_external_tables.bigquery__update_external_table_columns", "macro_sql": "{% macro bigquery__update_external_table_columns(source_node) %}\n    {%- set columns = source_node.columns -%}\n    {%- set relation = source(source_node.source_name, source_node.name) -%}\n    {%- do adapter.update_columns(relation, columns) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3271587, "supported_languages": null}, "macro.dbt_external_tables.fabric__create_external_schema": {"name": "fabric__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/fabric/create_external_schema.sql", "original_file_path": "macros/plugins/fabric/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.fabric__create_external_schema", "macro_sql": "{% macro fabric__create_external_schema(source_node) %}\n    {# https://learn.microsoft.com/en-us/sql/t-sql/statements/create-schema-transact-sql?view=sql-server-ver16 #}\n\n    {% set ddl %}\n        IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ source_node.schema }}')\n        BEGIN\n        EXEC('CREATE SCHEMA [{{ source_node.schema }}]')\n        END \n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.327505, "supported_languages": null}, "macro.dbt_external_tables.fabric__create_external_table": {"name": "fabric__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/fabric/create_external_table.sql", "original_file_path": "macros/plugins/fabric/create_external_table.sql", "unique_id": "macro.dbt_external_tables.fabric__create_external_table", "macro_sql": "{% macro fabric__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3290124, "supported_languages": null}, "macro.dbt_external_tables.fabric__get_external_build_plan": {"name": "fabric__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/fabric/get_external_build_plan.sql", "original_file_path": "macros/plugins/fabric/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.fabric__get_external_build_plan", "macro_sql": "{% macro fabric__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3299325, "supported_languages": null}, "macro.dbt_external_tables.fabric__dropif": {"name": "fabric__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/fabric/helpers/dropif.sql", "original_file_path": "macros/plugins/fabric/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.fabric__dropif", "macro_sql": "{% macro fabric__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3303378, "supported_languages": null}, "macro.dbt_external_tables.redshift__create_external_table": {"name": "redshift__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.331703, "supported_languages": null}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"name": "redshift__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not dbt_external_tables.redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3324718, "supported_languages": null}, "macro.dbt_external_tables.redshift__refresh_external_table": {"name": "redshift__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3352098, "supported_languages": null}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"name": "redshift_alter_table_add_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3367379, "supported_languages": null}, "macro.dbt_external_tables.redshift__dropif": {"name": "redshift__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3370695, "supported_languages": null}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"name": "redshift_is_ext_tbl", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3379958, "supported_languages": null}, "macro.dbt_external_tables.year_month_day": {"name": "year_month_day", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3383667, "supported_languages": null}, "macro.dbt_external_tables.key_value": {"name": "key_value", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3385854, "supported_languages": null}, "macro.dbt_external_tables.value_only": {"name": "value_only", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "unique_id": "macro.dbt_external_tables.value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3387752, "supported_languages": null}, "macro.dbt_external_tables.render_from_context": {"name": "render_from_context", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "unique_id": "macro.dbt_external_tables.render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3398733, "supported_languages": null}, "macro.dbt_external_tables.redshift__exit_transaction": {"name": "redshift__exit_transaction", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3400617, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_schema": {"name": "snowflake__create_external_schema", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_schema.sql", "original_file_path": "macros/plugins/snowflake/create_external_schema.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_schema", "macro_sql": "{% macro snowflake__create_external_schema(source_node) %}\n\n    {% set schema_exists_query %}\n        show terse schemas like '{{ source_node.schema }}' in database {{ source_node.database }} limit 1;\n    {% endset %}\n    {% if execute %}\n        {% set schema_exists = run_query(schema_exists_query)|length > 0 %}\n    {% else %}\n        {% set schema_exists = false %}\n    {% endif %}    \n\n    {% if schema_exists %}\n        {% set ddl %}\n            select 'Schema {{ source_node.schema }} exists' from dual;\n        {% endset %}\n    {% else %}\n        {% set fqn %}\n            {% if source_node.database %}\n                {{ source_node.database }}.{{ source_node.schema }}\n            {% else %}\n                {{ source_node.schema }}\n            {% endif %}\n        {% endset %}\n\n        {% set ddl %}\n            create schema if not exists {{ fqn }};\n        {% endset %}\n    {% endif %}\n\n    {% do return(ddl) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.341197, "supported_languages": null}, "macro.dbt_external_tables.snowflake__create_external_table": {"name": "snowflake__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set infer_schema = external.infer_schema -%}\n    {%- set ignore_case = external.ignore_case or false  -%}\n\n    {% if infer_schema %}\n        {% set query_infer_schema %}\n            select * from table( infer_schema( location=>'{{external.location}}', file_format=>'{{external.file_format}}', ignore_case=> {{ ignore_case }}) )\n        {% endset %}\n        {% if execute %}\n            {% set columns_infer = run_query(query_infer_schema) %}\n        {% endif %}\n    {% endif %}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n\n{% set ddl %}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions or infer_schema -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 or infer_schema -}}\n        {%- endfor -%}{%- endif -%}\n        {%- if not infer_schema -%}\n            {%- for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {%- set column_alias -%}\n                    {%- if 'alias' in column and column.quote -%}\n                        {{adapter.quote(column.alias)}}\n                    {%- elif 'alias' in column -%}\n                        {{column.alias}}\n                    {%- else -%}\n                        {{column_quoted}}\n                    {%- endif -%}\n                {%- endset %}\n                {%- set col_expression -%}\n                    {%- if column.expression -%}\n                        {{column.expression}}\n                    {%- else -%}\n                        {%- if ignore_case -%}\n                        {%- set col_id = 'value:c' ~ loop.index if is_csv else 'GET_IGNORE_CASE($1, ' ~ \"'\"~ column_quoted ~\"'\"~ ')' -%}\n                        {%- else -%}\n                        {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column_quoted -%}\n                        {%- endif -%}\n                        (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n                    {%- endif -%}\n                {%- endset %}\n                {{column_alias}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n                {{- ',' if not loop.last -}}\n            {% endfor %}\n        {% else %}\n        {%- for column in columns_infer %}\n                {%- set col_expression -%}\n                {%- if ignore_case -%}\n                    {%- set col_id = 'GET_IGNORE_CASE($1, ' ~ \"'\"~ column[0] ~\"'\"~ ')' -%}\n                {%- else -%}\n                    {%- set col_id = 'value:' ~ column[0] -%}\n                {%- endif -%}\n                    (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n                {%- endset %}\n                {{column[0]}} {{column[1]}} as ({{col_expression}}::{{column[1]}})\n                {{- ',' if not loop.last -}}\n            {% endfor %}\n        {%- endif -%}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.aws_sns_topic -%}\n      aws_sns_topic = '{{external.aws_sns_topic}}'\n    {%- endif %}\n    {% if external.table_format | lower == \"delta\" %}\n      refresh_on_create = false\n    {% endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n    {% if external.table_format -%} table_format = '{{external.table_format}}' {%- endif %}\n{% endset %}\n{# {{ log('ddl: ' ~ ddl, info=True) }} #}\n{{ ddl }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3456843, "supported_languages": null}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"name": "snowflake__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.create_external_schema(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3471723, "supported_languages": null}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"name": "snowflake__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    {% set delta_format = (external.table_format | lower == \"delta\") %}\n    \n    {% set manual_refresh = not auto_refresh %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3482075, "supported_languages": null}, "macro.dbt_external_tables.is_csv": {"name": "is_csv", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "unique_id": "macro.dbt_external_tables.is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3502953, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_empty_table": {"name": "snowflake_create_empty_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            metadata_file_last_modified timestamp,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3508885, "supported_languages": null}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"name": "snowflake_create_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        {% if snowpipe.error_integration -%} error_integration = '{{snowpipe.error_integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3517082, "supported_languages": null}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"name": "snowflake_get_copy_sql", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n\n    {%- if explicit_transaction -%} begin; {%- endif %}\n\n    copy into {{source(source_node.source_name, source_node.name)}}\n    from (\n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            metadata$file_last_modified::timestamp as metadata_file_last_modified,\n            metadata$start_scan_time::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n\n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3531873, "supported_languages": null}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"name": "snowflake_refresh_snowpipe", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3538802, "supported_languages": null}, "macro.dbt_external_tables.spark__create_external_table": {"name": "spark__create_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n    {%- set columns_and_partitions = columns | list -%}\n    {%- if partitions -%}\n        {%- for i in partitions -%}\n            {%- if i.name not in columns_and_partitions | list | map(attribute='name') -%}\n                {%- do columns_and_partitions.append(i) -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns | length > 0 %} (\n        {% for column in columns_and_partitions %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3559852, "supported_languages": null}, "macro.dbt_external_tables.spark__get_external_build_plan": {"name": "spark__get_external_build_plan", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.create_external_schema(source_node),\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = dbt_external_tables.recover_partitions(source_node) %}\n    {% if recover_partitions %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.create_external_schema", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3571563, "supported_languages": null}, "macro.dbt_external_tables.spark__refresh_external_table": {"name": "spark__refresh_external_table", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3575015, "supported_languages": null}, "macro.dbt_external_tables.spark__dropif": {"name": "spark__dropif", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "unique_id": "macro.dbt_external_tables.spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3578138, "supported_languages": null}, "macro.dbt_external_tables.spark__recover_partitions": {"name": "spark__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        {% set ddl %}\n            ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n        {% endset %}\n    {%- else -%}\n        {% set ddl = none %}\n    {%- endif -%}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3584464, "supported_languages": null}, "macro.dbt_external_tables.recover_partitions": {"name": "recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.recover_partitions", "macro_sql": "{% macro recover_partitions(source_node) %}\n    {{ return(adapter.dispatch('recover_partitions', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_external_tables.default__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3586512, "supported_languages": null}, "macro.dbt_external_tables.default__recover_partitions": {"name": "default__recover_partitions", "resource_type": "macro", "package_name": "dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "unique_id": "macro.dbt_external_tables.default__recover_partitions", "macro_sql": "{% macro default__recover_partitions(source_node) %}\n    /*{# \n        We're dispatching this macro so that users can override it if required on other adapters\n        but this will work for spark/databricks. \n    #}*/\n\n    {{ exceptions.raise_not_implemented('recover_partitions macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3588667, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3593771, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3598866, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3603814, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      {% if group_by_columns|length() == 0 %}\n        where {{ column_name }} is not null\n        limit 1\n      {% endif %}\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3613324, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3617444, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3621078, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3632965, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3675852, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3682203, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3694115, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.36981, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3702047, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3707922, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3719318, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3727665, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3743868, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3748407, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3752909, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.37572, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.376213, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3766036, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3769252, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3774042, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }}) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.378287, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3788297, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3797345, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3802297, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3805947, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3811617, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.382133, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3825817, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3832712, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3835645, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3838625, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3841627, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.384348, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3846433, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.384848, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{% if not string %}\n{{ return('') }}\n{% endif %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3856664, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3864305, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3869042, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3874545, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3881066, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.388353, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3887331, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3893654, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3896267, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3898156, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.390026, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.390208, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.390387, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.390573, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3910244, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.391483, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3917136, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3922734, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3926547, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3933442, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3941307, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3958836, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3963454, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.397128, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.397498, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3981614, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3986719, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.3995888, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4001048, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.400999, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.40145, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.402271, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4031477, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.403536, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4042885, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4050636, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4056156, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4060457, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4063568, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4067087, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4068637, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4070144, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.407162, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4074469, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4077237, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4082005, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4084923, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4093165, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4102285, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4105797, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4109538, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.411284, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.411653, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4125583, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.413451, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4138227, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4144425, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4147468, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.414932, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4152825, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4158719, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4166367, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4181342, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4185963, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4188764, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4199424, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4240518, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, quote_identifiers)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4249089, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', quote_identifiers=False) -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    {%- set current_col_name = adapter.quote(col.column) if quote_identifiers else col.column -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ adapter.quote(exclude_col) if quote_identifiers else exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ adapter.quote(field_name) if quote_identifiers else field_name  }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(current_col_name) }}\n             {% else %}\n           {{ current_col_name }}\n             {% endif %}\n           as {{ cast_to }}) as {{ adapter.quote(value_name) if quote_identifiers else value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4268873, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4273689, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4278803, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.428096, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4284205, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4290698, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4294186, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.429776, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4301448, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1746823682.4308527, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"test.poc_dbt_snowflake.not_null_date_dim_hash_key.8326d9772a": [{"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_date_dim_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_date_dim_hash_key.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.not_null_date_dim_hash_key.8326d9772a", "fqn": ["poc_dbt_snowflake", "lookup_tables", "not_null_date_dim_hash_key"], "alias": "not_null_date_dim_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747435987.6205409, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.date_dim", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('date_dim')) }}"}, "namespace": null}}, {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_date_dim_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_date_dim_hash_key.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.not_null_date_dim_hash_key.8326d9772a", "fqn": ["poc_dbt_snowflake", "lookup_tables", "not_null_date_dim_hash_key"], "alias": "not_null_date_dim_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.4717083, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.date_dim", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('date_dim')) }}"}, "namespace": null}}], "test.poc_dbt_snowflake.unique_date_dim_hash_key.0444a38ea7": [{"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "unique_date_dim_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "unique_date_dim_hash_key.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.unique_date_dim_hash_key.0444a38ea7", "fqn": ["poc_dbt_snowflake", "lookup_tables", "unique_date_dim_hash_key"], "alias": "unique_date_dim_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747435987.6215715, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.date_dim", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('date_dim')) }}"}, "namespace": null}}, {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "unique_date_dim_hash_key", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "unique_date_dim_hash_key.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.unique_date_dim_hash_key.0444a38ea7", "fqn": ["poc_dbt_snowflake", "lookup_tables", "unique_date_dim_hash_key"], "alias": "unique_date_dim_hash_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.4728444, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "hash_key", "file_key_name": "models.date_dim", "attached_node": null, "test_metadata": {"name": "unique", "kwargs": {"column_name": "hash_key", "model": "{{ get_where_subquery(ref('date_dim')) }}"}, "namespace": null}}], "test.poc_dbt_snowflake.not_null_date_dim_etl_created_ts.ad0d95cb81": [{"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_date_dim_etl_created_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_date_dim_etl_created_ts.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.not_null_date_dim_etl_created_ts.ad0d95cb81", "fqn": ["poc_dbt_snowflake", "lookup_tables", "not_null_date_dim_etl_created_ts"], "alias": "not_null_date_dim_etl_created_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747435987.6224782, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_created_ts", "file_key_name": "models.date_dim", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_created_ts", "model": "{{ get_where_subquery(ref('date_dim')) }}"}, "namespace": null}}, {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_date_dim_etl_created_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_date_dim_etl_created_ts.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.not_null_date_dim_etl_created_ts.ad0d95cb81", "fqn": ["poc_dbt_snowflake", "lookup_tables", "not_null_date_dim_etl_created_ts"], "alias": "not_null_date_dim_etl_created_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.4738142, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_created_ts", "file_key_name": "models.date_dim", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_created_ts", "model": "{{ get_where_subquery(ref('date_dim')) }}"}, "namespace": null}}], "test.poc_dbt_snowflake.not_null_date_dim_etl_updated_ts.50c9849576": [{"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_date_dim_etl_updated_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_date_dim_etl_updated_ts.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.not_null_date_dim_etl_updated_ts.50c9849576", "fqn": ["poc_dbt_snowflake", "lookup_tables", "not_null_date_dim_etl_updated_ts"], "alias": "not_null_date_dim_etl_updated_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747435987.6234186, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_updated_ts", "file_key_name": "models.date_dim", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_updated_ts", "model": "{{ get_where_subquery(ref('date_dim')) }}"}, "namespace": null}}, {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_date_dim_etl_updated_ts", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_date_dim_etl_updated_ts.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.not_null_date_dim_etl_updated_ts.50c9849576", "fqn": ["poc_dbt_snowflake", "lookup_tables", "not_null_date_dim_etl_updated_ts"], "alias": "not_null_date_dim_etl_updated_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.4747279, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "etl_updated_ts", "file_key_name": "models.date_dim", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "etl_updated_ts", "model": "{{ get_where_subquery(ref('date_dim')) }}"}, "namespace": null}}], "test.poc_dbt_snowflake.not_null_date_dim_updated_by.70f32b9a2e": [{"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_date_dim_updated_by", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_date_dim_updated_by.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.not_null_date_dim_updated_by.70f32b9a2e", "fqn": ["poc_dbt_snowflake", "lookup_tables", "not_null_date_dim_updated_by"], "alias": "not_null_date_dim_updated_by", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747435987.6243546, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_by", "file_key_name": "models.date_dim", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_by", "model": "{{ get_where_subquery(ref('date_dim')) }}"}, "namespace": null}}, {"database": "SANDBOX_DATA_PIPELINE", "schema": "dbt_test__audit", "name": "not_null_date_dim_updated_by", "resource_type": "test", "package_name": "poc_dbt_snowflake", "path": "not_null_date_dim_updated_by.sql", "original_file_path": "models/lookup_tables/tpcds_date_dim.yml", "unique_id": "test.poc_dbt_snowflake.not_null_date_dim_updated_by.70f32b9a2e", "fqn": ["poc_dbt_snowflake", "lookup_tables", "not_null_date_dim_updated_by"], "alias": "not_null_date_dim_updated_by", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1747436913.4756458, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "date_dim", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_by", "file_key_name": "models.date_dim", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_by", "model": "{{ get_where_subquery(ref('date_dim')) }}"}, "namespace": null}}]}, "parent_map": {"model.poc_dbt_snowflake.unique_cocktails": [], "model.poc_dbt_snowflake.tpcds_date_dim": ["source.poc_dbt_snowflake.TPCDS.DATE_DIM"], "model.poc_dbt_snowflake.tpcds_customer": ["source.poc_dbt_snowflake.TPCDS.CUSTOMER"], "model.poc_dbt_snowflake.tpcds_web_page": ["source.poc_dbt_snowflake.TPCDS.WEB_PAGE"], "test.poc_dbt_snowflake.not_null_tpcds_customer_hash_key.62794df7f9": ["model.poc_dbt_snowflake.tpcds_customer"], "test.poc_dbt_snowflake.unique_tpcds_customer_hash_key.6252498dbf": ["model.poc_dbt_snowflake.tpcds_customer"], "test.poc_dbt_snowflake.not_null_tpcds_customer_etl_created_ts.07575a37fc": ["model.poc_dbt_snowflake.tpcds_customer"], "test.poc_dbt_snowflake.not_null_tpcds_customer_etl_updated_ts.dc1473ff35": ["model.poc_dbt_snowflake.tpcds_customer"], "test.poc_dbt_snowflake.not_null_tpcds_customer_updated_by.4d0ed9329f": ["model.poc_dbt_snowflake.tpcds_customer"], "test.poc_dbt_snowflake.not_null_tpcds_web_page_hash_key.45dcf293de": ["model.poc_dbt_snowflake.tpcds_web_page"], "test.poc_dbt_snowflake.unique_tpcds_web_page_hash_key.f6933a969c": ["model.poc_dbt_snowflake.tpcds_web_page"], "test.poc_dbt_snowflake.not_null_tpcds_web_page_etl_created_ts.2523912fc2": ["model.poc_dbt_snowflake.tpcds_web_page"], "test.poc_dbt_snowflake.not_null_tpcds_web_page_etl_updated_ts.937190a26b": ["model.poc_dbt_snowflake.tpcds_web_page"], "test.poc_dbt_snowflake.not_null_tpcds_web_page_updated_by.5a331dbe7d": ["model.poc_dbt_snowflake.tpcds_web_page"], "model.poc_dbt_snowflake.tpcds_store_sales": ["source.poc_dbt_snowflake.TPCDS.STORE_SALES"], "model.poc_dbt_snowflake.tpcds_web_sales": ["source.poc_dbt_snowflake.TPCDS.WEB_SALES"], "test.poc_dbt_snowflake.not_null_tpcds_store_sales_hash_key.b01119e3ef": ["model.poc_dbt_snowflake.tpcds_store_sales"], "test.poc_dbt_snowflake.unique_tpcds_store_sales_hash_key.b3d6483a45": ["model.poc_dbt_snowflake.tpcds_store_sales"], "test.poc_dbt_snowflake.not_null_tpcds_store_sales_etl_created_ts.783590aaaf": ["model.poc_dbt_snowflake.tpcds_store_sales"], "test.poc_dbt_snowflake.not_null_tpcds_store_sales_etl_updated_ts.d84b1993ef": ["model.poc_dbt_snowflake.tpcds_store_sales"], "test.poc_dbt_snowflake.not_null_tpcds_store_sales_updated_by.df233d2e2e": ["model.poc_dbt_snowflake.tpcds_store_sales"], "test.poc_dbt_snowflake.not_null_tpcds_web_sales_hash_key.95a176d3d6": ["model.poc_dbt_snowflake.tpcds_web_sales"], "test.poc_dbt_snowflake.unique_tpcds_web_sales_hash_key.fa94f38747": ["model.poc_dbt_snowflake.tpcds_web_sales"], "test.poc_dbt_snowflake.not_null_tpcds_web_sales_etl_created_ts.6dea1f4848": ["model.poc_dbt_snowflake.tpcds_web_sales"], "test.poc_dbt_snowflake.not_null_tpcds_web_sales_etl_updated_ts.d67c7b0783": ["model.poc_dbt_snowflake.tpcds_web_sales"], "test.poc_dbt_snowflake.not_null_tpcds_web_sales_updated_by.ab29fbf5f7": ["model.poc_dbt_snowflake.tpcds_web_sales"], "model.poc_dbt_snowflake.tpcds_store": ["source.poc_dbt_snowflake.TPCDS.STORE"], "test.poc_dbt_snowflake.not_null_tpcds_date_dim_hash_key.dbe6df66e7": ["model.poc_dbt_snowflake.tpcds_date_dim"], "test.poc_dbt_snowflake.unique_tpcds_date_dim_hash_key.c575070739": ["model.poc_dbt_snowflake.tpcds_date_dim"], "test.poc_dbt_snowflake.not_null_tpcds_date_dim_etl_created_ts.fd17fd34cc": ["model.poc_dbt_snowflake.tpcds_date_dim"], "test.poc_dbt_snowflake.not_null_tpcds_date_dim_etl_updated_ts.0ebf264178": ["model.poc_dbt_snowflake.tpcds_date_dim"], "test.poc_dbt_snowflake.not_null_tpcds_date_dim_updated_by.3365e84371": ["model.poc_dbt_snowflake.tpcds_date_dim"], "test.poc_dbt_snowflake.not_null_tpcds_store_hash_key.3085c400f3": ["model.poc_dbt_snowflake.tpcds_store"], "test.poc_dbt_snowflake.unique_tpcds_store_hash_key.1e6cabb7b0": ["model.poc_dbt_snowflake.tpcds_store"], "test.poc_dbt_snowflake.not_null_tpcds_store_etl_created_ts.7c3583b2d0": ["model.poc_dbt_snowflake.tpcds_store"], "test.poc_dbt_snowflake.not_null_tpcds_store_etl_updated_ts.7f35a3674e": ["model.poc_dbt_snowflake.tpcds_store"], "test.poc_dbt_snowflake.not_null_tpcds_store_updated_by.19cbc124c5": ["model.poc_dbt_snowflake.tpcds_store"], "source.poc_dbt_snowflake.TPCDS.CUSTOMER": [], "source.poc_dbt_snowflake.TPCDS.DATE_DIM": [], "source.poc_dbt_snowflake.TPCDS.STORE": [], "source.poc_dbt_snowflake.TPCDS.STORE_SALES": [], "source.poc_dbt_snowflake.TPCDS.WEB_PAGE": [], "source.poc_dbt_snowflake.TPCDS.WEB_SALES": []}, "child_map": {"model.poc_dbt_snowflake.unique_cocktails": [], "model.poc_dbt_snowflake.tpcds_date_dim": ["test.poc_dbt_snowflake.not_null_tpcds_date_dim_etl_created_ts.fd17fd34cc", "test.poc_dbt_snowflake.not_null_tpcds_date_dim_etl_updated_ts.0ebf264178", "test.poc_dbt_snowflake.not_null_tpcds_date_dim_hash_key.dbe6df66e7", "test.poc_dbt_snowflake.not_null_tpcds_date_dim_updated_by.3365e84371", "test.poc_dbt_snowflake.unique_tpcds_date_dim_hash_key.c575070739"], "model.poc_dbt_snowflake.tpcds_customer": ["test.poc_dbt_snowflake.not_null_tpcds_customer_etl_created_ts.07575a37fc", "test.poc_dbt_snowflake.not_null_tpcds_customer_etl_updated_ts.dc1473ff35", "test.poc_dbt_snowflake.not_null_tpcds_customer_hash_key.62794df7f9", "test.poc_dbt_snowflake.not_null_tpcds_customer_updated_by.4d0ed9329f", "test.poc_dbt_snowflake.unique_tpcds_customer_hash_key.6252498dbf"], "model.poc_dbt_snowflake.tpcds_web_page": ["test.poc_dbt_snowflake.not_null_tpcds_web_page_etl_created_ts.2523912fc2", "test.poc_dbt_snowflake.not_null_tpcds_web_page_etl_updated_ts.937190a26b", "test.poc_dbt_snowflake.not_null_tpcds_web_page_hash_key.45dcf293de", "test.poc_dbt_snowflake.not_null_tpcds_web_page_updated_by.5a331dbe7d", "test.poc_dbt_snowflake.unique_tpcds_web_page_hash_key.f6933a969c"], "test.poc_dbt_snowflake.not_null_tpcds_customer_hash_key.62794df7f9": [], "test.poc_dbt_snowflake.unique_tpcds_customer_hash_key.6252498dbf": [], "test.poc_dbt_snowflake.not_null_tpcds_customer_etl_created_ts.07575a37fc": [], "test.poc_dbt_snowflake.not_null_tpcds_customer_etl_updated_ts.dc1473ff35": [], "test.poc_dbt_snowflake.not_null_tpcds_customer_updated_by.4d0ed9329f": [], "test.poc_dbt_snowflake.not_null_tpcds_web_page_hash_key.45dcf293de": [], "test.poc_dbt_snowflake.unique_tpcds_web_page_hash_key.f6933a969c": [], "test.poc_dbt_snowflake.not_null_tpcds_web_page_etl_created_ts.2523912fc2": [], "test.poc_dbt_snowflake.not_null_tpcds_web_page_etl_updated_ts.937190a26b": [], "test.poc_dbt_snowflake.not_null_tpcds_web_page_updated_by.5a331dbe7d": [], "model.poc_dbt_snowflake.tpcds_store_sales": ["test.poc_dbt_snowflake.not_null_tpcds_store_sales_etl_created_ts.783590aaaf", "test.poc_dbt_snowflake.not_null_tpcds_store_sales_etl_updated_ts.d84b1993ef", "test.poc_dbt_snowflake.not_null_tpcds_store_sales_hash_key.b01119e3ef", "test.poc_dbt_snowflake.not_null_tpcds_store_sales_updated_by.df233d2e2e", "test.poc_dbt_snowflake.unique_tpcds_store_sales_hash_key.b3d6483a45"], "model.poc_dbt_snowflake.tpcds_web_sales": ["test.poc_dbt_snowflake.not_null_tpcds_web_sales_etl_created_ts.6dea1f4848", "test.poc_dbt_snowflake.not_null_tpcds_web_sales_etl_updated_ts.d67c7b0783", "test.poc_dbt_snowflake.not_null_tpcds_web_sales_hash_key.95a176d3d6", "test.poc_dbt_snowflake.not_null_tpcds_web_sales_updated_by.ab29fbf5f7", "test.poc_dbt_snowflake.unique_tpcds_web_sales_hash_key.fa94f38747"], "test.poc_dbt_snowflake.not_null_tpcds_store_sales_hash_key.b01119e3ef": [], "test.poc_dbt_snowflake.unique_tpcds_store_sales_hash_key.b3d6483a45": [], "test.poc_dbt_snowflake.not_null_tpcds_store_sales_etl_created_ts.783590aaaf": [], "test.poc_dbt_snowflake.not_null_tpcds_store_sales_etl_updated_ts.d84b1993ef": [], "test.poc_dbt_snowflake.not_null_tpcds_store_sales_updated_by.df233d2e2e": [], "test.poc_dbt_snowflake.not_null_tpcds_web_sales_hash_key.95a176d3d6": [], "test.poc_dbt_snowflake.unique_tpcds_web_sales_hash_key.fa94f38747": [], "test.poc_dbt_snowflake.not_null_tpcds_web_sales_etl_created_ts.6dea1f4848": [], "test.poc_dbt_snowflake.not_null_tpcds_web_sales_etl_updated_ts.d67c7b0783": [], "test.poc_dbt_snowflake.not_null_tpcds_web_sales_updated_by.ab29fbf5f7": [], "model.poc_dbt_snowflake.tpcds_store": ["test.poc_dbt_snowflake.not_null_tpcds_store_etl_created_ts.7c3583b2d0", "test.poc_dbt_snowflake.not_null_tpcds_store_etl_updated_ts.7f35a3674e", "test.poc_dbt_snowflake.not_null_tpcds_store_hash_key.3085c400f3", "test.poc_dbt_snowflake.not_null_tpcds_store_updated_by.19cbc124c5", "test.poc_dbt_snowflake.unique_tpcds_store_hash_key.1e6cabb7b0"], "test.poc_dbt_snowflake.not_null_tpcds_date_dim_hash_key.dbe6df66e7": [], "test.poc_dbt_snowflake.unique_tpcds_date_dim_hash_key.c575070739": [], "test.poc_dbt_snowflake.not_null_tpcds_date_dim_etl_created_ts.fd17fd34cc": [], "test.poc_dbt_snowflake.not_null_tpcds_date_dim_etl_updated_ts.0ebf264178": [], "test.poc_dbt_snowflake.not_null_tpcds_date_dim_updated_by.3365e84371": [], "test.poc_dbt_snowflake.not_null_tpcds_store_hash_key.3085c400f3": [], "test.poc_dbt_snowflake.unique_tpcds_store_hash_key.1e6cabb7b0": [], "test.poc_dbt_snowflake.not_null_tpcds_store_etl_created_ts.7c3583b2d0": [], "test.poc_dbt_snowflake.not_null_tpcds_store_etl_updated_ts.7f35a3674e": [], "test.poc_dbt_snowflake.not_null_tpcds_store_updated_by.19cbc124c5": [], "source.poc_dbt_snowflake.TPCDS.CUSTOMER": ["model.poc_dbt_snowflake.tpcds_customer"], "source.poc_dbt_snowflake.TPCDS.DATE_DIM": ["model.poc_dbt_snowflake.tpcds_date_dim"], "source.poc_dbt_snowflake.TPCDS.STORE": ["model.poc_dbt_snowflake.tpcds_store"], "source.poc_dbt_snowflake.TPCDS.STORE_SALES": ["model.poc_dbt_snowflake.tpcds_store_sales"], "source.poc_dbt_snowflake.TPCDS.WEB_PAGE": ["model.poc_dbt_snowflake.tpcds_web_page"], "source.poc_dbt_snowflake.TPCDS.WEB_SALES": ["model.poc_dbt_snowflake.tpcds_web_sales"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}